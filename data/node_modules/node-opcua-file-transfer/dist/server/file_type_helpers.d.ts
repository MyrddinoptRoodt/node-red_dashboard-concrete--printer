/// <reference types="node" />
import { Stats, PathLike, OpenMode, NoParamCallback, WriteFileOptions } from "fs";
import { UAFile, UAFile_Base, UAObjectType } from "node-opcua-address-space";
export interface AbstractFs {
    stat(path: PathLike, callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void): void;
    open(path: PathLike, flags: OpenMode, callback: (err: NodeJS.ErrnoException | null, fd: number) => void): void;
    write<TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: number | undefined | null, length: number | undefined | null, position: number | undefined | null, callback: (err: NodeJS.ErrnoException | null, bytesWritten: number, buffer: TBuffer) => void): void;
    read<TBuffer extends NodeJS.ArrayBufferView>(fd: number, buffer: TBuffer, offset: number, length: number, position: number | null, callback: (err: NodeJS.ErrnoException | null, bytesRead: number, buffer: TBuffer) => void): void;
    close(fd: number, callback: NoParamCallback): void;
    writeFile(path: PathLike | number, data: string | NodeJS.ArrayBufferView, options: WriteFileOptions, callback: NoParamCallback): void;
    readFile(path: PathLike | number, options: {
        encoding: BufferEncoding;
        flag?: string;
    } | string, callback: (err: NodeJS.ErrnoException | null, data: string) => void): void;
    existsSync(filename: string): boolean;
}
/**
 *
 */
export interface FileOptions {
    /**
     * the filaname of the physical file which is managed by the OPCUA filetpye
     */
    filename: string;
    /**
     * the maximum allowed size of the  phisical file.
     */
    maxSize?: number;
    /**
     * an optional mimeType
     */
    mineType?: string;
    fileSystem?: AbstractFs;
}
export interface UAFileType extends UAObjectType, UAFile_Base {
}
/**
 *
 */
export declare class FileTypeData {
    _fs: AbstractFs;
    filename: string;
    maxSize: number;
    mimeType: string;
    private file;
    private _openCount;
    private _fileSize;
    constructor(options: FileOptions, file: UAFile);
    set openCount(value: number);
    get openCount(): number;
    set fileSize(value: number);
    get fileSize(): number;
    /**
     * refresh position and size
     * this method should be call by the server if the file
     * is modified externally
     *
     */
    refresh(): Promise<void>;
}
export declare function getFileData(opcuaFile2: UAFile): FileTypeData;
export declare const defaultMaxSize = 100000000;
/**
 * bind all methods of a UAFile OPCUA node
 * @param file the OPCUA Node that has a typeDefinition of FileType
 * @param options the options
 */
export declare function installFileType(file: UAFile, options: FileOptions): void;
