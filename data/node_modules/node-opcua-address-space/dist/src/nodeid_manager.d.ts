import { NodeClass, QualifiedName } from "node-opcua-data-model";
import { NodeId, NodeIdLike } from "node-opcua-nodeid";
import { BaseNode, UAReference, UAReferenceType } from "node-opcua-address-space-base";
export declare const NamespaceOptions: {
    nodeIdNameSeparator: string;
};
export interface AddressSpacePartial {
    findNode(nodeId: NodeIdLike): BaseNode | null;
    findReferenceType(refType: NodeIdLike, namespaceIndex?: number): UAReferenceType | null;
}
export interface ConstructNodeIdOptions {
    nodeId?: string | NodeIdLike | null;
    browseName: QualifiedName;
    nodeClass: NodeClass;
    references?: UAReference[];
}
export declare type NodeEntry = [string, number, NodeClass];
export declare type NodeEntry1 = [string, number, string];
export declare class NodeIdManager {
    private _cache;
    private _reverseCache;
    private _internal_id_counter;
    private namespaceIndex;
    private addressSpace;
    constructor(namespaceIndex: number, addressSpace: AddressSpacePartial);
    setCache(cache: NodeEntry[]): void;
    setSymbols(symbols: NodeEntry1[]): void;
    getSymbols(): NodeEntry1[];
    getSymbolCSV(): string;
    buildNewNodeId(): NodeId;
    constructNodeId(options: ConstructNodeIdOptions): NodeId;
    findParentNodeId(options: ConstructNodeIdOptions): [NodeId, string] | null;
    private _addInCache;
    private _isInCache;
    private _getOrCreateFromName;
}
