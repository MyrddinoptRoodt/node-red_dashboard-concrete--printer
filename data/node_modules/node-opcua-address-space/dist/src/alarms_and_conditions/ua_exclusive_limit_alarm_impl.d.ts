import { NodeId } from "node-opcua-nodeid";
import { UAExclusiveLimitAlarm_Base } from "node-opcua-nodeset-ua";
import { UAEventType, UAExclusiveLimitStateMachineEx } from "../../source";
import { UATwoStateVariableEx } from "../../source/ua_two_state_variable_ex";
import { NamespacePrivate } from "../namespace_private";
import { UAShelvedStateMachineEx } from "../state_machine/ua_shelving_state_machine_ex";
import { UALimitAlarmEx, UALimitAlarmHelper, UALimitAlarmImpl } from "./ua_limit_alarm_impl";
export interface UAExclusiveLimitAlarmHelper extends UALimitAlarmHelper {
}
export interface UAExclusiveLimitAlarmEx extends Omit<UAExclusiveLimitAlarm_Base, "limitState">, UALimitAlarmEx, UAExclusiveLimitAlarmHelper {
    on(eventName: string, eventHandler: any): this;
    ackedState: UATwoStateVariableEx;
    activeState: UATwoStateVariableEx;
    confirmedState?: UATwoStateVariableEx;
    enabledState: UATwoStateVariableEx;
    latchedState?: UATwoStateVariableEx;
    outOfServiceState?: UATwoStateVariableEx;
    silenceState?: UATwoStateVariableEx;
    suppressedState?: UATwoStateVariableEx;
    limitState: UAExclusiveLimitStateMachineEx;
    shelvingState?: UAShelvedStateMachineEx;
}
export declare interface UAExclusiveLimitAlarmImpl extends UAExclusiveLimitAlarmEx {
}
export declare class UAExclusiveLimitAlarmImpl extends UALimitAlarmImpl implements UAExclusiveLimitAlarmEx {
    /***
     *
     * @method (static)instantiate
     * @param namespace {INamespace}
     * @param type
     * @param options
     * @param data
     * @return {UAExclusiveLimitAlarm}
     */
    static instantiate(namespace: NamespacePrivate, type: UAEventType | string | NodeId, options: any, data: any): UAExclusiveLimitAlarmImpl;
    _signalNewCondition(stateName: string | null, isActive: boolean, value: string): void;
    _setStateBasedOnInputValue(value: number): void;
}
