import { DataValue } from "node-opcua-data-value";
import { NodeId } from "node-opcua-nodeid";
import { DataType } from "node-opcua-variant";
import { UAExclusiveDeviationAlarm_Base } from "node-opcua-nodeset-ua";
import { UAVariable, UAVariableT } from "../../source";
import { AddressSpace } from "../address_space";
import { NamespacePrivate } from "../namespace_private";
import { DeviationStuff, InstallSetPointOptions } from "./deviation_alarm_helper";
import { UAExclusiveLimitAlarmEx, UAExclusiveLimitAlarmImpl } from "./ua_exclusive_limit_alarm_impl";
export interface UAExclusiveDeviationAlarmEx extends Omit<UAExclusiveDeviationAlarm_Base, "ackedState" | "activeState" | "confirmedState" | "enabledState" | "latchedState" | "limitState" | "outOfServiceState" | "shelvingState" | "silenceState" | "suppressedState">, UAExclusiveLimitAlarmEx, DeviationStuff {
}
export declare interface UAExclusiveDeviationAlarmImpl extends UAExclusiveDeviationAlarmEx, UAExclusiveLimitAlarmImpl {
    on(eventName: string, eventHandler: any): this;
    get addressSpace(): AddressSpace;
}
export declare class UAExclusiveDeviationAlarmImpl extends UAExclusiveLimitAlarmImpl implements UAExclusiveDeviationAlarmEx {
    static instantiate(namespace: NamespacePrivate, type: string | NodeId, options: any, data: any): UAExclusiveDeviationAlarmImpl;
    getSetpointNodeNode(): UAVariable;
    getSetpointValue(): number | null;
    _onSetpointDataValueChange(dataValue: DataValue): void;
    _install_setpoint(options: InstallSetPointOptions): any;
    _setStateBasedOnInputValue(value: number): void;
}
export interface UAExclusiveDeviationAlarmHelper {
    setpointNode: UAVariableT<NodeId, DataType.NodeId>;
    setpointNodeNode: UAVariable;
}
