/// <reference types="node" />
/**
 * @module node-opcua-address-space.AlarmsAndConditions
 */
import { Certificate } from "node-opcua-crypto";
import { DateTime } from "node-opcua-basic-types";
import { NodeId } from "node-opcua-nodeid";
import { DataType, VariantOptions } from "node-opcua-variant";
import { INamespace, UAObject, UAProperty } from "node-opcua-address-space-base";
import { UACertificateExpirationAlarmEx } from "../../source/interfaces/alarms_and_conditions/ua_certificate_expiration_alarm_ex";
import { InstantiateOffNormalAlarmOptions } from "../../source/interfaces/alarms_and_conditions/instantiate_off_normal_alarm_options";
import { UASystemOffNormalAlarmImpl } from "./ua_system_off_normal_alarm_impl";
export declare function instantiateCertificateExpirationAlarm(namespace: INamespace, alarmType: "CertificateExpirationAlarmType", options: InstantiateOffNormalAlarmOptions, data?: Record<string, VariantOptions>): UACertificateExpirationAlarmEx;
interface UACertificateExpirationAlarmImpl {
    expirationDate: UAProperty<Date, /*z*/ DataType.DateTime>;
    expirationLimit?: UAProperty<number, /*z*/ DataType.Double>;
    certificateType: UAProperty<NodeId, /*z*/ DataType.NodeId>;
    certificate: UAProperty<Buffer, /*z*/ DataType.ByteString>;
}
/**
 * This UACertificateExpirationAlarm (SystemOffNormalAlarmType) is raised by the Server when the Serverâ€™s
 * Certificate is within the ExpirationLimit
 * of expiration. This alarm automatically returns to normal when the certificate is updated.
 */
declare class UACertificateExpirationAlarmImpl extends UASystemOffNormalAlarmImpl implements UACertificateExpirationAlarmEx {
    static instantiate(namespace: INamespace, alarmType: "CertificateExpirationAlarmType", options: InstantiateOffNormalAlarmOptions, data?: Record<string, VariantOptions>): UACertificateExpirationAlarmImpl;
    getExpirationDate(): DateTime;
    setExpirationDate(expirationDate: Date): void;
    getExpirationLimit(): number;
    setExpirationLimit(value: number): void;
    getCertificate(): Certificate | null;
    setCertificate(certificate: Certificate | null): void;
    _post_initialize(): void;
}
export declare function promoteToCertificateExpirationAlarm(node: UAObject): UACertificateExpirationAlarmImpl;
export {};
