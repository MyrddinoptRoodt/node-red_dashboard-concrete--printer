/**
 * @module node-opcua-address-space.AlarmsAndConditions
 */
import { UAEventType } from "node-opcua-address-space-base";
import { DataValue } from "node-opcua-data-value";
import { NodeId } from "node-opcua-nodeid";
import { UALimitAlarm_Base } from "node-opcua-nodeset-ua";
import { UATwoStateVariableEx } from "../../source/ua_two_state_variable_ex";
import { NamespacePrivate } from "../namespace_private";
import { UAShelvedStateMachineEx } from "../state_machine/ua_shelving_state_machine_ex";
import { UAAlarmConditionEx, UAAlarmConditionHelper, UAAlarmConditionImpl } from "./ua_alarm_condition_impl";
export interface UALimitAlarmHelper extends UAAlarmConditionHelper {
    setLowLowLimit(value: number): void;
    setLowLimit(value: number): void;
    setHighLimit(value: number): void;
    setHighHighLimit(value: number): void;
    getHighHighLimit(): number;
    getHighLimit(): number;
    getLowLimit(): number;
    getLowLowLimit(): number;
}
export interface UALimitAlarmEx extends UALimitAlarm_Base, UAAlarmConditionEx, UALimitAlarmHelper {
    on(eventName: string, eventHandler: any): this;
    enabledState: UATwoStateVariableEx;
    ackedState: UATwoStateVariableEx;
    confirmedState?: UATwoStateVariableEx;
    activeState: UATwoStateVariableEx;
    latchedState?: UATwoStateVariableEx;
    outOfServiceState?: UATwoStateVariableEx;
    silenceState?: UATwoStateVariableEx;
    shelvingState?: UAShelvedStateMachineEx;
    suppressedState?: UATwoStateVariableEx;
}
export declare interface UALimitAlarmImpl extends UALimitAlarmEx, UAAlarmConditionImpl {
    on(eventName: string, eventHandler: any): this;
}
export declare class UALimitAlarmImpl extends UAAlarmConditionImpl implements UALimitAlarmEx {
    /**
     * @method (static)UALimitAlarm.instantiate
     * @param namespace {INamespace}
     * @param limitAlarmTypeId
     * @param options
     * @param options.inputNode
     * @param options.optionals
     * @param options.highHighLimit {Double}
     * @param options.highLimit     {Double}
     * @param options.lowLimit      {Double}
     * @param options.lowLowLimit   {Double}
     * @param data
     * @return {UALimitAlarm}
     */
    static instantiate(namespace: NamespacePrivate, limitAlarmTypeId: UAEventType | NodeId | string, options: any, data: any): UALimitAlarmImpl;
    /**
     * @method getHighHighLimit
     * @return {Number}
     */
    getHighHighLimit(): number;
    /**
     * @method getHighLimit
     * @return {Number}
     */
    getHighLimit(): number;
    /**
     * @method getLowLimit
     * @return {Float}
     */
    getLowLimit(): number;
    /**
     * @method getLowLowLimit
     * @return {Float}
     */
    getLowLowLimit(): number;
    /**
     * @method setHighHighLimit
     * @param value {Float}
     */
    setHighHighLimit(value: number): void;
    /**
     * @method setHighLimit
     * @param value {Float}
     */
    setHighLimit(value: number): void;
    /**
     * @method setLowLimit
     * @param value {Float}
     */
    setLowLimit(value: number): void;
    /**
     * @method setLowLowLimit
     * @param value {Float}
     */
    setLowLowLimit(value: number): void;
    _onInputDataValueChange(dataValue: DataValue): void;
    protected _setStateBasedOnInputValue(value: number): void;
    protected _watchLimits(): void;
    protected evaluateConditionsAfterEnabled(): void;
}
