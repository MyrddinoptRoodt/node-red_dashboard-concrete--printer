import { NodeId } from "node-opcua-nodeid";
import { UADiscreteAlarm_Base } from "node-opcua-nodeset-ua";
import { INamespace, UAEventType } from "../../source";
import { UAAlarmConditionEx, UAAlarmConditionHelper, UAAlarmConditionImpl } from "./ua_alarm_condition_impl";
export interface UADiscreteAlarmHelper extends UAAlarmConditionHelper {
    on(eventName: string, eventHandle: any): this;
}
export interface UADiscreteAlarmEx extends UAAlarmConditionEx, Omit<UADiscreteAlarm_Base, "suppressedState" | "silenceState" | "shelvingState" | "outOfServiceState" | "latchedState" | "confirmedState" | "ackedState" | "comfirmedState" | "activeState" | "enabledState">, UADiscreteAlarmHelper {
}
/**
 * The DiscreteAlarmType is used to classify Types into Alarm Conditions where the input for the
 * Alarm may take on only a certain number of possible values (e.g. true/false,
 * running/stopped/terminating).
 */
export declare class UADiscreteAlarmImpl extends UAAlarmConditionImpl implements UADiscreteAlarmEx {
    static instantiate(namespace: INamespace, discreteAlarmTypeId: UAEventType | NodeId | string, options: any, data: any): UADiscreteAlarmImpl;
}
