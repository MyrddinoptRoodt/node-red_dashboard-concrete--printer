"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.promoteToCertificateExpirationAlarm = exports.instantiateCertificateExpirationAlarm = void 0;
/**
 * @module node-opcua-address-space.AlarmsAndConditions
 */
const node_opcua_crypto_1 = require("node-opcua-crypto");
const node_opcua_basic_types_1 = require("node-opcua-basic-types");
const node_opcua_debug_1 = require("node-opcua-debug");
const node_opcua_variant_1 = require("node-opcua-variant");
const node_opcua_constants_1 = require("node-opcua-constants");
const node_opcua_data_model_1 = require("node-opcua-data-model");
const register_node_promoter_1 = require("../../source/loader/register_node_promoter");
const ua_system_off_normal_alarm_impl_1 = require("./ua_system_off_normal_alarm_impl");
const warningLog = (0, node_opcua_debug_1.make_warningLog)("AlarmsAndConditions");
function instantiateCertificateExpirationAlarm(namespace, alarmType, options, data) {
    return UACertificateExpirationAlarmImpl.instantiate(namespace, alarmType, options, data);
}
exports.instantiateCertificateExpirationAlarm = instantiateCertificateExpirationAlarm;
/**
 * This UACertificateExpirationAlarm (SystemOffNormalAlarmType) is raised by the Server when the Serverâ€™s
 * Certificate is within the ExpirationLimit
 * of expiration. This alarm automatically returns to normal when the certificate is updated.
 */
class UACertificateExpirationAlarmImpl extends ua_system_off_normal_alarm_impl_1.UASystemOffNormalAlarmImpl {
    static instantiate(namespace, alarmType, options, data) {
        const alarm = ua_system_off_normal_alarm_impl_1.UASystemOffNormalAlarmImpl.instantiate(namespace, alarmType || "CertificateExpirationAlarmType", options, data);
        Object.setPrototypeOf(alarm, UACertificateExpirationAlarmImpl.prototype);
        alarm._post_initialize();
        return alarm;
    }
    getExpirationDate() {
        return this.expirationDate.readValue().value.value;
    }
    setExpirationDate(expirationDate) {
        this.expirationDate.setValueFromSource({
            dataType: node_opcua_variant_1.DataType.DateTime,
            value: expirationDate
        });
        const now = new Date();
        const expirationLimit = this.getExpirationLimit();
        const checkDate = new Date(now.getTime() + +expirationLimit);
        const thumbprint = (0, node_opcua_crypto_1.makeSHA1Thumbprint)(this.getCertificate() || Buffer.alloc(0)).toString("hex");
        if (expirationDate.getTime() <= checkDate.getTime()) {
            if (!this.currentBranch().getActiveState()) {
                warningLog(`CertificateExpirationAlarm:  becomes active, certificate ${thumbprint} endDate ${expirationDate.toUTCString()} checkDate=${checkDate.toUTCString()} expirationLimit=${expirationLimit}`);
            }
            // also raise the event
            if (expirationDate.getTime() <= now.getTime()) {
                this.updateAlarmState(true, `certificate ${thumbprint} has expired : end date is ${expirationDate.toUTCString()} checkDate=${checkDate.toUTCString()}  expirationLimit=${expirationLimit}`);
            }
            else {
                this.updateAlarmState(true, `certificate ${thumbprint} is about to expire : end date is ${expirationDate.toString()} checkDate=${checkDate.toUTCString()}  expirationLimit=${expirationLimit}`);
            }
        }
        else {
            if (this.currentBranch().getActiveState()) {
                warningLog(`CertificateExpirationAlarm:  becomes desactivated, certificate ${thumbprint} endDate ${expirationDate.toUTCString()} expirationLimit=${expirationLimit}`);
            }
            // also raise the event
            this.updateAlarmState(false, `certificate ${thumbprint} end date is OK: ${expirationDate.toString()} , expirationLimit=${expirationLimit}`);
        }
    }
    getExpirationLimit() {
        var _a;
        return ((_a = this.expirationLimit) === null || _a === void 0 ? void 0 : _a.readValue().value.value) || 0;
    }
    setExpirationLimit(value) {
        var _a;
        (_a = this.expirationLimit) === null || _a === void 0 ? void 0 : _a.setValueFromSource({
            dataType: node_opcua_variant_1.DataType.Double,
            value
        });
    }
    getCertificate() {
        return this.certificate.readValue().value.value || null;
    }
    setCertificate(certificate) {
        if (certificate && certificate.length > 0) {
            const info = (0, node_opcua_crypto_1.exploreCertificate)(certificate);
            if (info.tbsCertificate.validity.notAfter instanceof Date) {
                this.setExpirationDate(info.tbsCertificate.validity.notAfter);
            }
            else {
                this.setExpirationDate(node_opcua_basic_types_1.minOPCUADate);
            }
        }
        else {
            this.setExpirationDate(node_opcua_basic_types_1.minOPCUADate);
        }
        this.certificate.setValueFromSource({
            dataType: node_opcua_variant_1.DataType.ByteString,
            value: certificate
        });
    }
    _post_initialize() {
        if (this.expirationLimit) {
            this.expirationLimit.accessLevel = (0, node_opcua_data_model_1.makeAccessLevelExFlag)("CurrentRead | CurrentWrite");
            this.expirationLimit.userAccessLevel = (0, node_opcua_data_model_1.makeAccessLevelExFlag)("CurrentRead | CurrentWrite");
            this.expirationLimit.on("value_changed", (dataValue) => {
                // make sure we re-evaluate the certificfate
                const certificate = this.getCertificate();
                this.setCertificate(certificate);
            });
        }
    }
}
function promoteToCertificateExpirationAlarm(node) {
    if (node instanceof UACertificateExpirationAlarmImpl) {
        return node; // already promoted
    }
    Object.setPrototypeOf(node, UACertificateExpirationAlarmImpl.prototype);
    const _node = node;
    _node._post_initialize();
    return _node;
}
exports.promoteToCertificateExpirationAlarm = promoteToCertificateExpirationAlarm;
(0, register_node_promoter_1.registerNodePromoter)(node_opcua_constants_1.ObjectTypeIds.CertificateExpirationAlarmType, promoteToCertificateExpirationAlarm);
//# sourceMappingURL=ua_certificate_expiration_alarm_impl.js.map