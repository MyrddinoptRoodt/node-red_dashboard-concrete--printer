import { NodeId } from "node-opcua-nodeid";
import { UANonExclusiveLimitAlarm_Base } from "node-opcua-nodeset-ua";
import { UAEventType } from "../../source";
import { UATwoStateVariableEx } from "../../source/ua_two_state_variable_ex";
import { NamespacePrivate } from "../namespace_private";
import { ConditionInfo } from "./condition_info";
import { UALimitAlarmEx, UALimitAlarmImpl } from "./ua_limit_alarm_impl";
export interface UANonExclusiveLimitAlarmEx extends UALimitAlarmEx, Omit<UANonExclusiveLimitAlarm_Base, "ackedState" | "activeState" | "confirmedState" | "enabledState" | "latchedState" | "limitState" | "outOfServiceState" | "shelvingState" | "silenceState" | "suppressedState"> {
    activeState: UATwoStateVariableEx;
    highHighState?: UATwoStateVariableEx;
    highState?: UATwoStateVariableEx;
    lowState?: UATwoStateVariableEx;
    lowLowState?: UATwoStateVariableEx;
}
export declare interface UANonExclusiveLimitAlarmImpl extends UANonExclusiveLimitAlarmEx, UALimitAlarmImpl {
    on(eventName: string, eventHandler: any): this;
}
export declare class UANonExclusiveLimitAlarmImpl extends UALimitAlarmImpl implements UANonExclusiveLimitAlarmEx {
    static instantiate(namespace: NamespacePrivate, type: UAEventType | NodeId | string, options: any, data: any): UANonExclusiveLimitAlarmImpl;
    _calculateConditionInfo(states: string | null, isActive: boolean, value: string, oldConditionInfo: ConditionInfo): ConditionInfo;
    _signalNewCondition2(states: {
        [key: string]: string;
    }, isActive: boolean, value: string): void;
    protected _setStateBasedOnInputValue(value: number): void;
}
