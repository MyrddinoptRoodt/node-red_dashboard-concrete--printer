/// <reference types="node" />
/**
 * @module node-opcua-address-space.AlarmsAndConditions
 */
import { UAAcknowledgeableCondition_Base } from "node-opcua-nodeset-ua";
import { LocalizedText, LocalizedTextLike } from "node-opcua-data-model";
import { NodeId } from "node-opcua-nodeid";
import { StatusCode } from "node-opcua-status-code";
import { INamespace, UAEventType, UAMethod } from "node-opcua-address-space-base";
import { UATwoStateVariableEx } from "../../source/ua_two_state_variable_ex";
import { AddressSpacePrivate } from "../address_space_private";
import { ConditionSnapshot } from "./condition_snapshot";
import { UAConditionHelper, UAConditionImpl, UAConditionEx } from "./ua_condition_impl";
export interface UAAcknowledgeableConditionHelper extends UAConditionHelper {
    on(eventName: string, eventHandler: (...args: any[]) => void): this;
    on(eventName: "acknowledged" | "confirmed", eventHandler: (eventId: Buffer | null, comment: LocalizedText, branch: ConditionSnapshot) => void): this;
}
export interface UAAcknowledgeableConditionHelper {
    autoConfirmBranch(branch: ConditionSnapshot, comment: LocalizedTextLike): void;
    acknowledgeAndAutoConfirmBranch(branch: ConditionSnapshot, comment: string | LocalizedTextLike | LocalizedText): void;
}
export interface UAAcknowledgeableConditionEx extends UAAcknowledgeableCondition_Base, UAAcknowledgeableConditionHelper, UAConditionEx {
    on(eventName: string, eventHandler: any): this;
    enabledState: UATwoStateVariableEx;
    ackedState: UATwoStateVariableEx;
    confirmedState?: UATwoStateVariableEx;
    acknowledge: UAMethod;
    confirm?: UAMethod;
}
export declare interface UAAcknowledgeableConditionImpl extends UAAcknowledgeableConditionEx, UAConditionImpl {
    on(eventName: string, eventHandler: any): this;
}
export declare class UAAcknowledgeableConditionImpl extends UAConditionImpl implements UAAcknowledgeableConditionEx {
    /**
     */
    static instantiate(namespace: INamespace, conditionTypeId: UAEventType | NodeId | string, options: any, data: any): UAAcknowledgeableConditionImpl;
    static install_method_handle_on_type(addressSpace: AddressSpacePrivate): void;
    _raiseAuditConditionAcknowledgeEvent(branch: ConditionSnapshot): void;
    _raiseAuditConditionConfirmEvent(branch: ConditionSnapshot): void;
    _acknowledge_branch(conditionEventId: Buffer, comment: string | LocalizedTextLike | LocalizedText, branch: ConditionSnapshot, message: string): StatusCode;
    /**
     * @method _confirm_branch
     * @param conditionEventId The ConditionEventId field shall contain the id of the Event that was conformed
     * @param comment
     * @param branch
     * @param message
     * @private
     */
    _confirm_branch(conditionEventId: Buffer, comment: string | LocalizedTextLike, branch: ConditionSnapshot, message: string): void;
    /**
     * @method autoConfirmBranch
     * @param branch
     * @param comment
     */
    autoConfirmBranch(branch: ConditionSnapshot, comment: LocalizedTextLike): void;
    /**
     * @method acknowledgeAndAutoConfirmBranch
     * @param branch {ConditionSnapshot}
     * @param comment {String|LocalizedText}
     */
    acknowledgeAndAutoConfirmBranch(branch: ConditionSnapshot, comment: string | LocalizedTextLike | LocalizedText): void;
}
