"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExtraDataTypeManager = void 0;
const node_opcua_debug_1 = require("node-opcua-debug");
const node_opcua_factory_1 = require("node-opcua-factory");
const node_opcua_pseudo_session_1 = require("node-opcua-pseudo-session");
//
const extra_data_type_manager_1 = require("./extra_data_type_manager");
const populate_data_type_manager_1 = require("./populate_data_type_manager");
const doDebug = (0, node_opcua_debug_1.checkDebugFlag)(__filename);
const debugLog = (0, node_opcua_debug_1.make_debugLog)(__filename);
const errorLog = (0, node_opcua_debug_1.make_errorLog)(__filename);
function getExtraDataTypeManager(session) {
    return __awaiter(this, void 0, void 0, function* () {
        const sessionPriv = session;
        if (!sessionPriv.$$extraDataTypeManager) {
            const dataTypeManager = new extra_data_type_manager_1.ExtraDataTypeManager();
            const namespaceArray = yield (0, node_opcua_pseudo_session_1.readNamespaceArray)(sessionPriv);
            // istanbul ignore next
            if (namespaceArray.length === 0) {
                errorLog("namespaceArray is not populated ! Your server must expose a list of namespace ");
            }
            // istanbul ignore next
            if (doDebug) {
                debugLog("Namespace Array = ", namespaceArray.join("\n                   "));
            }
            sessionPriv.$$extraDataTypeManager = dataTypeManager;
            dataTypeManager.setNamespaceArray(namespaceArray);
            for (let namespaceIndex = 1; namespaceIndex < namespaceArray.length; namespaceIndex++) {
                const dataTypeFactory1 = new node_opcua_factory_1.DataTypeFactory([(0, node_opcua_factory_1.getStandardDataTypeFactory)()]);
                dataTypeManager.registerDataTypeFactory(namespaceIndex, dataTypeFactory1);
            }
            yield (0, populate_data_type_manager_1.populateDataTypeManager)(session, dataTypeManager, false);
        }
        // istanbul ignore next
        if (sessionPriv.$$extraDataTypeManager.namespaceArray.length === 0) {
            throw new Error("namespaceArray is not populated ! Your server must expose a list of namespace ");
        }
        return sessionPriv.$$extraDataTypeManager;
    });
}
exports.getExtraDataTypeManager = getExtraDataTypeManager;
//# sourceMappingURL=get_extra_data_type_manager.js.map