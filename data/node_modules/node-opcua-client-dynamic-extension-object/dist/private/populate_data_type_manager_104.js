"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.populateDataTypeManager104 = exports.readDataTypeDefinitionAndBuildType = void 0;
const node_opcua_assert_1 = require("node-opcua-assert");
const node_opcua_data_model_1 = require("node-opcua-data-model");
const node_opcua_debug_1 = require("node-opcua-debug");
const node_opcua_nodeid_1 = require("node-opcua-nodeid");
const node_opcua_schemas_1 = require("node-opcua-schemas");
const node_opcua_status_code_1 = require("node-opcua-status-code");
const convert_data_type_definition_to_structuretype_schema_1 = require("../convert_data_type_definition_to_structuretype_schema");
const errorLog = (0, node_opcua_debug_1.make_errorLog)(__filename);
const debugLog = (0, node_opcua_debug_1.make_debugLog)(__filename);
function readDataTypeDefinitionAndBuildType(session, dataTypeNodeId, name, dataTypeFactory, cache) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const dataTypeDefinitionDataValue = yield session.read({
                attributeId: node_opcua_data_model_1.AttributeIds.DataTypeDefinition,
                nodeId: dataTypeNodeId
            });
            /* istanbul ignore next */
            if (dataTypeDefinitionDataValue.statusCode !== node_opcua_status_code_1.StatusCodes.Good) {
                throw new Error(" Cannot find dataType Definition ! with nodeId =" + dataTypeNodeId.toString());
            }
            const dataTypeDefinition = dataTypeDefinitionDataValue.value.value;
            const schema = yield (0, convert_data_type_definition_to_structuretype_schema_1.convertDataTypeDefinitionToStructureTypeSchema)(session, dataTypeNodeId, name, dataTypeDefinition, dataTypeFactory, cache);
            (0, node_opcua_schemas_1.createDynamicObjectConstructor)(schema, dataTypeFactory);
        }
        catch (err) {
            errorLog("Error", err);
        }
    });
}
exports.readDataTypeDefinitionAndBuildType = readDataTypeDefinitionAndBuildType;
class TaskMan {
    constructor() {
        this.taskList = [];
        this._runningTask = false;
        this._resolve = undefined;
    }
    flushTaskList() {
        return __awaiter(this, void 0, void 0, function* () {
            const firstTask = this.taskList.shift();
            this._runningTask = true;
            yield firstTask();
            this._runningTask = false;
            if (this.taskList.length > 0) {
                setImmediate(() => __awaiter(this, void 0, void 0, function* () {
                    yield this.flushTaskList();
                }));
            }
            else {
                if (this._resolve) {
                    const tmpResolve = this._resolve;
                    this._resolve = undefined;
                    tmpResolve();
                }
            }
        });
    }
    /**
     *
     * a little async task queue that gets executed sequentially
     * outside the main loop
     */
    registerTask(taskFunc) {
        this.taskList.push(taskFunc);
        if (this.taskList.length === 1 && !this._runningTask) {
            this.flushTaskList();
        }
    }
    waitForCompletion() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._resolve !== undefined) {
                throw new Error("already waiting");
            }
            yield new Promise((resolve) => {
                this._resolve = resolve;
            });
        });
    }
}
function applyOnReferenceRecursively(session, nodeId, browseDescriptionTemplate, action) {
    return __awaiter(this, void 0, void 0, function* () {
        const taskMan = new TaskMan();
        let pendingNodesToBrowse = [];
        let pendingContinuationPoints = [];
        function processBrowseResult(browseResults) {
            for (const result of browseResults) {
                if (result.statusCode === node_opcua_status_code_1.StatusCodes.Good) {
                    if (result.continuationPoint) {
                        pendingContinuationPoints.push(result.continuationPoint);
                        taskMan.registerTask(flushBrowse);
                    }
                    for (const r of result.references || []) {
                        taskMan.registerTask(() => __awaiter(this, void 0, void 0, function* () {
                            yield action(r);
                        }));
                        // also explore sub types
                        browseSubDataTypeRecursively(r.nodeId);
                    }
                }
            }
        }
        function flushBrowse() {
            return __awaiter(this, void 0, void 0, function* () {
                if (pendingContinuationPoints.length) {
                    const continuationPoints = pendingContinuationPoints;
                    pendingContinuationPoints = [];
                    taskMan.registerTask(() => __awaiter(this, void 0, void 0, function* () {
                        const browseResults = yield session.browseNext(continuationPoints, false);
                        processBrowseResult(browseResults);
                    }));
                }
                else if (pendingNodesToBrowse.length) {
                    const nodesToBrowse = pendingNodesToBrowse;
                    pendingNodesToBrowse = [];
                    taskMan.registerTask(() => __awaiter(this, void 0, void 0, function* () {
                        const browseResults = yield session.browse(nodesToBrowse);
                        processBrowseResult(browseResults);
                    }));
                }
            });
        }
        function browseSubDataTypeRecursively(nodeId) {
            const nodeToBrowse = Object.assign(Object.assign({}, browseDescriptionTemplate), { nodeId });
            pendingNodesToBrowse.push(nodeToBrowse);
            taskMan.registerTask(() => __awaiter(this, void 0, void 0, function* () {
                flushBrowse();
            }));
        }
        browseSubDataTypeRecursively(nodeId);
        yield taskMan.waitForCompletion();
    });
}
function populateDataTypeManager104(session, dataTypeManager) {
    return __awaiter(this, void 0, void 0, function* () {
        const cache = {};
        function withDataType(r) {
            return __awaiter(this, void 0, void 0, function* () {
                const dataTypeNodeId = r.nodeId;
                try {
                    const dataTypeFactory = dataTypeManager.getDataTypeFactory(dataTypeNodeId.namespace);
                    if (dataTypeNodeId.namespace === 0) {
                        // already known I guess
                        return;
                    }
                    // if not found already
                    if (dataTypeFactory.getConstructorForDataType(dataTypeNodeId)) {
                        // already known !
                        return;
                    }
                    // extract it formally
                    debugLog(" DataType => ", r.browseName.toString(), dataTypeNodeId.toString());
                    yield readDataTypeDefinitionAndBuildType(session, dataTypeNodeId, r.browseName.name, dataTypeFactory, cache);
                    (0, node_opcua_assert_1.assert)(dataTypeFactory.getConstructorForDataType(dataTypeNodeId));
                }
                catch (err) {
                    errorLog("err=", err);
                }
            });
        }
        const nodeToBrowse = {
            nodeId: node_opcua_nodeid_1.NodeId.nullNodeId,
            includeSubtypes: true,
            browseDirection: node_opcua_data_model_1.BrowseDirection.Forward,
            nodeClassMask: 0xff,
            referenceTypeId: (0, node_opcua_nodeid_1.resolveNodeId)("HasSubtype"),
            resultMask: 0xff
        };
        yield applyOnReferenceRecursively(session, (0, node_opcua_nodeid_1.resolveNodeId)("Structure"), nodeToBrowse, withDataType);
    });
}
exports.populateDataTypeManager104 = populateDataTypeManager104;
//# sourceMappingURL=populate_data_type_manager_104.js.map