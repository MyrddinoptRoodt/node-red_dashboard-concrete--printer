import { BinaryStream } from "node-opcua-binary-stream";
import { ExpandedNodeId, NodeId } from "node-opcua-nodeid";
import { TypeSchemaBase } from "./builtin_types";
import { FieldType, IStructuredTypeSchema, StructuredTypeOptions } from "./types";
export declare class StructuredTypeSchema extends TypeSchemaBase implements IStructuredTypeSchema {
    fields: FieldType[];
    id: NodeId;
    dataTypeNodeId: NodeId;
    baseType: string;
    _possibleFields: string[];
    _baseSchema: IStructuredTypeSchema | null;
    documentation?: string;
    isValid?: (options: any) => boolean;
    decodeDebug?: (stream: BinaryStream, options: any) => any;
    constructHook?: (options: any) => any;
    encodingDefaultBinary?: ExpandedNodeId;
    encodingDefaultXml?: ExpandedNodeId;
    encodingDefaultJson?: ExpandedNodeId;
    bitFields?: any[];
    constructor(options: StructuredTypeOptions);
    toString(): string;
}
/**
 *
 * @method get_base_schema
 * @param schema
 * @return {*}
 *
 */
export declare function get_base_schema(schema: IStructuredTypeSchema): IStructuredTypeSchema | null;
/**
 * extract a list of all possible fields for a schema
 * (by walking up the inheritance chain)
 *
 */
export declare function extract_all_fields(schema: IStructuredTypeSchema): string[];
/**
 * check correctness of option fields against scheme
 *
 * @method  check_options_correctness_against_schema
 *
 */
export declare function check_options_correctness_against_schema(obj: any, schema: IStructuredTypeSchema, options: any): boolean;
export declare function buildStructuredType(schemaLight: StructuredTypeOptions): StructuredTypeSchema;
