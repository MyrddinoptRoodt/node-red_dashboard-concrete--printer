import { ExpandedNodeId, NodeId } from "node-opcua-nodeid";
import { EnumerationDefinitionSchema } from "./enumerations";
import { CommonInterface, StructuredTypeField, IStructuredTypeSchema, ConstructorFuncWithSchema, ConstructorFunc, IBaseUAObject } from "./types";
export declare function _findFieldSchema(typeDictionary: DataTypeFactory, field: StructuredTypeField, value: any): IStructuredTypeSchema;
export declare class DataTypeFactory {
    defaultByteOrder: string;
    targetNamespace: string;
    imports: string[];
    private _structureTypeConstructorByNameMap;
    private _structureTypeConstructorByDataTypeMap;
    private _structureTypeConstructorByEncodingNodeIdMap;
    private _enumerations;
    private baseDataFactories;
    constructor(baseDataFactories: DataTypeFactory[]);
    repairBaseDataFactories(baseDataFactories: DataTypeFactory[]): void;
    hasBuiltInType(name: string): boolean;
    getBuiltInType(name: string): CommonInterface;
    getBuiltInTypeByDataType(nodeId: NodeId): CommonInterface;
    registerEnumeration(enumeration: EnumerationDefinitionSchema): void;
    hasEnumeration(enumName: string): boolean;
    getEnumeration(enumName: string): EnumerationDefinitionSchema | null;
    findConstructorForDataType(dataTypeNodeId: NodeId): ConstructorFuncWithSchema;
    getConstructorForDataType(dataTypeNodeId: NodeId): ConstructorFuncWithSchema | null;
    structuredTypesNames(): IterableIterator<string>;
    getStructureTypeConstructor(typeName: string): ConstructorFuncWithSchema;
    hasStructuredType(typeName: string): boolean;
    getStructuredTypeSchema(typeName: string): IStructuredTypeSchema;
    dump(): void;
    registerClassDefinition(dataTypeNodeId: NodeId, className: string, classConstructor: ConstructorFuncWithSchema): void;
    getConstructor(binaryEncodingNodeId: NodeId): ConstructorFunc | null;
    hasConstructor(binaryEncodingNodeId: NodeId): boolean;
    constructObject(binaryEncodingNodeId: NodeId): IBaseUAObject;
    associateWithBinaryEncoding(className: string, expandedNodeId: ExpandedNodeId): void;
    toString(): string;
    private _registerFactory;
}
