"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildStructuredType = exports.check_options_correctness_against_schema = exports.extract_all_fields = exports.get_base_schema = exports.StructuredTypeSchema = void 0;
/**
 * @module node-opcua-factory
 */
const chalk = require("chalk");
const node_opcua_assert_1 = require("node-opcua-assert");
const node_opcua_nodeid_1 = require("node-opcua-nodeid");
const node_opcua_utils_1 = require("node-opcua-utils");
const builtin_types_1 = require("./builtin_types");
const enumerations_1 = require("./enumerations");
const parameters_1 = require("./parameters");
const get_standard_data_type_factory_1 = require("./get_standard_data_type_factory");
const get_structured_type_schema_1 = require("./get_structured_type_schema");
const types_1 = require("./types");
function figureOutFieldCategory(field) {
    const fieldType = field.fieldType;
    if (field.category) {
        return field.category;
    }
    if ((0, enumerations_1.hasBuiltInEnumeration)(fieldType)) {
        return types_1.FieldCategory.enumeration;
    }
    else if ((0, builtin_types_1.hasBuiltInType)(fieldType)) {
        return types_1.FieldCategory.basic;
    }
    else if ((0, get_standard_data_type_factory_1.hasStructuredType)(fieldType)) {
        (0, node_opcua_assert_1.assert)(fieldType !== "LocalizedText"); // LocalizedText should be treated as BasicType!!!
        return types_1.FieldCategory.complex;
    }
    return types_1.FieldCategory.basic;
}
const regExp = /((ns[0-9]+:)?)(.*)/;
function figureOutSchema(underConstructSchema, field, category) {
    if (field.schema) {
        return field.schema;
    }
    if (underConstructSchema.name === field.fieldType) {
        return underConstructSchema;
    }
    let returnValue = null;
    // may be the field.type  contains a ns<X>: prefix !! like the one found in Beckhoff PLC !
    const m = field.fieldType.match(regExp);
    /* istanbul ignore next */
    if (!m) {
        throw new Error("malformed fieldType ? : " + field.fieldType);
    }
    const fieldTypeWithoutNS = m[3];
    switch (category) {
        case types_1.FieldCategory.complex:
            if ((0, get_standard_data_type_factory_1.hasStructuredType)(field.fieldType)) {
                returnValue = (0, get_structured_type_schema_1.getStructuredTypeSchema)(fieldTypeWithoutNS);
            }
            else {
                // LocalizedText etc ...
                returnValue = (0, builtin_types_1.getBuiltInType)(fieldTypeWithoutNS);
            }
            break;
        case types_1.FieldCategory.basic:
            returnValue = (0, builtin_types_1.getBuiltInType)(fieldTypeWithoutNS);
            if (!returnValue) {
                returnValue = (0, get_structured_type_schema_1.getStructuredTypeSchema)(fieldTypeWithoutNS);
                if (returnValue) {
                    console.log("Why ?");
                }
            }
            break;
        case types_1.FieldCategory.enumeration:
            returnValue = (0, enumerations_1.getBuiltInEnumeration)(fieldTypeWithoutNS);
            break;
    }
    if (null === returnValue || undefined === returnValue) {
        try {
            returnValue = (0, enumerations_1.getBuiltInEnumeration)(fieldTypeWithoutNS);
        }
        catch (err) {
            console.log(err);
        }
        throw new Error("Cannot find Schema for field with name " +
            field.name +
            " fieldTypeWithoutNS= " +
            fieldTypeWithoutNS +
            " with type " +
            field.fieldType +
            " category = " +
            category +
            JSON.stringify(field, null, "\t"));
    }
    return returnValue;
}
function buildField(underConstructSchema, fieldLight) {
    const category = figureOutFieldCategory(fieldLight);
    const schema = figureOutSchema(underConstructSchema, fieldLight, category);
    /* istanbul ignore next */
    if (!schema) {
        throw new Error("expecting a valid schema for field with name " +
            fieldLight.name +
            " with type " +
            fieldLight.fieldType +
            " category" +
            category);
    }
    const { defaultValue, isArray, documentation, fieldType, switchBit, switchValue, allowSubType, dataType, basicDataType } = fieldLight;
    return {
        name: (0, node_opcua_utils_1.lowerFirstLetter)(fieldLight.name),
        category,
        defaultValue,
        isArray,
        documentation,
        fieldType,
        switchBit,
        switchValue,
        allowSubType,
        dataType,
        basicDataType,
        schema
    };
}
class StructuredTypeSchema extends builtin_types_1.TypeSchemaBase {
    constructor(options) {
        super(options);
        this.bitFields = options.bitFields;
        this.baseType = options.baseType;
        this.category = types_1.FieldCategory.complex;
        if ((0, builtin_types_1.hasBuiltInType)(options.name)) {
            this.category = types_1.FieldCategory.basic;
        }
        this.fields = options.fields.map(buildField.bind(null, this));
        this.id = new node_opcua_nodeid_1.NodeId();
        this.dataTypeNodeId = new node_opcua_nodeid_1.NodeId();
        this._possibleFields = this.fields.map((field) => field.name);
        this._baseSchema = null;
    }
    toString() {
        var _a, _b, _c;
        const str = [];
        str.push("name           = " + this.name);
        str.push("baseType       = " + this.baseType);
        str.push("id             = " + this.id.toString());
        str.push("bitFields      = " + (this.bitFields ? this.bitFields.map((b) => b.name).join(" ") : undefined));
        str.push("dataTypeNodeId = " + (this.dataTypeNodeId ? this.dataTypeNodeId.toString() : undefined));
        str.push("documentation  = " + this.documentation);
        str.push("encodingDefaultBinary  = " + ((_a = this.encodingDefaultBinary) === null || _a === void 0 ? void 0 : _a.toString()));
        str.push("encodingDefaultXml     = " + ((_b = this.encodingDefaultXml) === null || _b === void 0 ? void 0 : _b.toString()));
        str.push("encodingDefaultJson    = " + ((_c = this.encodingDefaultJson) === null || _c === void 0 ? void 0 : _c.toString()));
        for (const f of this.fields) {
            str.push("  field   =  " +
                f.name.padEnd(30) +
                " isArray= " +
                (f.isArray ? true : false) +
                " " +
                f.fieldType.toString().padEnd(30) +
                (f.switchBit !== undefined ? " switchBit " + f.switchBit : "") +
                (f.switchValue !== undefined ? " switchValue    " + f.switchValue : ""));
        }
        return str.join("\n");
    }
}
exports.StructuredTypeSchema = StructuredTypeSchema;
/**
 *
 * @method get_base_schema
 * @param schema
 * @return {*}
 *
 */
function get_base_schema(schema) {
    let baseSchema = schema._baseSchema;
    if (baseSchema) {
        return baseSchema;
    }
    if (schema.baseType === "ExtensionObject" || schema.baseType === "DataTypeDefinition") {
        return null;
    }
    if (schema.baseType === "Union") {
        return null;
    }
    if (schema.baseType && schema.baseType !== "BaseUAObject" && schema.baseType !== "DataTypeDefinition") {
        if (!(0, get_standard_data_type_factory_1.hasStructuredType)(schema.baseType)) {
            return null;
        }
        const baseType = (0, get_standard_data_type_factory_1.getStructureTypeConstructor)(schema.baseType);
        // istanbul ignore next
        if (!baseType) {
            throw new Error(" cannot find factory for " + schema.baseType);
        }
        if (baseType.prototype.schema) {
            baseSchema = baseType.prototype.schema;
        }
    }
    // put in  cache for speedup
    schema._baseSchema = baseSchema;
    return baseSchema;
}
exports.get_base_schema = get_base_schema;
/**
 * extract a list of all possible fields for a schema
 * (by walking up the inheritance chain)
 *
 */
function extract_all_fields(schema) {
    // returns cached result if any
    // istanbul ignore next
    if (schema._possibleFields) {
        return schema._possibleFields;
    }
    // extract the possible fields from the schema.
    let possibleFields = schema.fields.map((field) => field.name);
    const baseSchema = get_base_schema(schema);
    // istanbul ignore next
    if (baseSchema) {
        const fields = extract_all_fields(baseSchema);
        possibleFields = fields.concat(possibleFields);
    }
    // put in cache to speed up
    schema._possibleFields = possibleFields;
    return possibleFields;
}
exports.extract_all_fields = extract_all_fields;
/**
 * check correctness of option fields against scheme
 *
 * @method  check_options_correctness_against_schema
 *
 */
function check_options_correctness_against_schema(obj, schema, options) {
    if (!parameters_1.parameters.debugSchemaHelper) {
        return true; // ignoring set
    }
    options = options || {};
    // istanbul ignore next
    if (!(options !== null && typeof options === "object") && !(typeof options === "object")) {
        let message = chalk.red(" Invalid options specified while trying to construct a ") + " " + chalk.yellow(schema.name);
        message += "\n";
        message += chalk.red(" expecting a ") + chalk.yellow(" Object ");
        message += "\n";
        message += chalk.red(" and got a ") + chalk.yellow(typeof options) + chalk.red(" instead ");
        throw new Error(message);
    }
    // istanbul ignore next
    if (options instanceof obj.constructor) {
        return true;
    }
    // extract the possible fields from the schema.
    const possibleFields = obj.constructor.possibleFields || schema._possibleFields;
    // extracts the fields exposed by the option object
    const currentFields = Object.keys(options);
    // get a list of field that are in the 'options' object but not in schema
    // https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore
    function difference(a1, a2) {
        return [a1, a2].reduce((a, b) => a.filter((value) => !b.includes(value)));
    }
    const invalidOptionsFields = difference(currentFields, possibleFields);
    /* istanbul ignore next */
    if (invalidOptionsFields.length > 0) {
        // tslint:disable:no-console
        console.log("expected schema", schema.name);
        console.log(chalk.yellow("possible fields= "), possibleFields.sort().join(" "));
        console.log(chalk.red("current fields= "), currentFields.sort().join(" "));
        console.log(chalk.cyan("invalid_options_fields= "), invalidOptionsFields.sort().join(" "));
        console.log("options = ", options);
    }
    /* istanbul ignore next */
    if (invalidOptionsFields.length !== 0) {
        // tslint:disable:no-console
        console.log(chalk.yellow("possible fields= "), possibleFields.sort().join(" "));
        console.log(chalk.red("current fields= "), currentFields.sort().join(" "));
        throw new Error(" invalid field found in option :" + JSON.stringify(invalidOptionsFields));
    }
    return true;
}
exports.check_options_correctness_against_schema = check_options_correctness_against_schema;
function buildStructuredType(schemaLight) {
    return new StructuredTypeSchema(schemaLight);
}
exports.buildStructuredType = buildStructuredType;
//# sourceMappingURL=structured_type_schema.js.map