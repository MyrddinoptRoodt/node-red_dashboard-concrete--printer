[{"id":"8e70d73f.ce8c58","type":"tab","label":"あんどん","disabled":false,"info":"V1.0.0\n・新規作成"},{"id":"444211fa.db8a7","type":"tab","label":"ライン管理","disabled":false,"info":"V1.0.3\n・定期実行対応\nV1.0.2\n・query対応\nV1.0.1\n・ライン情報まとめの残り時間と完了予定時刻\n　がおかしい不具合修正\nV1.0.0\n・新規作成"},{"id":"dee5dc2.0abc72","type":"tab","label":"共通","disabled":false,"info":"V1.0.3\n・query対応修正\nV1.0.2\n・query対応\nV1.0.1\n・ノードごとのログ出力対応\nV1.0.0\n・新規作成"},{"id":"710f7aed.d2ab74","type":"tab","label":"装置別画面","disabled":false,"info":"V1.0.0\n・新規作成\nV1.0.1\n・生産実績履歴、異常履歴、品質異常履歴にId追加\nV1.0.2\n・異常マスタ更新対応\nV1.0.3\n・品質異常履歴の単位がない不具合修正\nV1.0.4\n・マスタと一致しないデータは表示しない\nV1.0.5\n・query対応"},{"id":"26bcf22.c9c150e","type":"tab","label":"分析","disabled":false,"info":"V1.0.4\n・query対応\nV1.0.3\n・マスタと一致しないデータは表示しない\nV1.0.2\n・生産数図番合計修正\nV1.0.1\n・異常マスタ更新対応\nV1.0.0\n・新規作成"},{"id":"74818e7b.3d0c9","type":"tab","label":"マスタ","disabled":false,"info":"V1.0.3\n・異常マスタ更新\nV1.0.2\n・正式なThingに更新\nV1.0.1\n・品質異常マスタ更新"},{"id":"7921df9d.6746b","type":"tab","label":"テスト用データ作成","disabled":true,"info":"V1.0.3\n・QualityAbnormalHistoryでOKとNGをランダムで\n　作成するよう修正\n・QualityAbnormalHistoryで図番にランダムで数値を\n　付けるよう作成\nV1.0.2\n・QualityAbnormalHistory修正\nV1.0.1\n・Status修正\nV1.0.0\n・新規作成"},{"id":"98a6515a.fd48","type":"inject","z":"dee5dc2.0abc72","name":"Node-RED起動時","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":true,"onceDelay":0.1,"x":150,"y":80,"wires":[["7416402e.02c08"]]},{"id":"f74da171.e794a","type":"function","z":"dee5dc2.0abc72","name":"メイン：共通関数設定","func":"/* eslint-disable camelcase */\n// アプリコンフィグをグローバル変数から取得\nconst applicationConfig = global.get(\"ApplicationConfig\");\n// ログ出力設定\nconst log4js = global.get(\"log4js\");\nconst log4conf = applicationConfig.log4conf;\nlog4js.configure(log4conf.configure);\n\nconst logger = {};\nconst debugNodeIds = log4conf.debugNodeId.split(\",\");\n\nlogger.error = function(nodeIns, msg) {\n    str = makeLoggerMsg(nodeIns.name, msg);\n    nodeIns.error(str);\n    const log = global.get(\"log4js\").getLogger(log4conf.categorie);\n    log.error(str);\n};\nlogger.warn = function(nodeIns, msg) {\n    str = makeLoggerMsg(nodeIns.name, msg);\n    nodeIns.warn(str);\n    const log = global.get(\"log4js\").getLogger(log4conf.categorie);\n    log.warn(str);\n};\nlogger.info = function(nodeIns, msg) {\n    str = makeLoggerMsg(nodeIns.name, msg);\n    const log = global.get(\"log4js\").getLogger(log4conf.categorie);\n    log.info(str);\n};\nlogger.debug = function(nodeIns, msg) {\n    let debugFlg = false;\n    if (debugNodeIds[0]==\"ALL\") {\n        debugFlg = true;\n    } else {\n        for ( let i=0; i<debugNodeIds.length; i++ ) {\n            if (debugNodeIds[i]==nodeIns.id) {\n                debugFlg = true;\n            }\n        }\n    }\n    if (debugFlg===true) {\n        str = makeLoggerMsg(nodeIns.name, msg);\n        if (log4conf.categorie==\"debug\") {\n            nodeIns.warn(str);\n            const log = global.get(\"log4js\").getLogger(log4conf.categorie);\n            log.debug(str);\n        }\n    }\n};\n/**\n * ログメッセージを組み立てる\n * @param {string} nodeName \n * @param {string} msg \n * @return {string}\n */\nfunction makeLoggerMsg(nodeName, msg) {\n    if ( typeof nodeName === \"undefined\") {\n        nodeName=\"\";\n    }\n    if ( typeof msg === \"undefined\") {\n        msg=\"\";\n    }\n    return \"[\" + nodeName + \"] \" + msg;\n}\n\nglobal.set(\"logger\", logger);\n\nnode.log(\"\");\n\nconst platform = {};\nconst request = global.get(\"request-promise\");\nconst ckdPlatform = applicationConfig.CkdPlatform;\nplatform.latest = function(thing, app) {\n    return new Promise((resolve, reject)=>{\n        logger.debug(node, \"latest thing: \" + thing);\n        \n        const url = ckdPlatform.Url + \"latest\" + \"?app=\" + app + \"&thing=\" + thing;\n        logger.debug(node, url);\n        request({\n            url: url,\n            method: \"GET\",\n            json: true,\n            timeout: 300000,\n        }).then((body) => {\n            logger.debug(node, \"latest End\");\n            logger.debug(node, JSON.stringify(body.with[0].content));\n            resolve(body.with[0].content);\n        }).catch((error) => {\n            logger.error(node, \"latest error\");\n            logger.error(node, error);\n            reject(error);\n        });\n    });\n};\n\nplatform.range = function(thing, from, to, maxNum) {\n    return new Promise((resolve, reject)=>{\n        logger.debug(node, \"range thing: \" + thing);\n        \n        const url = ckdPlatform.Url + \"range\" + \"?app=\" + ckdPlatform.App3 + \"&thing=\" + thing + \"&from=\" + from + \"&to=\" + to + \"&maxNum=\" + maxNum;\n        logger.debug(node, url);\n        request({\n            url: url,\n            method: \"GET\",\n            json: true,\n        }).then((body) => {\n            logger.debug(node, \"range End\");\n            logger.debug(node, JSON.stringify(body.with));\n            resolve(body.with);\n        }).catch((error) => {\n            logger.error(node, \"range error\");\n            logger.error(node, error);\n            reject(error);\n        });\n    });\n};\n\nplatform.queryDatetime = function(thing, from, to, maxNum, string, stringNum) {\n    return new Promise((resolve, reject)=>{\n        logger.debug(node, \"queryDatetime thing: \" + thing);\n        \n        const query = `select TOP ${maxNum} JSON_QUERY(Content,'$') AS Content from DThingData left join DThing on DThingData.ThingId = DThing.ThingId where DThing.ThingAlias = '${thing}' AND ISJSON(Content) > 0 AND CONVERT (Datetime, SUBSTRING(JSON_VALUE(Content, '$.${string}'), 1, ${stringNum})) >= CONVERT(Datetime, '${from}') AND CONVERT(Datetime, SUBSTRING(JSON_VALUE(Content, '$.${string}'), 1, ${stringNum})) < CONVERT(Datetime, '${to}') order by JSON_VALUE(Content, '$.${string}') desc;`;\n        logger.debug(node, query);\n        const url = ckdPlatform.Url + \"query\" + \"?app=\" + ckdPlatform.App3 + \"&querystring=\" + fixedEncodeURIComponent(query);\n        logger.debug(node, url);\n        request({\n            url: url,\n            method: \"GET\",\n            json: true,\n        }).then((body) => {\n            logger.debug(node, \"queryDatetime End\");\n            logger.debug(node, JSON.stringify(body.result));\n            resolve(body.result);\n        }).catch((error) => {\n            logger.error(node, \"queryDatetime error\");\n            logger.error(node, query);\n            logger.error(node, url);\n            logger.error(node, error);\n            reject(error);\n        });\n    });\n};\n\n/**\n * 配列内の日付項目に対して検索を行う\n * @param thing      検索条件:ThingID\n * @param from       検索条件:開始日付\n * @param to         検索条件:終了日付\n * @param maxNum     検索後の取得レコード数\n * @param targetName 検索対象の配列名\n * @param string     日付項目名\n * @param stringNum  日付文字列の利用桁数\n */\n\nplatform.queryDatetimeFromArray = function(thing, from, to, maxNum, targetName, string, stringNum) {\n    return new Promise((resolve, reject)=>{\n        logger.debug(node, \"queryDatetimeFromArray thing: \" + thing);\n        \n        const query1 = `select TOP ${maxNum} value AS Content from (select JSON_QUERY(Content, '$') AS Content from DThingData left join DThing  on DThingData.ThingId = DThing.ThingId where DThing.ThingAlias = '${thing}'  and ISJSON(Content) > 0) AS A`;\n        const query2 = ` cross apply openjson(Content,'$.${targetName}') where CONVERT(Datetime, SUBSTRING(JSON_VALUE(value, '$.${string}'), 1, ${stringNum})) >= CONVERT(Datetime, '${from}')  and CONVERT(Datetime, SUBSTRING(JSON_VALUE(value, '$.${string}'), 1, ${stringNum})) < CONVERT(Datetime, '${to}')`;\n        const query3 = ` order by JSON_VALUE(value, '$.${string}') desc;`;\n        const query = query1 + query2 + query3;\n        logger.debug(node, query);\n        const url = ckdPlatform.Url + \"query\" + \"?app=\" + ckdPlatform.App3 + \"&querystring=\" + fixedEncodeURIComponent(query);\n        logger.debug(node, url);\n        request({\n            url: url,\n            method: \"GET\",\n            json: true,\n        }).then((body) => {\n            logger.debug(node, \"queryDatetimeFromArray End\");\n            logger.debug(node, JSON.stringify(body.result));\n            resolve(body.result);\n        }).catch((error) => {\n            logger.error(node, \"queryDatetimeFromArray error\");\n            logger.error(node, query);\n            logger.error(node, url);\n            logger.error(node, error);\n            reject(error);\n        });\n    });\n};\n\n/**\n * 日付と、配列内の項目に対して検索を行う\n * @param thing          検索条件:ThingID\n * @param from           検索条件:開始日付\n * @param to             検索条件:終了日付\n * @parma maxNum         検索後の取得レコード数\n * @param string         日付項目名\n * @param stringNum      日付文字列の利用桁数\n * @param targetName1    検索対象の配列名1\n * @param targetName2    検索対象の配列名2\n * @param targetString   検索する配列内の項目名\n * @param targetOperator 検索する配列内の項目の比較演算子\n * @param targetValue    検索する値\n */\n\nplatform.queryDatetimeAndConditionFromArray = function(thing, from, to, maxNum, string, stringNum, \n    targetName1, targetName2, targetString=\"\", targetOperator=\"\", targetValue=\"\") {\n    return new Promise((resolve, reject)=>{\n        logger.debug(node, \"queryDatetimeAndConditionFromArray thing: \" + thing);\n        \n        const query1 = `select TOP ${maxNum} Content from (select DISTINCT Content from (select JSON_QUERY(Content,'$') AS Content from DThingData left join DThing on DThingData.ThingId = DThing.ThingId where DThing.ThingAlias = '${thing}' AND ISJSON(Content) > 0 AND CONVERT (Datetime, SUBSTRING(JSON_VALUE(Content, '$.${string}'), 1, ${stringNum})) >= CONVERT(Datetime, '${from}') AND CONVERT(Datetime, SUBSTRING(JSON_VALUE(Content, '$.${string}'), 1, ${stringNum})) < CONVERT(Datetime, '${to}')) AS A`;\n        const query2 = ` outer apply openjson(Content,'$.${targetName1}') AS B outer apply openjson(Content,'$.${targetName2}') AS C`;\n        const query3 = ` where JSON_VALUE(B.value, '$.${targetString}') ${targetOperator} '${targetValue}' or JSON_VALUE(C.value, '$.${targetString}') ${targetOperator} '${targetValue}'`;\n        const query4 = `) AA order by JSON_VALUE(Content, '$.${string}') desc;`;\n        const query = targetString && targetOperator &&targetValue ? \n            query1 + query2 + query3 + query4 :\n            query1 + query2 + query4;\n            \n        logger.debug(node, query);\n        const url = ckdPlatform.Url + \"query\" + \"?app=\" + ckdPlatform.App3 + \"&querystring=\" + fixedEncodeURIComponent(query);\n        logger.debug(node, url);\n        request({\n            url: url,\n            method: \"GET\",\n            json: true,\n        }).then((body) => {\n            logger.debug(node, \"queryDatetimeAndConditionFromArray End\");\n            logger.debug(node, JSON.stringify(body.result));\n            resolve(body.result);\n        }).catch((error) => {\n            logger.error(node, \"queryDatetimeAndConditionFromArray error\");\n            logger.error(node, query);\n            logger.error(node, url);\n            logger.error(node, error);\n            reject(error);\n        });\n    });\n};\n\nplatform.record = function(thing, content) {\n    return new Promise((resolve, reject)=>{\n        logger.debug(node, \"record thing:\" + thing);\n        logger.debug(node, \"content:\" + JSON.stringify(content));\n        const url = ckdPlatform.Url + \"record\" + \"?app=\" + ckdPlatform.App3;\n        logger.debug(node, url);\n        request({\n            url: url,\n            method: \"POST\",\n            json: true,\n            body: {\n                thing: thing,\n                user: \"Datasource\",\n                content: content,\n            },\n        }).then((body) => {\n            logger.debug(node, \"record End\");\n            logger.debug(node, JSON.stringify(body));\n            resolve();\n        }).catch((error) => {\n            logger.error(node, \"record error\");\n            logger.error(node, error);\n            reject(error);\n        });\n    });\n};\n/**\n * @param {string} str \n * @return {string}\n */\nfunction fixedEncodeURIComponent(str) {\n    return replace_all(encodeURIComponent(str).replace(/[!'()*]/g, function(c) {\n        return \"%\" + c.charCodeAt(0).toString(16);\n    }), \"%20\", \"+\");\n}\n/**\n * @param {string} string \n * @param {string} target \n * @param {string} replacement \n * @return {string}\n */\nfunction replace_all(string, target, replacement) {\n    let result = \"\";\n    let offset = 0;\n    const target_length = target.length;\n    if (target_length === 0) {\n        for (let i = 0, c = string.length; i < c; i++) {\n            result += string[i];\n            result += replacement;\n        }\n        if (result.length) {\n            return result.substr(0, result.length - replacement.length);\n        }\n        return result;\n    }\n    do {\n        const i = string.indexOf(target, offset);\n        if (i === -1) {\n            result += string.substring(offset);\n            return result;\n        }\n        result += string.substring(offset, i);\n        result += replacement;\n        offset = i + target_length;\n    } while (true);\n}\n\nglobal.set(\"platform\", platform);\n\nconst date = {};\n\ndate.getMonthFromToStringJST = function() {\n    const moment = global.get(\"moment\");\n    const from = moment.utc(moment.utc().add(9, \"hours\").format(\"YYYYMM\") + \"01000000\", \"YYYYMMDDHHmmss\");\n    const to = moment.utc(from).add(1, \"month\");\n    return {from: from.toISOString(), to: to.toISOString()};\n};\n\ndate.getTodayFromToStringJST = function() {\n    const moment = global.get(\"moment\");\n    const from = moment.utc(moment.utc().add(9, \"hours\").format(\"YYYYMMDD\") + \"000000\", \"YYYYMMDDHHmmss\");\n    const to = moment.utc(from).add(1, \"days\");\n    return {from: from.toISOString(), to: to.toISOString()};\n};\n\ndate.getMonthFromToString = function() {\n    const moment = global.get(\"moment\");\n    const from = moment.utc(moment.utc().add(9, \"hours\").format(\"YYYYMM\") + \"01000000\", \"YYYYMMDDHHmmss\").add(-9, \"hours\");\n    const to = moment.utc(from).add(1, \"month\");\n    return {from: from.toISOString(), to: to.toISOString()};\n};\n\ndate.getTodayFromToString = function() {\n    const moment = global.get(\"moment\");\n    const from = moment.utc(moment.utc().add(9, \"hours\").format(\"YYYYMMDD\") + \"000000\", \"YYYYMMDDHHmmss\").add(-9, \"hours\");\n    const to = moment.utc(from).add(1, \"days\");\n    return {from: from.toISOString(), to: to.toISOString()};\n};\n\nglobal.set(\"date\", date);\n\nconst PostThingObj = {};\nPostThingObj.get = function(id, key) {\n    const postThings = global.get(\"PostThings\");\n    return postThings[key].replace(\"ID\", id);\n};\nglobal.set(\"PostThingObj\", PostThingObj);\n\nreturn msg;\n","outputs":1,"noerr":0,"x":700,"y":80,"wires":[[]]},{"id":"d85135f0.57f3a8","type":"comment","z":"dee5dc2.0abc72","name":"Node-RED起動時","info":"","x":80,"y":20,"wires":[]},{"id":"7006f8be.c4f008","type":"http in","z":"dee5dc2.0abc72","name":"現在サーバ時刻取得","url":"/unixtime","method":"get","upload":false,"swaggerDoc":"","x":90,"y":600,"wires":[["5e5a81ec.bbd6a"]]},{"id":"5e5a81ec.bbd6a","type":"function","z":"dee5dc2.0abc72","name":"現在時刻(UNIX時間)","func":"msg.payload = {Time: new Date().getTime()};\nreturn msg;\n","outputs":1,"noerr":0,"x":310,"y":600,"wires":[["fd9e07a7.873588"]]},{"id":"fd9e07a7.873588","type":"http response","z":"dee5dc2.0abc72","name":"","statusCode":"","headers":{"Access-Control-Allow-Origin":"*"},"x":470,"y":600,"wires":[]},{"id":"6c4cc39f.a3db4c","type":"comment","z":"dee5dc2.0abc72","name":"API","info":"","x":50,"y":520,"wires":[]},{"id":"77b21bcd.497be4","type":"http in","z":"dee5dc2.0abc72","name":"現在サーバ時刻取得","url":"/time","method":"get","upload":false,"swaggerDoc":"","x":90,"y":660,"wires":[["d2b37992.c8a4c8"]]},{"id":"d2b37992.c8a4c8","type":"function","z":"dee5dc2.0abc72","name":"現在時刻","func":"const moment = global.get(\"moment\");\nmsg.payload = {Time: moment.utc().add(9, \"hours\").format(\"YYYY-MM-DD HH:mm\")};\nreturn msg;\n","outputs":1,"noerr":0,"x":280,"y":660,"wires":[["96221e66.b03af"]]},{"id":"96221e66.b03af","type":"http response","z":"dee5dc2.0abc72","name":"","statusCode":"","headers":{"Access-Control-Allow-Origin":"*"},"x":410,"y":660,"wires":[]},{"id":"1cf7b4e9.05b42b","type":"inject","z":"8e70d73f.ce8c58","name":"生産進捗作成","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":"3","x":130,"y":340,"wires":[["f1dd1755.0955b8"]]},{"id":"4b70e962.d6d4b8","type":"inject","z":"8e70d73f.ce8c58","name":"Node-RED起動時","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":true,"onceDelay":0.1,"x":130,"y":100,"wires":[["2b1aea8.424d516"]]},{"id":"f1dd1755.0955b8","type":"function","z":"8e70d73f.ce8c58","name":"データ取得","func":"// アプリコンフィグをグローバル変数から取得\nconst applicationConfig = global.get(\"ApplicationConfig\"); const logger = global.get(\"logger\");\n\nlogger.info(node, node.name);\nconst platform = global.get(\"platform\");\n\nconst config = flow.get(\"Config\");\nconst ckdPlatform = applicationConfig.CkdPlatform;\n// 2020.10.08(CKD):PLC生産数(D4)からDataServiceが算出している最終工程の生産数に変更\nconst machines = global.get(\"Machines\").List;\n\nplatform.latest(config.things.Settings, ckdPlatform.App2).then((settings) => {\n    // 2020.10.08(CKD):PLC生産数(D4)からDataServiceが算出している最終工程の生産数に変更\n    platform.latest(machines[machines.length-1].Things.ProductionNow, ckdPlatform.App3).then((productData) => {\n        const content = {};\n        content.TargetProductionNumber = settings.PrmProductionPlanNum;\n        content.ActualProductionNumber = productData.ProductionDataAchievementTotalOfTheDay.ProductionResults;\n        content.ProgressRate = calcProgressRate(content.TargetProductionNumber, content.ActualProductionNumber);\n        content.Progress = calcProgress(content.TargetProductionNumber, content.ActualProductionNumber, settings.PrmShiftNum, settings.PrmShiftTime);\n        msg.payload = content;\n        node.send(msg);\n    }).catch((error)=> {\n        msg.statusCode = 500;\n        msg.payload = {\"result\": \"NG\", \"message\": \"can not get data from platform\"};\n        node.send(msg);\n    });\n}).catch((error)=> {\n    msg.statusCode = 500;\n    msg.payload = {\"result\": \"NG\", \"message\": \"can not get data from platform\"};\n    node.send(msg);\n});\n\nreturn;\n/**\n * ログメッセージを組み立てる\n * @param {string} targetNum \n * @param {string} actualNum \n * @return {string}\n */\nfunction calcProgressRate(targetNum, actualNum) {\n    const progressRate = actualNum / targetNum;\n    return orgRound(progressRate * 100, 2);\n}\n\n// 進捗状況＝生産実績÷（生産計画×（生産予定時間−（現在時刻−１直開始時間）））\n// 生産予定時間[S]=直数が1の場合 8*3600   直数が2の場合 17*3600    直数が3の場合 24*3600 \n// 1直開始時間は「設定画面」の値を使用。\n/**\n * targetNum: number\n * actualNum: number\n * shiftNum: number\n * startTime: string(\"8:30\")\n*/\n/**\n * @param {string} targetNum \n * @param {string} actualNum \n * @param {string} shiftNum \n * @param {string} startTime \n * @return {string}\n */\nfunction calcProgress(targetNum, actualNum, shiftNum, startTime) {\n    const moment = global.get(\"moment\");\n    const nowDate = moment.utc().add(9, \"Hours\");\n    const openDateString = moment().format(\"YYYYMMDD\") + startTime + \":00\";\n    const openDate = moment(openDateString, \"YYYYMMDDHH:mm:ss\");\n    \n    logger.debug(node, \"now:\" + nowDate.format(\"YYYYMMDD HH:mm:ss\"));\n    logger.debug(node, \"openDate:\" + openDate.format(\"YYYYMMDD HH:mm:ss\"));\n    logger.debug(node, \"targetNum,actualNum,shiftNum: \" + targetNum + \",\" + actualNum + \",\" + shiftNum);\n    logger.debug(node, \"deff:\" + nowDate.diff(openDate, \"seconds\"));\n    \n    let targetTime = 0;\n    \n    if (1 == shiftNum) {\n        targetTime = 8 * 3600;\n    } else if (2 == shiftNum) {\n        targetTime = 17 * 3600;\n    } else if (3 == shiftNum) {\n        targetTime = 24 * 3600;\n    }\n    \n    // 進捗状況＝   実生産数  / 経過時点での生産予定数(生産計画個/生産予定時間[S])*1直開始時間からの経過時間[S])\n    const progress = actualNum / ((targetNum / targetTime) * nowDate.diff(openDate, \"seconds\"));\n    // 小数点２桁のパーセントで返す\n    return orgRound(progress * 100, 2);\n}\n\n/**\n * 任意の桁で四捨五入する関数\n * @param {number} value 四捨五入する数値\n * @param {number} base どの桁で四捨五入するか（10→10の位、0.1→小数第１位）\n * @return {number} 四捨五入した値\n */\nfunction orgRound(value, base) {\n    logger.debug(node, value);\n    logger.debug(node, Number.parseFloat(value).toFixed(base));\n    return Number.parseFloat(value).toFixed(base);\n}\n","outputs":1,"noerr":0,"x":350,"y":340,"wires":[["96c2bbc8.9718a8"]]},{"id":"ee69f21e.db55","type":"comment","z":"8e70d73f.ce8c58","name":"データ作成","info":"","x":60,"y":300,"wires":[]},{"id":"193eb80d.fb6688","type":"inject","z":"8e70d73f.ce8c58","name":"生産サマリー作成","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":"3","x":150,"y":440,"wires":[["859404e6.00d6a8"]]},{"id":"859404e6.00d6a8","type":"function","z":"8e70d73f.ce8c58","name":"データ取得machines","func":"// アプリコンフィグをグローバル変数から取得\nconst applicationConfig = global.get(\"ApplicationConfig\"); const logger = global.get(\"logger\");\nlogger.info(node, node.name);\nconst platform = global.get(\"platform\");\nconst machines = global.get(\"Machines\").List;\nconst state = global.get(\"MachineState\");\n\nconst ckdPlatform = applicationConfig.CkdPlatform;\n\nconst promises = [];\nconst content = {};\ncontent.List = [];\nmachines.forEach((machine) => {\n    if (\"00\" === machine.Id) {\n        return;\n    }\n    promises.push(getMachineData(machine));\n});\nPromise.all(promises).then(()=>{\n    content.List.sort(function(a, b) {\n        return parseInt(a.MachineId) > parseInt(b.MachineId)? 1: -1;\n    });\n    msg.payload = content;\n    node.send(msg);\n}).catch((error)=> {\n    msg.statusCode = 500;\n    msg.payload = {\"result\": \"NG\", \"message\": \"can not get data from platform\"};\n    node.send(msg);\n});\n\nreturn;\n\n/**\n * ログメッセージを組み立てる\n * @param {string} machine \n * @return {string}\n */\nfunction getMachineData(machine) {\n    return new Promise((resolve, reject)=>{\n        logger.debug(node, \"getMachineData: \" + machine.Name);\n        platform.latest(machine.Things.ProductionNow, ckdPlatform.App3).then((production)=>{\n            platform.latest(machine.Things.MachineStatus, ckdPlatform.App3).then((status)=>{\n                content.List.push({\n                    MachineId: machine.Id,\n                    MachineName: machine.Name,\n                    ActualProductionNumber: production.ProductionDataAchievementTotalOfTheDay.ProductionResults,\n                    // MachineStatus: state[status.MachineState.New.State],\n                    MachineStatus: state[status.MachineState.New.State].name,\n                    MachineStatusNo: status.MachineState.New.State,\n                });\n                resolve();\n            }).catch((error) => {\n                logger.error(node, \"failed to get MachineStatus\");\n                reject(error);\n            });\n        }).catch((error) => {\n            logger.error(node, \"failed to get ProductionNow\");\n            reject(error);\n        });\n    });\n}\n","outputs":1,"noerr":0,"x":380,"y":440,"wires":[["2bd56447.ed77bc"]]},{"id":"f3c772de.e7391","type":"comment","z":"8e70d73f.ce8c58","name":"Node-RED起動時","info":"","x":80,"y":20,"wires":[]},{"id":"81131dee.ff8e6","type":"http in","z":"8e70d73f.ce8c58","name":"","url":"/andon/progress","method":"get","upload":false,"swaggerDoc":"","x":140,"y":380,"wires":[["f1dd1755.0955b8"]]},{"id":"96c2bbc8.9718a8","type":"http response","z":"8e70d73f.ce8c58","name":"","statusCode":"","headers":{"Access-Control-Allow-Origin":"*"},"x":550,"y":340,"wires":[]},{"id":"9e9b7d12.f7067","type":"http in","z":"8e70d73f.ce8c58","name":"","url":"/andon/summary","method":"get","upload":false,"swaggerDoc":"","x":140,"y":500,"wires":[["859404e6.00d6a8"]]},{"id":"2bd56447.ed77bc","type":"http response","z":"8e70d73f.ce8c58","name":"","statusCode":"","headers":{"Access-Control-Allow-Origin":"*"},"x":550,"y":440,"wires":[]},{"id":"ddf9545b.dd04d8","type":"inject","z":"444211fa.db8a7","name":"Node-RED起動時","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":true,"onceDelay":0.1,"x":170,"y":100,"wires":[["986a1ed0.09c27"]]},{"id":"624a0a83.829694","type":"inject","z":"444211fa.db8a7","name":"定期実行","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":"3","x":100,"y":400,"wires":[["4c192ba1.d88774"]]},{"id":"4c192ba1.d88774","type":"function","z":"444211fa.db8a7","name":"設備状態","func":"const applicationConfig = global.get(\"ApplicationConfig\");\nconst logger = global.get(\"logger\");\nlogger.info(node, node.name);\nconst platform = global.get(\"platform\");\nconst config = flow.get(\"Config\");\nlogger.debug(node, JSON.stringify(config));\n\n\nconst ckdPlatform = applicationConfig.CkdPlatform;\nconst promises = [];\nconst content = {};\ncontent.List = [];\nconfig.Machines.forEach((machine) => {\n    promises.push(getMachineData(machine));\n});\nPromise.all(promises).then(()=>{\n    content.List.sort(function(a, b) {\n        return a.Id > b.Id? 1: -1;\n    });\n    msg.payload = content;\n    node.send(msg);\n}).catch((error)=> {\n    msg.statusCode = 500;\n    msg.payload = {\"result\": \"NG\", \"message\": \"can not get data from platform\"};\n    node.send(msg);\n});\nreturn;\n\n/**\n * データ作成\n * @param {string} machine\n * @return {string}\n */\nfunction getMachineData(machine) {\n    return new Promise((resolve, reject)=>{\n        logger.debug(node, \"getMachineData: \" + machine.Id);\n        logger.debug(node, \"getMachineData: \" + machine.Name);\n        platform.latest(machine.StatusThing, ckdPlatform.App3).then((status)=>{\n            content.List.push({\n                Id: machine.Id,\n                MachineName: machine.Name,\n                MachineStatus: status.MachineState.New.State,\n            });\n            resolve();\n        }).catch((error) => {\n            reject(Error);\n        });\n    });\n}\n","outputs":1,"noerr":0,"x":280,"y":400,"wires":[["7b21556.a9507ac"]]},{"id":"b151353e.52b508","type":"inject","z":"444211fa.db8a7","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":100,"y":500,"wires":[["f6135016.c04cb"]]},{"id":"f6135016.c04cb","type":"function","z":"444211fa.db8a7","name":"稼働状況","func":"const applicationConfig = global.get(\"ApplicationConfig\");\nconst logger = global.get(\"logger\");\nlogger.info(node, node.name);\nconst platform = global.get(\"platform\");\nconst config = flow.get(\"Config\");\nconst machineState = global.get(\"MachineState\");\n\nconst ckdPlatform = applicationConfig.CkdPlatform;\nconst content = {};\ncontent.List = [];\n\nplatform.latest(config.Things.ProductionDayThing, ckdPlatform.App3).then((data)=>{\n    const times = data.ProductionDataAchievementTotalOfTheDay.CumulativeTime;\n    let sum = 0;\n    Object.keys(times).forEach((key)=>{\n        sum += times[key];\n    });\n    Object.keys(machineState).forEach((id)=>{\n        const key = machineState[id].key;\n        const obj = {};\n        obj.MachineStatus = key;\n        if (times[key]) {\n            obj.Rate = times[key] / sum * 100;\n        } else {\n            obj.Rate = 0;\n        }\n        content.List.push(obj);\n    });   \n    msg.payload = content;\n    \n    node.send(msg);\n}).catch((error)=> {\n    msg.statusCode = 500;\n    msg.payload = {\"result\": \"NG\", \"message\": \"can not get data from platform\"};\n    node.send(msg);\n});\n\nreturn;\n","outputs":1,"noerr":0,"x":280,"y":500,"wires":[["d2274935.301278"]]},{"id":"dcb3296.051d0d8","type":"inject","z":"444211fa.db8a7","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"00 00 * * *","once":false,"onceDelay":0.1,"x":110,"y":880,"wires":[["efa16629.035118"]]},{"id":"efa16629.035118","type":"function","z":"444211fa.db8a7","name":"生産数推移","func":"const logger = global.get(\"logger\");\nlogger.info(node, node.name);\nconst platform = global.get(\"platform\");\nconst config = flow.get(\"Config\");\nconst maxnum = 31;\n\nconst content = {};\ncontent.List = [];\n\nconst dateObj = global.get(\"date\").getMonthFromToStringJST();\nplatform.queryDatetime(config.Things.ProductionDataAchievementFor1Day, dateObj.from, dateObj.to, maxnum, \"ProductionDataAchievementFor1Day.TimeFrame\", 10).then((list)=>{\n    // 日付でソート\n    list.sort(function(a, b) {\n        if (!a.ProductionDataAchievementFor1Day || !b.ProductionDataAchievementFor1Day) return 0;\n        const timea = a.ProductionDataAchievementFor1Day.TimeFrame;\n        const timeb = b.ProductionDataAchievementFor1Day.TimeFrame;\n        if ( timea < timeb ) return -1;\n        if ( timea > timeb ) return 1;\n        return 0;\n    });\n    let total = 0;\n    list.forEach((data)=>{\n        const obj = {};\n        obj.Date = data.ProductionDataAchievementFor1Day.TimeFrame;\n        obj.Value = data.ProductionDataAchievementFor1Day.ProductionResults;\n        total += obj.Value;\n        obj.Total = total;\n        content.List.push(obj);\n    });\n    logger.debug(node, JSON.stringify(content));\n    platform.record(config.PostThings.ProductionGraph, content).then(()=>{\n        node.send(msg);\n    });\n});\n\nreturn;\n","outputs":1,"noerr":0,"x":290,"y":880,"wires":[[]]},{"id":"88ad28d6.056d98","type":"inject","z":"444211fa.db8a7","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":100,"y":600,"wires":[["7a9e3a3b.a9f084"]]},{"id":"7a9e3a3b.a9f084","type":"function","z":"444211fa.db8a7","name":"ライン情報まとめ","func":"const applicationConfig = global.get(\"ApplicationConfig\");\nconst logger = global.get(\"logger\");\nlogger.info(node, node.name);\nconst platform = global.get(\"platform\");\n\nconst config = flow.get(\"Config\");\n\n// 2020.10.08(CKD):PLC生産数(D4)からDataServiceが算出している最終工程の生産数に変更\nconst machines = global.get(\"Machines\").List;\n\nconst ckdPlatform = applicationConfig.CkdPlatform;\nconst content = {};\n\nplatform.latest(config.Things.Settings, ckdPlatform.App2).then((settings)=>{\n    platform.latest(config.Things.ProductionDayThing, ckdPlatform.App3).then((production)=>{\n        // 2020.10.08(CKD):PLC生産数(D4)からDataServiceが算出している最終工程の生産数に変更\n        platform.latest(machines[machines.length-1].Things.ProductionNow, ckdPlatform.App3).then((productionDataOfLast) => {\n            const productionPlan = settings.PrmProductionPlanNum;\n            // 2020.10.08(CKD):PLC生産数(D4)からDataServiceが算出している最終工程の生産数に変更\n            const productionResult = productionDataOfLast.ProductionDataAchievementTotalOfTheDay.ProductionResults;\n            //const productionResult = production.ProductionDataAchievementTotalOfTheDay.ProductionResults;\n            const planTime = settings.PrmProductionTakttime;\n            const productionTime = production.ProductionDataAchievementTotalOfTheDay.CumulativeTime.Automatic;\n            \n            content.TargetProductionNumber = productionPlan;\n            content.ActualProductionNumber = productionResult;\n            \n            const estimatedTime = estimatedCompletionTime(productionPlan, productionResult, productionTime);\n            logger.debug(estimatedTime, node);\n            const hour = Math.floor(estimatedTime / 60 / 60);\n            const minute = Math.floor((estimatedTime - hour * 60 * 60) / 60);\n            // 生産実績が0の時の処理\n            if (content.ActualProductionNumber == 0) {\n                content.ProductCompletionTime = \"-\";\n            } else {\n                content.ProductCompletionTime = hour + \"時間\" + minute + \"分\";\n            }\n            const moment = global.get(\"moment\");\n            const now = moment.utc();\n            completionTime = now.add(estimatedTime, \"seconds\").add(9, \"hours\");\n            if (content.ActualProductionNumber == 0) {\n                content.ProductEstimatedCompletionTime = \"-\";\n            } else {\n                content.ProductEstimatedCompletionTime = completionTime.format(\"YYYY/MM/DD HH:mm\");\n            }\n            content.CapacityUtilizationRate = capacityUtilizationRate(productionResult, planTime, productionTime);\n            msg.payload = content;\n            node.send(msg);\n        // 2020.10.08(CKD):PLC生産数(D4)からDataServiceが算出している最終工程の生産数に変更\n        }).catch((error)=> {\n            msg.statusCode = 500;\n            msg.payload = {\"result\": \"NG\", \"message\": \"can not get data from platform\"};\n            node.send(msg);\n        });\n    }).catch((error)=> {\n        msg.statusCode = 500;\n        msg.payload = {\"result\": \"NG\", \"message\": \"can not get data from platform\"};\n        node.send(msg);\n    });\n}).catch((error)=> {\n    msg.statusCode = 500;\n    msg.payload = {\"result\": \"NG\", \"message\": \"can not get data from platform\"};\n    node.send(msg);\n});\n\nreturn;\n\n// 残り時間をsecで返す\n/**\n * 生産完了時間作成\n * @param {int} productionPlan \n * @param {int} productionResult \n * @param {int} productionTime \n * @return {int}\n */\nfunction estimatedCompletionTime(productionPlan, productionResult, productionTime) {\n    const time = ( (productionPlan - productionResult) * (productionTime / productionResult) );\n    return time < 0? 0: time;\n}\n\n// 稼働率\n/**\n * 稼働率作成\n * @param {int} productionResult \n * @param {int} planTime \n * @param {int} productionTime \n * @return {int}\n */\nfunction capacityUtilizationRate(productionResult, planTime, productionTime) {\n    logger.debug(node, \"productionResult: \" + productionResult);\n    logger.debug(node, \"planTime: \" + planTime);\n    logger.debug(node, \"productionTime: \" + productionTime);\n    if (productionTime == 0 || planTime == 0) {\n        return \"-\";\n    } else {\n        let rate = productionResult / (productionTime / planTime) * 100;\n        rate = orgRound(rate, 0);\n        return rate > 100? 100: rate;\n    }\n}\n\n\n/**\n * 任意の桁で四捨五入する関数\n * @param {number} value 四捨五入する数値\n * @param {number} base どの桁で四捨五入するか（10→10の位、0.1→小数第１位）\n * @return {number} 四捨五入した値\n */\nfunction orgRound(value, base) {\n    logger.debug(node, value);\n    logger.debug(node, Number.parseFloat(value).toFixed(base));\n    return Number.parseFloat(value).toFixed(base);\n}\n","outputs":1,"noerr":0,"x":310,"y":600,"wires":[["816ddd6e.6568d"]]},{"id":"902c1cc4.aec23","type":"comment","z":"444211fa.db8a7","name":"Node-RED起動時","info":"","x":80,"y":20,"wires":[]},{"id":"871cc0db.d609f","type":"comment","z":"444211fa.db8a7","name":"API","info":"","x":50,"y":340,"wires":[]},{"id":"2a76027b.6335ae","type":"http in","z":"444211fa.db8a7","name":"","url":"/line/status","method":"get","upload":false,"swaggerDoc":"","x":100,"y":440,"wires":[["4c192ba1.d88774"]]},{"id":"7b21556.a9507ac","type":"http response","z":"444211fa.db8a7","name":"","statusCode":"","headers":{"Access-Control-Allow-Origin":"*"},"x":510,"y":400,"wires":[]},{"id":"4f1464c6.51b5ac","type":"http in","z":"444211fa.db8a7","name":"","url":"/line/percent","method":"get","upload":false,"swaggerDoc":"","x":100,"y":560,"wires":[["f6135016.c04cb"]]},{"id":"d2274935.301278","type":"http response","z":"444211fa.db8a7","name":"","statusCode":"","headers":{"Access-Control-Allow-Origin":"*"},"x":510,"y":500,"wires":[]},{"id":"e5b9e4f1.2f5568","type":"http in","z":"444211fa.db8a7","name":"","url":"/line/summary","method":"get","upload":false,"swaggerDoc":"","x":110,"y":660,"wires":[["7a9e3a3b.a9f084"]]},{"id":"816ddd6e.6568d","type":"http response","z":"444211fa.db8a7","name":"","statusCode":"","headers":{"Access-Control-Allow-Origin":"*"},"x":510,"y":600,"wires":[]},{"id":"f551e923.1673f8","type":"comment","z":"444211fa.db8a7","name":"定期実行","info":"","x":60,"y":840,"wires":[]},{"id":"24bd70b0.c78f6","type":"inject","z":"710f7aed.d2ab74","name":"初期設定","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":true,"onceDelay":0.1,"x":100,"y":80,"wires":[["1e761936.e7bff7"]]},{"id":"5aa2c3bd.6381cc","type":"inject","z":"710f7aed.d2ab74","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":100,"y":320,"wires":[["6a433721.d892a8"]]},{"id":"6a433721.d892a8","type":"function","z":"710f7aed.d2ab74","name":"ガントチャート","func":"const logger = global.get(\"logger\");\nlogger.info(node, node.name);\nconst platform = global.get(\"platform\");\nconst machineStates = global.get(\"MachineState\");\nconst machines = global.get(\"Machines\").List;\nconst params = msg.req.query;\nconst target = params.target;\nconst maxnum = 100000;\nmachines.forEach((machine) => {\n    if (parseInt(target) == parseInt(machine.Id)) {\n        makeGanttChartData(machine);\n    }\n});\nreturn;\n/**\n * ガントチャートデータ作成\n * @param {string} machine \n */\nfunction makeGanttChartData(machine) {\n    const content = {};\n    content.GanttChart = [];\n    const stateList = [];\n    // 当日分のデータ取得\n    const dateObj = global.get(\"date\").getTodayFromToStringJST();\n    platform.queryDatetime(machine.Things.MachineStatus, dateObj.from, dateObj.to, maxnum, \"MachineState.Old.End\", 19).then((list)=>{\n        list.sort((a, b)=>{\n            const timea = a.MachineState.Old.Start;\n            const timeb = b.MachineState.Old.Start;\n            if ( timea < timeb ) return -1;\n            if ( timea > timeb ) return 1;\n            return 0;\n        });\n        list.forEach((item)=>{\n            const obj = {};\n            obj.Desc = machineStates[item.MachineState.Old.State];\n            obj.Start = item.MachineState.Old.Start;\n            obj.End = item.MachineState.Old.End;\n            obj.Value = item.MachineState.Old.State;\n            stateList.push(obj);\n        });\n        if (list.length > 0) {\n            // 最後のデータはNewも入れる\n            const moment = global.get(\"moment\");\n            const obj = {};\n            const last = list[list.length-1];\n            obj.Start = last.MachineState.New.Start;\n            obj.End = moment.utc().add(9, \"hours\").format(\"YYYY-MM-DD HH:mm:ss.000000 +09:00\");\n            obj.Value = last.MachineState.New.State;\n            obj.Desc = machineStates[last.MachineState.New.State];\n            stateList.push(obj);\n        }\n        content.GanttChart.push({Name: machine.Name, List: stateList});\n        \n        logger.debug(node, content);\n        msg.payload = content;\n        node.send(msg);\n    }).catch((error)=> {\n        logger.error(node, error);\n        msg.statusCode = 500;\n        msg.payload = {\"result\": \"NG\", \"message\": \"can not get data from platform\"};\n        node.send(msg);\n    });\n}\n\n","outputs":1,"noerr":0,"x":420,"y":320,"wires":[["2b4e6357.fce80c"]]},{"id":"95980f4b.5e2f6","type":"inject","z":"710f7aed.d2ab74","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":100,"y":420,"wires":[["116627de.695ac8"]]},{"id":"116627de.695ac8","type":"function","z":"710f7aed.d2ab74","name":"生産実績履歴","func":"const logger = global.get(\"logger\");\nlogger.info(node, node.name);\nconst platform = global.get(\"platform\");\nconst machines = global.get(\"Machines\").List;\nconst params = msg.req.query;\nconst target = params.target;\n\nmachines.forEach((machine) => {\n    if (parseInt(target) == parseInt(machine.Id)) {\n        makeData(machine);\n    }\n});\nreturn;\n/**\n * データ作成\n * @param {string} machine \n */\nfunction makeData(machine) {\n    const content = {};\n    content.List = [];\n    \n    // 当日分のデータ取得\n    const dateObj = global.get(\"date\").getTodayFromToString();\n    \n    let id = 0;\n    const maxNum = flow.get(\"Config\").productMaxNum;\n     \n    platform.queryDatetime(machine.Things.ProductionEndHistory, dateObj.from, dateObj.to, /*maxNum*/100, \"ProductionEndHistory.Time\", 19).then((list)=>{\n        list.forEach((item)=>{\n            const obj = {};\n            obj.Id = id++;\n            obj.DrawNumber = item.ProductionEndHistory.Numbers.DrawNumberInfo.DrawNumber;\n            obj.DefectiveProduct = item.ProductionEndHistory.Numbers.DrawNumberInfo.AbnormalCount;\n            obj.GoodProduct = item.ProductionEndHistory.Numbers.DrawNumberInfo.NormalCount;\n            content.List.push(obj);\n        });\n        \n        logger.debug(node, content);\n        msg.payload = content;\n        node.send(msg);\n    }).catch((error)=> {\n        logger.error(node, error);\n        msg.statusCode = 500;\n        msg.payload = {\"result\": \"NG\", \"message\": \"can not get data from platform\"};\n        node.send(msg);\n    });\n}\n\n","outputs":1,"noerr":0,"x":400,"y":420,"wires":[["a0bab069.ad3af"]]},{"id":"f257d6ed.612028","type":"inject","z":"710f7aed.d2ab74","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":100,"y":520,"wires":[["77860329.f7816c"]]},{"id":"77860329.f7816c","type":"function","z":"710f7aed.d2ab74","name":"異常履歴","func":"const logger = global.get(\"logger\");\nlogger.info(node, node.name);\nconst platform = global.get(\"platform\");\nconst machines = global.get(\"Machines\").List;\nconst abnormals = global.get(\"Abnormals\").List;\n\nconst params = msg.req.query;\nconst target = params.target;\n\nmachines.forEach((machine) => {\n    if (parseInt(target) == parseInt(machine.Id)) {\n        makeData(machine);\n    }\n});\nreturn;\n/**\n * データ作成\n * @param {string} machine \n */\nfunction makeData(machine) {\n    const content = {};\n    content.List = [];\n    \n    // 当日分のデータ取得\n    const dateObj = global.get(\"date\").getTodayFromToStringJST();\n    \n    let id = 0;\n    const maxNum = flow.get(\"Config\").qualityMaxNum;\n    \n    platform.queryDatetime(machine.Things.AbnormalHistory, dateObj.from, dateObj.to, /*maxNum*/100, \"AbnormalHistory.New[0].Time\", 19).then((list)=>{\n        logger.debug(node, JSON.stringify(list));\n        list.forEach((item)=>{\n            item.AbnormalHistory.New.forEach((abnormal)=>{\n                const obj = {};\n                const abnormalInfo = getAbnormal(machine.Id, abnormal.Code);\n                if (!abnormalInfo) {\n                    return;\n                }\n                obj.Id = id++;\n                obj.Time = abnormal.Time;\n                obj.DrawNumber = abnormal.DrawNumber;\n                if (abnormal.OrderNumber !== \"\") {\n                    obj.OrderNumber = abnormal.OrderNumber;\n                } else {\n                    obj.OrderNumber = \"-\";\n                }\n                obj.Type = abnormalInfo.Type;\n                obj.Trouble = abnormalInfo.AbnormalMessage;\n                content.List.push(obj);\n            });\n        });\n        logger.debug(node, JSON.stringify(content));\n        content.List.sort(function(a, b) {\n            if (a.Time < b.Time) return 1;\n            if (a.Time > b.Time) return -1;\n            // 降順\n            return 0;\n        });\n        msg.payload = content;\n        node.send(msg);\n    }).catch((error)=> {\n        logger.error(node, error);\n        msg.statusCode = 500;\n        msg.payload = {\"result\": \"NG\", \"message\": \"can not get data from platform\"};\n        node.send(msg);\n    });\n}\n/**\n * @param {string} machineId \n * @param {string} code \n * @return {string}\n */\nfunction getAbnormal(machineId, code) {\n    let info = undefined;\n    abnormals.forEach((abnormal)=>{\n        if (abnormal.MachineId == parseInt(machineId) && abnormal.No == parseInt(code)) {\n            info = abnormal;\n        }\n    });\n    logger.debug(node, info);\n    return info;\n}\n\n","outputs":1,"noerr":0,"x":400,"y":520,"wires":[["e9b423d.ca8b9e"]]},{"id":"d35264ad.3494c8","type":"inject","z":"710f7aed.d2ab74","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":100,"y":600,"wires":[["4704ffc8.5a8f3"]]},{"id":"4704ffc8.5a8f3","type":"function","z":"710f7aed.d2ab74","name":"品質異常履歴","func":"const logger = global.get(\"logger\");\nlogger.info(node, node.name);\nconst platform = global.get(\"platform\");\nconst machines = global.get(\"Machines\").List;\nconst params = msg.req.query;\nconst target = params.target;\n\nmachines.forEach((machine) => {\n    if (parseInt(target) == parseInt(machine.Id)) {\n        makeData(machine);\n    }\n});\nreturn;\n/**\n * データ作成\n * @param {string} machine \n */\nfunction makeData(machine) {\n    const content = {};\n    content.List = [];\n\n    // 当日分のデータ取得\n    const dateObj = global.get(\"date\").getTodayFromToStringJST();\n    let id = 0;\n    \n    const maxNum = flow.get(\"Config\").qualityAbnormalMaxNum;\n    \n    platform.queryDatetimeAndConditionFromArray(machine.Things.QualityAbnormalHistory, dateObj.from, dateObj.to, /*maxNum*/100, \"QualityAbnormalHistory.Time\", 19,\n        \"QualityAbnormalHistory.MeasuredValue\", \"QualityAbnormalHistory.NoMeasuredValue\", \"Result\", \"<>\", \"OK\").then((list)=>{\n        list.forEach((item)=>{\n            item.QualityAbnormalHistory.MeasuredValue.forEach((measuredValue)=>{\n                const abnormal = getQualityAbnormal(machine.Id, measuredValue.No, 1);\n                if (!abnormal) {\n                    return;\n                }\n                if (measuredValue.Result == \"OK\") {\n                    return;\n                }\n                const obj = {};\n                obj.Id = id++;\n                obj.Time = item.QualityAbnormalHistory.Time;\n                obj.DrawNumber = item.QualityAbnormalHistory.DrawNumber;\n                if (item.QualityAbnormalHistory.OrderNumber !== \"\") {\n                    obj.OrderNumber = item.QualityAbnormalHistory.OrderNumber;\n                } else {\n                    obj.OrderNumber = \"-\";\n                }\n                obj.QualityAbnormality = abnormal.Message;\n                obj.MeasuredValue = getTranslateValue(measuredValue.Value, abnormal.Lsb) + abnormal.Unit;\n                content.List.push(obj);\n            });\n            \n            item.QualityAbnormalHistory.NoMeasuredValue.forEach((noMeasuredValue)=>{\n                const abnormal = getQualityAbnormal(machine.Id, noMeasuredValue.No, 2);\n                if (!abnormal) {\n                    return;\n                }\n                if (noMeasuredValue.Result == \"OK\") {\n                    return;\n                }\n                const obj = {};\n                obj.Id = id++;\n                obj.Time = item.QualityAbnormalHistory.Time;\n                obj.DrawNumber = item.QualityAbnormalHistory.DrawNumber;\n                if (item.QualityAbnormalHistory.OrderNumber !== \"\") {\n                    obj.OrderNumber = item.QualityAbnormalHistory.OrderNumber;\n                } else {\n                    obj.OrderNumber = \"-\";\n                }\n                obj.QualityAbnormality = abnormal.Message;\n                obj.MeasuredValue = \"-\";\n                obj.Unit = abnormal.Unit;\n                content.List.push(obj);\n            });\n        });\n        \n        logger.debug(node, content);\n        content.List.sort(function(a, b) {\n            if (a.Time < b.Time) return 1;\n            if (a.Time > b.Time) return -1;\n            // 降順\n            return 0;\n        });\n        msg.payload = content;\n        node.send(msg);\n    }).catch((error)=> {\n        logger.error(node, error);\n        msg.statusCode = 500;\n        msg.payload = {\"result\": \"NG\", \"message\": \"can not get data from platform\"};\n        node.send(msg);\n    });\n}\n/**\n * @param {string} value \n * @param {string} lsb \n * @return {string}\n */\nfunction getTranslateValue(value, lsb) {\n    if (lsb == \"-\") return value;\n    return value * parseFloat(lsb);\n}\n/**\n * @param {string} machineNo \n * @param {string} no \n * @param {string} itemType \n * @return {string}\n */\nfunction getQualityAbnormal(machineNo, no, itemType) {\n    const abnormals = global.get(\"QualityAbnormals\");\n    let ret = undefined;\n    abnormals.List.forEach((abnormal)=>{\n        if (abnormal.MachineId == parseInt(machineNo) && abnormal.No == parseInt(no) && abnormal.ItemType == itemType) {\n            ret = abnormal;\n        }\n    });\n    return ret;\n}\n","outputs":1,"noerr":0,"x":420,"y":600,"wires":[["9d8d678.53c8798"]]},{"id":"d0edfce3.825f7","type":"inject","z":"710f7aed.d2ab74","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":100,"y":680,"wires":[["f7073eaf.7000d"]]},{"id":"f7073eaf.7000d","type":"function","z":"710f7aed.d2ab74","name":"まとめ","func":"const applicationConfig = global.get(\"ApplicationConfig\");\nconst logger = global.get(\"logger\");\nlogger.info(node, node.name);\nconst platform = global.get(\"platform\");\nconst machines = global.get(\"Machines\").List;\nconst states = global.get(\"MachineState\");\nconst abnormals = global.get(\"Abnormals\").List;\nconst ckdPlatform = applicationConfig.CkdPlatform;\nconst params = msg.req.query;\nconst target = params.target;\n\nmachines.forEach((machine) => {\n    if (parseInt(target) == parseInt(machine.Id)) {\n        makeData(machine);\n    }\n});\nreturn;\n/**\n * データ作成\n * @param {string} machine \n */\nfunction makeData(machine) {\n    const content = {};\n    \n    \n    platform.latest(machine.Things.MachineStatus, ckdPlatform.App3).then((status)=>{\n        platform.latest(machine.Things.ProductionHistory, ckdPlatform.App3).then((productionHistory)=>{\n            platform.latest(machine.Things.AbnormalHistory, ckdPlatform.App3).then((abnormalHistory)=>{\n\n                // 2020.10.09(CKD):トラブル発生中かつ設備状態が電源OFF時以外の場合はトラブル名を表示する\n                // 上記以外は設備状態を表示する\n                if (abnormalHistory.AbnormalHistory.Occurring && status.MachineState.New.State !== 0) {\n                    // 2020.10.27(CKD):トラブル複数存在する場合、最新1件かつ高優先を設備状態に表示する\n                    content.MachineStatusMessage = getHighPriorityAbnormal(machine.Id, abnormalHistory.AbnormalHistory.Occurring).AbnormalMessage;\n//                    content.MachineStatusMessage = getAbnormal(machine.Id, abnormalHistory.AbnormalHistory.Occurring[0].Code).AbnormalMessage;\n                } else {\n                    content.MachineStatusMessage = states[status.MachineState.New.State].name;\n                }\n                 \n                content.MachineStatus = status.MachineState.New.State;\n                \n                // 2020.10.09(CKD):指図番号なし(未定義含む)または(追加:2020.10.08)設備状態が電源OFFの場合、図番を非表示\"-\"とする\n                if (productionHistory.ProductionHistory.Numbers.DrawNumberInfo.DrawNumber===\"\" || \n                    productionHistory.ProductionHistory.Numbers.DrawNumberInfo.DrawNumber===undefined ||\n                    status.MachineState.New.State === 0 ) {\n\n                    content.DrawNumber = \"-\";\n                } else {\n                    content.DrawNumber = productionHistory.ProductionHistory.Numbers.DrawNumberInfo.DrawNumber;\n                }\n    \n                // 2020.10.09(CKD):指図番号なし(未定義含む)または(追加:2020.10.08)設備状態が電源OFFの場合、オーダー番号を非表示\"-\"とする\n                if (productionHistory.ProductionHistory.Numbers.OrderNumberInfo.OrderNumber===\"\" || \n                    productionHistory.ProductionHistory.Numbers.OrderNumberInfo.OrderNumber===undefined ||\n                    status.MachineState.New.State === 0 ) {\n                    content.OrderNumber = \"-\";\n                } else {\n                    content.OrderNumber = productionHistory.ProductionHistory.Numbers.OrderNumberInfo.OrderNumber;\n                }\n                \n                content.TaktTime = productionHistory.ProductionHistory.TackTime;\n                logger.debug(node, content);\n                msg.payload = content;\n                node.send(msg);            \n            }).catch((error)=> {\n                logger.error(node, error);\n                msg.statusCode = 500;\n                msg.payload = {\"result\": \"NG\", \"message\": \"can not get data from platform\"};\n                node.send(msg);\n            });\n        }).catch((error)=> {\n            logger.error(node, error);\n            msg.statusCode = 500;\n            msg.payload = {\"result\": \"NG\", \"message\": \"can not get data from platform\"};\n            node.send(msg);\n        });\n    }).catch((error)=> {\n        logger.error(node, error);\n        msg.statusCode = 500;\n        msg.payload = {\"result\": \"NG\", \"message\": \"can not get data from platform\"};\n        node.send(msg);\n    });\n}\n/**\n * @param {string} machineId \n * @param {string} code \n * @return {string}\n */\nfunction getAbnormal(machineId, code) {\n    let info = {};\n    abnormals.forEach((abnormal)=>{\n        if (abnormal.MachineId == parseInt(machineId) && abnormal.No == parseInt(code)) {\n            info = abnormal;\n        }\n    });\n    logger.debug(node, info);\n    return info;\n}\n\n/**\n * @param {numbar} machineId \n * @param {array}  list:occurring\n * @return {object} abnormal\n */\nfunction getHighPriorityAbnormal( machineId, occurring ){\n    let _result = {};\n    for( let _idx = 0 ; _idx < occurring.length ; _idx++ ){\n        let _abnormal = getAbnormal( machineId, occurring[_idx].Code );\n        if( !Object.keys(_result).length || ( _result.TypeId < _abnormal.TypeId ) ) {\n            _result = _abnormal;\n            /* 重故障発見時は終了 */\n            if( _result.TypeId >= 3 ) break;\n        }\n    }\n    return _result\n}\n\n","outputs":1,"noerr":0,"x":410,"y":700,"wires":[["7e21b4f3.46247c"]]},{"id":"c509f5c6.013e88","type":"function","z":"710f7aed.d2ab74","name":"消費電力エアー量１ヶ月","func":"const logger = global.get(\"logger\");\nlogger.info(node, node.name);\nconst platform = global.get(\"platform\");\nconst machines = global.get(\"Machines\").List;\nconst PostThingObj = global.get(\"PostThingObj\");\nconst maxnum = 31;\nmachines.forEach((machine) => {\n    if (\"00\" === machine.Id) {\n        return;\n    }\n    makeData(machine);\n});\nreturn;\n/**\n * データ作成\n * @param {string} machine \n */\nfunction makeData(machine) {\n    const content = {};\n    content.List = [];\n    const airContent = {};\n    airContent.List = [];\n    \n    // 当月分のデータ取得\n    const dateObj = global.get(\"date\").getMonthFromToStringJST();\n    platform.queryDatetime(machine.Things.ProductionPerDay, dateObj.from, dateObj.to, maxnum, \"ProductionDataAchievementFor1Day.TimeFrame\", 10).then((list)=>{\n        // 日付でソート\n        list.sort(function(a, b) {\n            if (!a.ProductionDataAchievementFor1Day || !b.ProductionDataAchievementFor1Day) return 0;\n            const timea = a.ProductionDataAchievementFor1Day.TimeFrame;\n            const timeb = b.ProductionDataAchievementFor1Day.TimeFrame;\n            if ( timea < timeb ) return -1;\n            if ( timea > timeb ) return 1;\n            return 0;\n        });\n        let total = 0;\n        let airTotal = 0;\n        list.forEach((item)=>{\n            if (!item.ProductionDataAchievementFor1Day) return;\n            const obj = {};\n            obj.Time = item.ProductionDataAchievementFor1Day.TimeFrame;\n            obj.Value = item.ProductionDataAchievementFor1Day.EnergyConsumption;\n            total += obj.Value;\n            obj.Total = total;\n            content.List.push(obj);\n            \n            const airObj = {};\n            airObj.Time = item.ProductionDataAchievementFor1Day.TimeFrame;\n            airObj.Value = item.ProductionDataAchievementFor1Day.AmountOfConsumptionAir*10;\n            airTotal += airObj.Value;\n            airObj.Total = airTotal;\n            airContent.List.push(airObj);\n        });\n        platform.record(PostThingObj.get(machine.Id, \"EnergyConsumptionMonth\"), content).then(()=>{\n            platform.record(PostThingObj.get(machine.Id, \"AirConsumptionMonth\"), airContent).then(()=>{\n                node.send(msg);\n            });\n        });\n    }).catch((error)=> {\n        logger.error(node, error);\n        msg.payload = {\"result\": \"NG\", \"message\": error};\n        node.send(msg);\n    });\n}\n","outputs":1,"noerr":0,"x":450,"y":1000,"wires":[[]]},{"id":"f4841b8d.210f88","type":"inject","z":"710f7aed.d2ab74","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"30 00 * * *","once":false,"onceDelay":0.1,"x":110,"y":1000,"wires":[["c509f5c6.013e88"]]},{"id":"798ab490.94f98c","type":"function","z":"710f7aed.d2ab74","name":"消費電力エアー量１日","func":"const logger = global.get(\"logger\");\nlogger.info(node, node.name);\nconst platform = global.get(\"platform\");\nconst machines = global.get(\"Machines\").List;\nconst params = msg.req.query;\nconst target = params.target;\nconst maxnum = 24;\nmachines.forEach((machine) => {\n    if (parseInt(target) == parseInt(machine.Id)) {\n        makeData(machine);\n    }\n});\nreturn;\n/**\n * データ作成\n * @param {string} machine \n */\nfunction makeData(machine) {\n    const content = {};\n    content.List = [];\n    const airContent = {};\n    airContent.List = [];\n    \n    // 当日分のデータ取得\n    const dateObj = global.get(\"date\").getTodayFromToString();\n    platform.range(machine.Things.ProductionPerHour, dateObj.from, dateObj.to, maxnum).then((list)=>{\n        logger.debug(node, JSON.stringify(list));\n        // 日付でソート\n        list.sort(function(a, b) { \n            if (!a.content.ProductionDataAchievementFor1Hour || !b.content.ProductionDataAchievementFor1Hour) return 0;\n            const timea = a.content.ProductionDataAchievementFor1Hour.TimeFrame;\n            const timeb = b.content.ProductionDataAchievementFor1Hour.TimeFrame;\n            if ( timea < timeb ) return -1;\n            if ( timea > timeb ) return 1;\n            return 0;\n        });\n        let total = 0;\n        let airTotal = 0;\n        list.forEach((item)=>{\n            if (!item.content.ProductionDataAchievementFor1Hour) return;\n            const obj = {};\n            obj.Time = item.content.ProductionDataAchievementFor1Hour.TimeFrame;\n            obj.Value = item.content.ProductionDataAchievementFor1Hour.EnergyConsumption;\n            total += obj.Value;\n            obj.Total = total;\n            content.List.push(obj);\n            \n            const airObj = {};\n            airObj.Time = item.content.ProductionDataAchievementFor1Hour.TimeFrame;\n            airObj.Value = item.content.ProductionDataAchievementFor1Hour.AmountOfConsumptionAir*10;\n            airTotal += airObj.Value;\n            airObj.Total = airTotal;\n            airContent.List.push(airObj);\n        });\n        \n        const result = {power: content, air: airContent};\n        logger.debug(node, JSON.stringify(result));\n        msg.payload = result;\n        node.send(msg);\n    }).catch((error)=> {\n        logger.error(node, error);\n        msg.statusCode = 500;\n        msg.payload = {\"result\": \"NG\", \"message\": \"can not get data from platform\"};\n        node.send(msg);\n    });\n}\n","outputs":1,"noerr":0,"x":440,"y":800,"wires":[["842345e8.3015b8"]]},{"id":"7eebd5e8.4b8cec","type":"inject","z":"710f7aed.d2ab74","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":100,"y":800,"wires":[["798ab490.94f98c"]]},{"id":"cf6d018.226ec","type":"comment","z":"710f7aed.d2ab74","name":"Node-RED起動時","info":"","x":80,"y":20,"wires":[]},{"id":"f305d702.3ed218","type":"comment","z":"710f7aed.d2ab74","name":"API","info":"","x":50,"y":260,"wires":[]},{"id":"73dfef18.e54fa","type":"http in","z":"710f7aed.d2ab74","name":"","url":"machine/ganttchart/","method":"get","upload":false,"swaggerDoc":"","x":150,"y":360,"wires":[["6a433721.d892a8"]]},{"id":"2b4e6357.fce80c","type":"http response","z":"710f7aed.d2ab74","name":"","statusCode":"","headers":{"Access-Control-Allow-Origin":"*"},"x":610,"y":320,"wires":[]},{"id":"bf5263cf.c8352","type":"http in","z":"710f7aed.d2ab74","name":"","url":"machine/production/","method":"get","upload":false,"swaggerDoc":"","x":150,"y":460,"wires":[["116627de.695ac8"]]},{"id":"a0bab069.ad3af","type":"http response","z":"710f7aed.d2ab74","name":"","statusCode":"","headers":{"Access-Control-Allow-Origin":"*"},"x":610,"y":420,"wires":[]},{"id":"fc166dc8.014d","type":"http in","z":"710f7aed.d2ab74","name":"","url":"machine/abnormal/","method":"get","upload":false,"swaggerDoc":"","x":150,"y":560,"wires":[["77860329.f7816c"]]},{"id":"2c1a84e2.40d3bc","type":"http in","z":"710f7aed.d2ab74","name":"","url":"machine/quality/","method":"get","upload":false,"swaggerDoc":"","x":140,"y":640,"wires":[["4704ffc8.5a8f3"]]},{"id":"3ced5dda.86cc82","type":"http in","z":"710f7aed.d2ab74","name":"","url":"machine/summary/","method":"get","upload":false,"swaggerDoc":"","x":150,"y":720,"wires":[["f7073eaf.7000d"]]},{"id":"e9b423d.ca8b9e","type":"http response","z":"710f7aed.d2ab74","name":"","statusCode":"","headers":{"Access-Control-Allow-Origin":"*"},"x":610,"y":520,"wires":[]},{"id":"9d8d678.53c8798","type":"http response","z":"710f7aed.d2ab74","name":"","statusCode":"","headers":{"Access-Control-Allow-Origin":"*"},"x":610,"y":600,"wires":[]},{"id":"7e21b4f3.46247c","type":"http response","z":"710f7aed.d2ab74","name":"","statusCode":"","headers":{"Access-Control-Allow-Origin":"*"},"x":610,"y":680,"wires":[]},{"id":"842345e8.3015b8","type":"http response","z":"710f7aed.d2ab74","name":"","statusCode":"","headers":{"Access-Control-Allow-Origin":"*"},"x":620,"y":800,"wires":[]},{"id":"d4ca165d.bc6ab8","type":"http in","z":"710f7aed.d2ab74","name":"","url":"machine/air/","method":"get","upload":false,"swaggerDoc":"","x":130,"y":840,"wires":[["798ab490.94f98c"]]},{"id":"c9788133.5a7d1","type":"comment","z":"710f7aed.d2ab74","name":"定期実行","info":"","x":60,"y":960,"wires":[]},{"id":"64d6ebe7.b55f34","type":"comment","z":"26bcf22.c9c150e","name":"TODO","info":"取得する範囲","x":70,"y":40,"wires":[]},{"id":"6f5e0b3e.027ac4","type":"function","z":"26bcf22.c9c150e","name":"分析データ取得","func":"const logger = global.get(\"logger\");\nlogger.info(node, node.name);\nconst platform = global.get(\"platform\");\nconst machineStates = global.get(\"MachineState\");\nconst machines = global.get(\"Machines\").List;\nconst abnormals = global.get(\"Abnormals\").List;\nconst moment = global.get(\"moment\");\n\nconst params = msg.req.query;\nlogger.debug(node, params);\nconst target = params.target;\nconst type = params.type;\nconst start = params.start;\nconst end = params.end;\n\nconst maxNum = 100000;\n\nmakeData(target, type, start, end).then((data)=>{\n    logger.debug(node, data);\n    msg.payload = data;\n    node.send(msg);\n});\n/**\n * データ作成\n * @param {string} target \n * @param {string} type\n * @param {string} start\n * @param {string} end\n * @return {string}\n */\nfunction makeData(target, type, start, end) {\n    return new Promise((resolve, reject)=>{\n        const targetMachines = [];\n        if (\"00\" == target) {\n            machines.forEach((machine)=>{\n                if (\"00\" !== machine.Id) {\n                    targetMachines.push(machine);\n                }\n            });\n        } else { \n            machines.forEach((machine)=>{\n                if (target == machine.Id) {\n                    targetMachines.push(machine);\n                }\n            });\n        }\n        \n        if (\"1\" == type) {\n            getData(targetMachines, \"ProductionHistory\", start, end, \"ProductionHistory.Time\", 19).then((data)=>{\n                const result = makeProductionData(data);\n                resolve(result);\n            });\n        } else if (\"2\" == type) {\n            getData(targetMachines, \"ProductionDataAchievementTotalOfTheDayDetailedInformation\",\n                start, end, \"ProductionDataAchievementTotalOfTheDayDetailedInformation.TimeFrame\", 19).then((data)=>{\n                const result = makeProductionDataDrawNumber(data);\n                resolve(result);\n            });\n        } else if (\"3\" == type) {\n            getData(targetMachines, \"ProductionDataAchievementTotalOfTheDayDetailedInformation\",\n                start, end, \"ProductionDataAchievementTotalOfTheDayDetailedInformation.TimeFrame\", 19).then((data)=>{\n                const result = makeProductionDataOrderNumber(data);\n                resolve(result);\n            });\n        } else if (\"4\" == type) {\n            getData(targetMachines, \"ProductionHistory\", start, end, \"ProductionHistory.Time\", 19).then((data)=>{\n                const result = makeCycleTimeData(data);\n                resolve(result);\n            });\n        } else if (\"5\" == type) {\n            getDataFromArray(targetMachines, \"AbnormalHistory\", start, end, \"AbnormalHistory.New\", \"Time\", 19).then((data)=>{\n                const result = makeAbnormalData(data);\n                resolve(result);\n            });\n        } else if (\"6\" == type) {\n            getData(targetMachines, \"AbnormalHistoryDetailedInformation\", start, end, \"AbnormalHistoryDetailedInformation.TimeFrame\", 10).then((data)=>{\n                const result = makeAbnormalDataDrawNumber(data);\n                resolve(result);\n            });\n        } else if (\"7\" == type) {\n            getData(targetMachines, \"AbnormalHistoryDetailedInformation\", start, end, \"AbnormalHistoryDetailedInformation.TimeFrame\", 10).then((data)=>{\n                const result = makeAbnormalDataOrderNumber(data);\n                resolve(result);\n            });\n        } else if (\"8\" == type) {\n            getDataConditionFromArray(targetMachines, \"QualityAbnormalHistory\", start, end, \"QualityAbnormalHistory.Time\", 19,\n                \"QualityAbnormalHistory.MeasuredValue\", \"QualityAbnormalHistory.NoMeasuredValue\").then((data)=>{\n                const result = makeQualityAbnormalData(data);\n                resolve(result);\n            });\n        } else if (\"9\" == type) {\n            getData(targetMachines, \"QualityAbnormalHistoryDetailedInformation\", start, end, \"QualityAbnormalHistoryDetailedInformation.TimeFrame\", 10).then((data)=>{\n                const result = makeQualityAbnormalDataDrawNumber(data);\n                resolve(result);\n            });\n        } else if (\"10\" == type) {\n            getData(targetMachines, \"QualityAbnormalHistoryDetailedInformation\", start, end, \"QualityAbnormalHistoryDetailedInformation.TimeFrame\", 10).then((data)=>{\n                const result = makeQualityAbnormalDataOrderNumber(data);\n                resolve(result);\n            });\n        } else if (\"11\" == type) {\n            getData(targetMachines, \"MachineStatus\", start, end, \"MachineState.Old.Start\", 19).then((data)=>{\n                const result = makeStatusData(data);\n                resolve(result);\n            });\n        } else if (\"12\" == type) {\n            getData(targetMachines, \"ProductionPerDay\", start, end, \"ProductionDataAchievementFor1Day.TimeFrame\", 10).then((data)=>{\n                const result = makeStatusTotalData(data);\n                resolve(result);\n            });\n        } else if (\"13\" == type) {\n            getData(targetMachines, \"ProductionHistory\", start, end, \"ProductionHistory.Time\", 23).then((data)=>{\n                const result = {};\n                resolve(result);\n            });\n        } else {\n            resolve();\n        }\n    });\n}\n\nreturn;\n\n// 複数のThingからデータを取得して、一つの配列にまとめて返す\n/**\n * @param {string} machines \n * @param {string} thing \n * @param {string} start \n * @param {string} end\n * @param {string} string\n * @param {string} stringNum\n * @return {string}\n */\nfunction getData(machines, thing, start, end, string, stringNum) {\n    logger.debug(node, \"GetData\");\n    return new Promise((resolve, reject)=>{\n        const promises = [];\n        machines.forEach((machine)=>{\n            logger.debug(machine, node);\n            promises.push(\n                new Promise((resolve, reject)=>{\n                    platform.queryDatetime(machine.Things[thing], start, end, maxNum, string, stringNum).then((list)=>{\n                        resolve({Id: machine.Id, Name: machine.Name, Data: list});\n                    });\n                })\n            );\n        });\n        Promise.all(promises).then((results)=>{\n            const list = [];\n            // 結果を一つの配列にまとめる\n            results.forEach((result)=>{\n                list.push(result);\n            });\n            logger.debug(node, list);\n            resolve(list);\n        });\n    });\n}\n\n/**\n * 複数のThingの配列内からデータを取得して、一つの配列にまとめて返す\n * @param {string} machines\n * @param {string} thing      検索条件:ThingID\n * @param {string} start      検索条件:開始日付\n * @param {string} end        検索条件:終了日付\n * @param {string} targetName 検索対象の配列名\n * @param {string} string     日付項目名\n * @param {string} stringNum  日付文字列の利用桁数\n * @return {string}\n */\nfunction getDataFromArray(machines, thing, start, end, targetName, string, stringNum) {\n    logger.debug(node, \"GetDataFromArray\");\n    return new Promise((resolve, reject)=>{\n        const promises = [];\n        machines.forEach((machine)=>{\n            logger.debug(machine, node);\n            promises.push(\n                new Promise((resolve, reject)=>{\n                    platform.queryDatetimeFromArray(machine.Things[thing], start, end, maxNum, targetName, string, stringNum).then((list)=>{\n                        resolve({Id: machine.Id, Name: machine.Name, Data: list});\n                    });\n                })\n            );\n        });\n        Promise.all(promises).then((results)=>{\n            const list = [];\n            // 結果を一つの配列にまとめる\n            results.forEach((result)=>{\n                list.push(result);\n            });\n            logger.debug(node, list);\n            resolve(list);\n        });\n    });\n}\n\n/**\n * 日付と、配列内の項目に対して検索を行う\n * @param {string} machines\n * @param {string} thing          検索条件:ThingID\n * @param {string} start          検索条件:開始日付\n * @param {string} end            検索条件:終了日付\n * @param {string} string         日付項目名\n * @param {string} stringNum      日付文字列の利用桁数\n * @param {string} targetName1    検索対象の配列名1\n * @param {string} targetName2    検索対象の配列名2\n * @param {string} targetString   検索する配列内の項目名\n * @param {string} targetOperator 検索する配列内の項目の比較演算子\n * @param {string} targetValue    検索する値\n *  @return {string} \n */\nfunction getDataConditionFromArray(machines, thing, start, end, string, stringNum, \n    targetName1, targetName2, targetString, targetOperator, targetValue) {\n    logger.debug(node, \"GetDataConditionFromArray\");\n    return new Promise((resolve, reject)=>{\n        const promises = [];\n        machines.forEach((machine)=>{\n            logger.debug(machine, node);\n            promises.push(\n                new Promise((resolve, reject)=>{\n                    platform.queryDatetimeAndConditionFromArray(machine.Things[thing], start, end, maxNum, string, stringNum,\n                        targetName1, targetName2, targetString, targetOperator, targetValue).then((list)=>{\n                        resolve({Id: machine.Id, Name: machine.Name, Data: list});\n                    });\n                })\n            );\n        });\n        Promise.all(promises).then((results)=>{\n            const list = [];\n            // 結果を一つの配列にまとめる\n            results.forEach((result)=>{\n                list.push(result);\n            });\n            logger.debug(node, list);\n            resolve(list);\n        });\n    });\n}\n\n// 生産数\n/**\n * データ作成\n * @param {string} list\n * @return {string}\n */\nfunction makeProductionData(list) {\n    logger.debug(node, \"MakeProductionData\");\n    const content = {};\n    content.List = [];\n    list.forEach((machine)=>{\n        machine.Data.forEach((item)=>{\n            const obj = {};\n            obj.日時 = moment(item.ProductionHistory.Time).utc().add(9, \"hours\").format(\"YYYY-MM-DD HH:mm\");\n            obj.設備 = machine.Name;\n            switch (item.ProductionHistory.Result) {\n            case 0: obj.区分 = \"異常\"; break;\n            case 1: obj.区分 = \"正常\"; break;\n            default: obj.区分 = \"不定値\"; break;\n            }  \n            obj.図番 = item.ProductionHistory.Numbers.DrawNumberInfo.DrawNumber;\n            if (item.ProductionHistory.Numbers.OrderNumberInfo.OrderNumber !== undefined) {\n                obj.指図番号 = item.ProductionHistory.Numbers.OrderNumberInfo.OrderNumber;\n            } else {\n                obj.指図番号 = \"-\";\n            }\n            content.List.push(obj);\n        });\n    });\n    content.List.sort(function(a, b) {\n        const moment = global.get(\"moment\");\n        const format = \"YYYY-MM-DD HH:mm:ss.S Z\";\n        return moment(a.日時, format).isAfter(moment(b.日時, format))? -1: 1;\n    });\n    return content;\n}\n\n// 生産数 図版合計\n/**\n * データ作成\n * @param {string} list\n * @return {string}\n */\nfunction makeProductionDataDrawNumber(list) {\n    logger.debug(node, \"MakeProductionDataDrawNumber\");\n    const content = {};\n    content.List = [];\n    const dic = {};\n    list.forEach((machine)=>{\n        machine.Data.forEach((item)=>{\n            if (!item.ProductionDataAchievementTotalOfTheDayDetailedInformation) return;\n            // 日付と図番で合計する\n            const date = item.ProductionDataAchievementTotalOfTheDayDetailedInformation.TimeFrame.substr(0, 10);\n            Object.keys(item.ProductionDataAchievementTotalOfTheDayDetailedInformation.Numbers.DrawNumbers).forEach((drawNumber)=>{\n                const key = date + drawNumber + machine.Name;\n                const info = item.ProductionDataAchievementTotalOfTheDayDetailedInformation.Numbers.DrawNumbers[drawNumber];\n                if (dic[key]) {\n                    dic[key].合計 += info.ProductionResults + info.ProductionBadResults;\n                    dic[key].正常合計 += info.ProductionResults;\n                    dic[key].異常合計 += info.ProductionBadResults;\n                } else {\n                    const obj = {};\n                    obj.日時 = date;\n                    obj.設備 = machine.Name;\n                    obj.図番 = drawNumber;\n                    obj.開始日時 = info.Start;\n                    obj.終了日時 = info.End;\n                    obj.合計 = info.ProductionResults + info.ProductionBadResults;\n                    obj.正常合計 = info.ProductionResults;\n                    obj.異常合計 = info.ProductionBadResults;\n                    // 生産数が0のものは場外する\n                    if(obj.合計 > 0){\n                        dic[key] = obj;\n                    }\n                }\n            });\n        });\n    });\n    content.List = Object.values(dic);\n    content.List.sort(function(a, b) {\n        const moment = global.get(\"moment\");\n        return moment(a.日時).isAfter(moment(b.日時))? -1: 1;\n    });\n    return content;\n}\n\n// 生産数 指図合計\n/**\n * データ作成\n * @param {string} list\n * @return {string}\n */\nfunction makeProductionDataOrderNumber(list) {\n    logger.debug(node, \"MakeProductionDataOrderNumber\");\n    const content = {};\n    content.List = [];\n    const dic = {};\n    list.forEach((machine)=>{\n        machine.Data.forEach((item)=>{\n            if (!item.ProductionDataAchievementTotalOfTheDayDetailedInformation) return;\n            // 日付と図番で合計する\n            const date = item.ProductionDataAchievementTotalOfTheDayDetailedInformation.TimeFrame.substr(0, 10);\n            Object.keys(item.ProductionDataAchievementTotalOfTheDayDetailedInformation.Numbers.OrderNumbers).forEach((orderNumber)=>{\n                const key = date + orderNumber + machine.Name;\n                const info = item.ProductionDataAchievementTotalOfTheDayDetailedInformation.Numbers.OrderNumbers[orderNumber];\n                if (dic[key]) {\n                    dic[key].合計 += info.ProductionResults + info.ProductionBadResults;\n                    dic[key].正常合計 += info.ProductionResults;\n                    dic[key].異常合計 += info.ProductionBadResults;\n                } else {\n                    const obj = {};\n                    obj.日時 = date;\n                    obj.設備 = machine.Name;\n                    obj.指図番号 = orderNumber;\n                    obj.開始日時 = info.Start;\n                    obj.終了日時 = info.End;\n                    obj.合計 = info.ProductionResults + info.ProductionBadResults;\n                    obj.正常合計 = info.ProductionResults;\n                    obj.異常合計 = info.ProductionBadResults;\n                    // 生産数が0のものは場外する\n                    if(obj.合計 > 0){\n                        dic[key] = obj;\n                    }\n                }\n            });\n        });\n    });\n    content.List = Object.values(dic);\n    content.List.sort(function(a, b) {\n        const moment = global.get(\"moment\");\n        return moment(a.日時).isAfter(moment(b.日時))? -1: 1;\n    });\n    return content;\n}\n\n// サイクルタイム\n/**\n * データ作成\n * @param {string} list\n * @return {string}\n */\nfunction makeCycleTimeData(list) {\n    logger.debug(node, \"MakeProductionData\");\n    const content = {};\n    content.List = [];\n    list.forEach((machine)=>{\n        machine.Data.forEach((item)=>{\n            const obj = {};\n            obj.日時 = moment(item.ProductionHistory.Time).utc().add(9, \"hours\").format(\"YYYY-MM-DD HH:mm\");\n            obj.設備 = machine.Name;\n            obj.サイクルタイム = item.ProductionHistory.TackTime;\n            switch (item.ProductionHistory.Result) {\n            case 0: obj.区分 = \"異常\"; break;\n            case 1: obj.区分 = \"正常\"; break;\n            default: obj.区分 = \"不定値\"; break;\n            }  \n            obj.図番 = item.ProductionHistory.Numbers.DrawNumberInfo.DrawNumber;\n            if (item.ProductionHistory.Numbers.OrderNumberInfo.OrderNumber !== undefined) {\n                obj.指図番号 = item.ProductionHistory.Numbers.OrderNumberInfo.OrderNumber;\n            } else {\n                obj.指図番号 = \"-\";\n            }\n            content.List.push(obj);\n        });\n    });\n    content.List.sort(function(a, b) {\n        const moment = global.get(\"moment\");\n        return moment(a.日時).isAfter(moment(b.日時))? -1: 1;\n    });\n    return content;\n}\n\n// 異常\n/**\n * データ作成\n * @param {string} list\n * @return {string}\n */\nfunction makeAbnormalData(list) {\n    logger.debug(node, \"MakeAbnormalData\");\n    const content = {};\n    content.List = [];\n    list.forEach((machine)=>{\n        machine.Data.forEach((item)=>{\n            const obj = {};\n            const abnormalInfo = getAbnormal(machine.Id, item.Code);\n            if (!abnormalInfo) {\n                return;\n            }\n            obj.日時 = moment(item.Time).utc().add(9, \"hours\").format(\"YYYY-MM-DD HH:mm\");\n            obj.設備 = machine.Name;\n            obj.分類 = abnormalInfo.Type;\n            obj.内容 = abnormalInfo.AbnormalMessage;\n            obj.図番 = item.DrawNumber;\n            if (item.OrderNumber !== \"\") {\n                obj.指図番号 = item.OrderNumber;\n            } else {\n                obj.指図番号 = \"-\";\n            }\n            content.List.push(obj);\n        });\n    });\n    content.List.sort(function(a, b) {\n        const moment = global.get(\"moment\");\n        return moment(a.日時).isAfter(moment(b.日時))? -1: 1;\n    });\n    return content;\n}\n\n// 異常 図版合計\n/**\n * データ作成\n * @param {string} list\n * @return {string}\n */\nfunction makeAbnormalDataDrawNumber(list) {\n    logger.debug(node, \"MakeAbnormalDataDrawNumber\");\n    logger.debug(node, JSON.stringify(list));\n    const content = {};\n    const dic = {};\n    content.List = [];\n    list.forEach((machine)=>{\n        machine.Data.forEach((item)=>{\n            Object.keys(item.AbnormalHistoryDetailedInformation.Numbers.DrawNumbers).forEach((drawNumber)=>{\n                const info = item.AbnormalHistoryDetailedInformation.Numbers.DrawNumbers[drawNumber];\n                Object.keys(info).forEach((code)=>{\n                    const key = item.AbnormalHistoryDetailedInformation.TimeFrame + drawNumber + code + machine.Name;\n                    if (dic[key]) {\n                        dic[key].合計 += parseInt(info[code].NumberOfOccurrences);\n                        dic[key].累積時間 += parseFloat(info[code].CumulativeTime);\n                    } else {\n                        const obj = {};\n                        const abnormalInfo = getAbnormal(machine.Id, code);\n                        if (!abnormalInfo) {\n                            return;\n                        }\n                        obj.日時 = item.AbnormalHistoryDetailedInformation.TimeFrame;\n                        obj.設備 = machine.Name;\n                        obj.図番 = drawNumber;\n                        obj.分類 = abnormalInfo.Type;\n                        obj.内容 = abnormalInfo.AbnormalMessage;\n                        obj.合計 = parseInt(info[code].NumberOfOccurrences);\n                        obj.累積時間 = parseFloat(info[code].CumulativeTime);\n                        dic[key] = obj;\n                    }\n                });\n            });\n        });\n    });\n    content.List = Object.values(dic);\n    content.List.sort(function(a, b) {\n        const moment = global.get(\"moment\");\n        return moment(a.日時).isAfter(moment(b.日時))? -1: 1;\n    });\n    return content;\n}\n\n// 異常 指図合計\n/**\n * データ作成\n * @param {string} list\n * @return {string}\n */\nfunction makeAbnormalDataOrderNumber(list) {\n    logger.debug(node, \"MakeAbnormalDataOrderNumber\");\n    const content = {};\n    const dic = {};\n    content.List = [];\n    list.forEach((machine)=>{\n        machine.Data.forEach((item)=>{\n            Object.keys(item.AbnormalHistoryDetailedInformation.Numbers.OrderNumbers).forEach((orderNumber)=>{\n                const info = item.AbnormalHistoryDetailedInformation.Numbers.OrderNumbers[orderNumber];\n                Object.keys(info).forEach((code)=>{\n                    const key = item.AbnormalHistoryDetailedInformation.TimeFrame + orderNumber + code + machine.Name;\n                    if (dic[key]) {\n                        dic[key].合計 += parseInt(info[code].NumberOfOccurrences);\n                        dic[key].累積時間 += parseFloat(info[code].CumulativeTime);\n                    } else {\n                        const obj = {};\n                        const abnormalInfo = getAbnormal(machine.Id, code);\n                        if (!abnormalInfo) {\n                            return;\n                        }\n                        obj.日時 = item.AbnormalHistoryDetailedInformation.TimeFrame;\n                        obj.設備 = machine.Name;\n                        if (orderNumber !== \"\") {\n                            obj.指図番号 = orderNumber;\n                        } else {\n                            obj.指図番号 = \"-\";\n                        }\n                        obj.分類 = abnormalInfo.Type;\n                        obj.内容 = abnormalInfo.AbnormalMessage;\n                        obj.合計 = info[code].NumberOfOccurrences;\n                        obj.累積時間 = info[code].CumulativeTime;\n                        dic[key] = obj;\n                    }\n                });\n            });\n        });\n    });\n    content.List = Object.values(dic);\n    content.List.sort(function(a, b) {\n        const moment = global.get(\"moment\");\n        return moment(a.日時).isAfter(moment(b.日時))? -1: 1;\n    });\n    return content;\n}\n/**\n * @param {string} machineId \n * @param {string} code\n * @return {string}\n */\nfunction getAbnormal(machineId, code) {\n    let info = undefined;\n    abnormals.forEach((abnormal)=>{\n        if (abnormal.MachineId == parseInt(machineId) && abnormal.No == parseInt(code)) {\n            info = abnormal;\n        }\n    });\n    logger.debug(node, info);\n    return info;\n}\n\n// 品質\n/**\n * データ作成\n * @param {string} list\n * @return {string}\n */\nfunction makeQualityAbnormalData(list) {\n    logger.debug(node, \"MakeQualityAbnormalData\");\n    const content = {};\n    content.List = [];\n    list.forEach((machine)=>{\n        machine.Data.forEach((item)=>{\n            if (item.QualityAbnormalHistory.MeasuredValue) {\n                item.QualityAbnormalHistory.MeasuredValue.forEach((abnormal)=>{\n                    const qualityAbnormal = getQualityAbnormal(machine.Id, abnormal.No, 1);\n                    if (!qualityAbnormal) {\n                        return;\n                    }\n                    // if(abnormal.Result == \"OK\"){\n                    //     return;\n                    // }\n                    const obj = {};\n                    obj.日時 = moment(item.QualityAbnormalHistory.Time).utc().add(9, \"hours\").format(\"YYYY-MM-DD HH:mm\");\n                    obj.設備 = machine.Name;\n                    obj.内容 = qualityAbnormal.Message;\n                    obj.計測値 = getTranslateValue(abnormal.Value, qualityAbnormal.Lsb);\n                    obj.計測値単位 = qualityAbnormal.Unit;\n                    obj.図番 = item.QualityAbnormalHistory.DrawNumber;\n                    if (item.QualityAbnormalHistory.OrderNumber !== \"\") {\n                        obj.指図番号 = item.QualityAbnormalHistory.OrderNumber;\n                    } else {\n                        obj.指図番号 = \"-\";\n                    }\n                    obj.品質 = (() => {\n                        switch (abnormal.Result) {\n                            case \"OK\" : return \"正常\"\n                            case \"NG\" : return \"異常\"\n                            default : return \"-\"\n                        }\n                    })();\n                    logger.debug(node, abnormal.Value);\n                    logger.debug(node, JSON.stringify(obj));\n                    content.List.push(obj);\n                });\n            }\n            if (item.QualityAbnormalHistory.NoMeasuredValue) {\n                item.QualityAbnormalHistory.NoMeasuredValue.forEach((abnormal)=>{\n                    const qualityAbnormal = getQualityAbnormal(machine.Id, abnormal.No, 2);\n                    if (!qualityAbnormal) {\n                        return;\n                    }\n                    // if(abnormal.Result == \"OK\"){\n                    //     return;\n                    // }\n                    const obj = {};\n                    obj.日時 = moment(item.QualityAbnormalHistory.Time).utc().add(9, \"hours\").format(\"YYYY-MM-DD HH:mm\");\n                    obj.設備 = machine.Name;\n                    obj.内容 = qualityAbnormal.Message;\n                    obj.計測値 = \"-\";\n                    obj.計測値単位 = \"-\";\n                    obj.図番 = item.QualityAbnormalHistory.DrawNumber;\n                    if (item.QualityAbnormalHistory.OrderNumber !== \"\") {\n                        obj.指図番号 = item.QualityAbnormalHistory.OrderNumber;\n                    } else {\n                        obj.指図番号 = \"-\";\n                    }\n                    obj.品質 = (() => {\n                        switch (abnormal.Result) {\n                            case \"OK\" : return \"正常\"\n                            case \"NG\" : return \"異常\"\n                            default : return \"-\"\n                        }\n                    })();\n                    content.List.push(obj);\n                });\n            }\n        });\n    });\n    content.List.sort(function(a, b) {\n        const moment = global.get(\"moment\");\n        return moment(a.日時).isAfter(moment(b.日時))? -1: 1;\n    });\n    return content;\n}\n\n// 品質 図版合計\n/**\n * データ作成\n * @param {string} list\n * @return {string}\n */\nfunction makeQualityAbnormalDataDrawNumber(list) {\n    logger.debug(node, \"MakeQualityAbnormalDataDrawNumber\");\n    const content = {};\n    content.List = [];\n    list.forEach((machine)=>{\n        machine.Data.forEach((item)=>{\n            Object.keys(item.QualityAbnormalHistoryDetailedInformation.Numbers.DrawNumbers).forEach((drawNumber)=>{\n                const info = item.QualityAbnormalHistoryDetailedInformation.Numbers.DrawNumbers[drawNumber];\n                if (info.MeasuredValue !== undefined) {\n                    Object.keys(info.MeasuredValue).forEach((code)=>{\n                        const qualityAbnormal = getQualityAbnormal(machine.Id, code, 1);\n                        if (!qualityAbnormal) {\n                            return;\n                        }\n                        const obj = {};\n                        obj.日時 = item.QualityAbnormalHistoryDetailedInformation.TimeFrame;\n                        obj.設備 = machine.Name;\n                        obj.図番 = drawNumber;\n                        obj.内容 = qualityAbnormal.Message;\n                        obj.正常合計 = info.MeasuredValue[code].NormalCount;\n                        obj.異常合計 = info.MeasuredValue[code].AbnormalCount;\n                        content.List.push(obj);\n                    });\n                }\n                if (info.NoMeasuredValue !== undefined) {\n                    Object.keys(info.NoMeasuredValue).forEach((code)=>{\n                        const qualityAbnormal = getQualityAbnormal(machine.Id, code, 2);\n                        if (!qualityAbnormal) {\n                            return;\n                        }\n                        const obj = {};\n                        obj.日時 = item.QualityAbnormalHistoryDetailedInformation.TimeFrame;\n                        obj.設備 = machine.Name;\n                        obj.図番 = drawNumber;\n                        obj.内容 = qualityAbnormal.Message;\n                        obj.正常合計 = info.NoMeasuredValue[code].NormalCount;\n                        obj.異常合計 = info.NoMeasuredValue[code].AbnormalCount;\n                        content.List.push(obj);\n                    });\n                }\n            });\n        });\n    });\n    content.List.sort(function(a, b) {\n        const moment = global.get(\"moment\");\n        return moment(a.日時).isAfter(moment(b.日時))? -1: 1;\n    });\n    return content;\n}\n\n// 品質 指図合計\n/**\n * データ作成\n * @param {string} list\n * @return {string}\n */\nfunction makeQualityAbnormalDataOrderNumber(list) {\n    logger.debug(node, \"MakeQualityAbnormalDataOrderNumber\");\n    const content = {};\n    content.List = [];\n    list.forEach((machine)=>{\n        machine.Data.forEach((item)=>{\n            Object.keys(item.QualityAbnormalHistoryDetailedInformation.Numbers.OrderNumbers).forEach((orderNumber)=>{\n                const info = item.QualityAbnormalHistoryDetailedInformation.Numbers.OrderNumbers[orderNumber];\n                if (info.MeasuredValue !== undefined) {\n                    Object.keys(info.MeasuredValue).forEach((code)=>{\n                        const qualityAbnormal = getQualityAbnormal(machine.Id, code, 1);\n                        if (!qualityAbnormal) {\n                            return;\n                        }\n                        const obj = {};\n                        obj.日時 = item.QualityAbnormalHistoryDetailedInformation.TimeFrame;\n                        obj.設備 = machine.Name;\n                        if (orderNumber !== \"\") {\n                            obj.指図番号 = orderNumber;\n                        } else {\n                            obj.指図番号 = \"-\";\n                        }\n                        obj.内容 = qualityAbnormal.Message;\n                        obj.正常合計 = info.MeasuredValue[code].NormalCount;\n                        obj.異常合計 = info.MeasuredValue[code].AbnormalCount;\n                        content.List.push(obj);\n                    });\n                }\n                if (info.NoMeasuredValue !== undefined) {\n                    Object.keys(info.NoMeasuredValue).forEach((code)=>{\n                        const qualityAbnormal = getQualityAbnormal(machine.Id, code, 2);\n                        if (!qualityAbnormal) {\n                            return;\n                        }\n                        const obj = {};\n                        obj.日時 = item.QualityAbnormalHistoryDetailedInformation.TimeFrame;\n                        obj.設備 = machine.Name;\n                        if (orderNumber !== \"\") {\n                            obj.指図番号 = orderNumber;\n                        } else {\n                            obj.指図番号 = \"-\";\n                        }\n                        obj.内容 = qualityAbnormal.Message;\n                        obj.正常合計 = info.NoMeasuredValue[code].NormalCount;\n                        obj.異常合計 = info.NoMeasuredValue[code].AbnormalCount;\n                        content.List.push(obj);\n                    });\n                }\n            });\n        });\n    });\n    content.List.sort(function(a, b) {\n        const moment = global.get(\"moment\");\n        return moment(a.日時).isAfter(moment(b.日時))? -1: 1;\n    });\n    return content;\n}\n/**\n * @param {string} value \n * @param {string} lsb\n * @return {string}\n */\nfunction getTranslateValue(value, lsb) {\n    if (lsb == \"-\") return value;\n    return (value * parseFloat(lsb)).toString();\n}\n/**\n * @param {string} machineNo \n * @param {string} no\n * @param {string} itemType\n * @return {string}\n */\nfunction getQualityAbnormal(machineNo, no, itemType) {\n    const abnormals = global.get(\"QualityAbnormals\");\n    let ret = undefined;\n    \n    abnormals.List.forEach((abnormal)=>{\n        if (abnormal.MachineId == parseInt(machineNo) && abnormal.No == parseInt(no) && abnormal.ItemType == itemType) {\n            ret = abnormal;\n        }\n    });\n    return ret;\n}\n\n// 状態\n/**\n * データ作成\n * @param {string} list\n * @return {string}\n */\nfunction makeStatusData(list) {\n    logger.debug(node, \"MakeStatusData\");\n    const content = {};\n    content.List = [];\n    list.forEach((machine)=>{\n        machine.Data.forEach((item)=>{\n            const obj = {};\n            obj.設備 = machine.Name;\n            obj.状態 = machineStates[item.MachineState.Old.State].name;\n            obj.開始時刻 = item.MachineState.Old.Start;\n            obj.終了時刻 = item.MachineState.Old.End;\n            content.List.push(obj);\n        });\n    });\n    content.List.sort(function(a, b) {\n        const moment = global.get(\"moment\");\n        const format = \"YYYY-MM-DD HH:mm:ss.S Z\";\n        return moment(a.開始時刻, format).isAfter(moment(b.開始時刻, format))? -1: 1;\n    });\n    return content;\n}\n\n// 状態 合計\n/**\n * データ作成\n * @param {string} list\n * @return {string}\n */\nfunction makeStatusTotalData(list) {\n    logger.debug(node, \"MakeStatusTotalData\");\n    const content = {};\n    content.List = [];\n    list.forEach((machine)=>{\n        machine.Data.forEach((item)=>{\n            const obj = {};\n            const date = item.ProductionDataAchievementFor1Day.TimeFrame;\n            obj.日時 = date;\n            obj.設備 = machine.Name;\n            obj.電源OFF = item.ProductionDataAchievementFor1Day.CumulativeTime.PowerOFF;\n            obj.異常 = item.ProductionDataAchievementFor1Day.CumulativeTime.Abnormal;\n            obj.警報 = item.ProductionDataAchievementFor1Day.CumulativeTime.Warning;\n            obj.自動 = item.ProductionDataAchievementFor1Day.CumulativeTime.Automatic;\n            obj.停止 = item.ProductionDataAchievementFor1Day.CumulativeTime.Stop;\n            obj[\"自動（待機）\"] = item.ProductionDataAchievementFor1Day.CumulativeTime.AutomaticStandby;\n            // obj.未接続 = item.AchievementFor1Day.CumulativeTime.Uncommunication;\n            // obj.未登録 = item.AchievementFor1Day.CumulativeTime.Unregistered;\n            // obj.通信未確立 = item.AchievementFor1Day.CumulativeTime.CommunicationNotEstablished;\n            content.List.push(obj);\n        });\n    });\n    content.List.sort(function(a, b) {\n        const moment = global.get(\"moment\");\n        return moment(a.日時).isAfter(moment(b.日時))? -1: 1;\n    });\n    return content;\n}\n","outputs":1,"noerr":0,"x":260,"y":200,"wires":[["e9260d74.8c553"]]},{"id":"3c429270.58ac3e","type":"http in","z":"26bcf22.c9c150e","name":"Analyse","url":"/Analyse","method":"get","upload":false,"swaggerDoc":"","x":70,"y":200,"wires":[["6f5e0b3e.027ac4"]]},{"id":"e9260d74.8c553","type":"http response","z":"26bcf22.c9c150e","name":"応答","statusCode":"","headers":{"Access-Control-Allow-Origin":"*"},"x":450,"y":200,"wires":[]},{"id":"d7505a04.920ec8","type":"comment","z":"26bcf22.c9c150e","name":"API","info":"","x":50,"y":140,"wires":[]},{"id":"2c67a309.28f24c","type":"inject","z":"74818e7b.3d0c9","name":"Node-RED起動時","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":true,"onceDelay":0.1,"x":130,"y":40,"wires":[["261b906b.4752a","6c052b7.c105fd4","8fe44f29.0e5ad","232f802.7222d8","559405f1.fa78dc"]]},{"id":"9a8d6e7b.a3d52","type":"inject","z":"7921df9d.6746b","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":120,"y":120,"wires":[["2f0f34d8.34484c"]]},{"id":"2f0f34d8.34484c","type":"function","z":"7921df9d.6746b","name":"Status","func":"var logger = global.get(\"logger\");\nlogger.info(node.name);\nvar moment = global.get(\"moment\");\nvar platform = global.get(\"platform\");\n\nvar machines = global.get(\"Machines\").List;\n\nvar today = moment.utc(moment.utc().add(9, \"hours\").format(\"YYYYMMDD\") + \"000000\", \"YYYYMMDDHHmmss\");\n\nmachines.forEach((machine)=>{\n\n    // MachineState\n    var now = moment.utc(moment.utc().add(9, \"hours\").format(\"YYYYMMDD\") + \"000000\", \"YYYYMMDDHHmmss\");\n    var nowState = getRandomInt(0,6);\n    var nextState = getRandomInt(0,6);\n    for(var i=0;i<40;i++){\n        var content = {\n        \t\"MachineState\": {\n        \t    \"Old\": \n        \t\t{\n        \t\t\t\"Start\": GetStateTime(now),\n        \t\t\t\"End\": GetStateTime(now.add(13,\"minutes\")),\n        \t\t\t\"State\": nowState\n        \t\t},\n        \t\t\"New\": {\n        \t\t\t\"Start\": GetStateTime(now),\n        \t\t\t\"End\": \"\",\n        \t\t\t\"State\": nextState\n        \t\t}\n        \t}\n    \t};\n        platform.record(machine.Things.MachineStatus, content, ()=>{\n        \n        });\n        nowState = nextState;\n        nextState = getRandomInt(0,6);\n    }\n});\n\n\nreturn msg;\n\nfunction GetStateTime(time){\n    return time.format(\"YYYY-MM-DD HH:mm:SS.0000000 +09:00\");\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}","outputs":1,"noerr":0,"x":270,"y":120,"wires":[[]]},{"id":"5e0465d7.aec6fc","type":"function","z":"7921df9d.6746b","name":"ProductionEndHistory","func":"var logger = global.get(\"logger\");\nlogger.info(node.name);\nvar moment = global.get(\"moment\");\nvar platform = global.get(\"platform\");\n\nvar machines = global.get(\"Machines\").List;\n\nmachines.forEach((machine)=>{\n    if(\"00\" === machine.Id){\n        return;\n    }\n    // MachineState\n    var now = moment.utc(moment.utc().add(9, \"hours\").format(\"YYYYMMDD\") + \"000000\", \"YYYYMMDDHHmmss\");\n\n    for(var i=0;i<101;i++){\n        var content = {\n            \"ProductionEndHistory\": {\n                \"Time\": GetTime(now),\n                \"DisplayUpdate\":1,\n                \"Result\":1,\n                \"Numbers\": {\n                    \"DrawNumberInfo\": {\n                        \"StartTime\": GetTime(now),\n                        \"DrawNumber\": \"D00051/~\" + getRandomInt(1,9),\n                        \"NormalCount\":getRandomInt(0, 5000),\n                        \"AbnormalCount\":getRandomInt(0, 50),\n                        \"NumberOfOccurrences\":7,\n                        \"CumulativeTime\": {\n                            \"PowerOFFState\": 1000,\n                            \"UncommunicationState\": 1000,\n                            \"AbnormalState\": 1000,\n                            \"WarningState\": 1000,\n                            \"AutomaticStandbyState\": 1000,\n                            \"AutomaticState\": 1000,\n                            \"StopState\": 1000,\n                            \"UnregisteredState\": 0\n                        }\n                    },\n                    \"OrderNumberInfo\": {\n                        \"StartTime\": GetTime(now),\n                        \"OrderNumber\": \"SASHIZU\" + getRandomInt(1,9),\n                        \"NormalCount\":getRandomInt(0, 5000),\n                        \"AbnormalCount\":getRandomInt(0, 50),\n                        \"NumberOfOccurrences\":7,\n                        \"CumulativeTime\": {\n                            \"PowerOFFState\": 1000,\n                            \"UncommunicationState\": 1000,\n                            \"AbnormalState\": 1000,\n                            \"WarningState\": 1000,\n                            \"AutomaticStandbyState\": 1000,\n                            \"AutomaticState\": 1000,\n                            \"StopState\": 1000,\n                            \"UnregisteredState\": 0\n                        }\n                    }\n                },\n                \"TackTime\": 26.2\n            }\n    \t};\n        platform.record(machine.Things.ProductionEndHistory, content, ()=>{\n        \n        });\n        now.add(1,\"hours\");\n    }\n});\n\n\nreturn msg;\n\nfunction GetTime(time){\n    return time.format(\"YYYY-MM-DD HH:mm:SS.0000000 +09:00\");\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}","outputs":1,"noerr":0,"x":320,"y":200,"wires":[[]]},{"id":"95278fc8.c4a52","type":"inject","z":"7921df9d.6746b","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":120,"y":200,"wires":[["5e0465d7.aec6fc"]]},{"id":"6ce55750.20cc68","type":"function","z":"7921df9d.6746b","name":"ProductionDataAchievementFor1Hour","func":"var logger = global.get(\"logger\");\nlogger.info(node.name);\nvar moment = global.get(\"moment\");\nvar platform = global.get(\"platform\");\n\nvar machines = global.get(\"Machines\").List;\n\nmachines.forEach((machine)=>{\n    if(\"00\" === machine.Id){\n        return;\n    }\n    // MachineState\n    var now = moment.utc(moment.utc().add(9, \"hours\").format(\"YYYYMMDD\") + \"000000\", \"YYYYMMDDHHmmss\");\n\n    for(var i=0;i<10;i++){\n        var content = {\n        \t\"ProductionDataAchievementFor1Hour\": {\n                \"TimeFrame\": GetTime(now),\n                \"ProductionResults\": getRandomInt(10000,90000),\n                \"ProductionBadResults\": getRandomInt(100,900),\n                \"EnergyConsumption\": getRandomInt(1000, 10000),\n                \"AmountOfConsumptionAir\": getRandomInt(1000, 10000)\n            }\n    \t};\n        platform.record(machine.Things.ProductionPerHour, content, ()=>{\n        \n        });\n        now.add(1,\"hours\");\n    }\n});\n\n\nreturn msg;\n\nfunction GetTime(time){\n    return time.format(\"HH:mm\");\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}","outputs":1,"noerr":0,"x":370,"y":260,"wires":[[]]},{"id":"5b2daf46.82e8c","type":"inject","z":"7921df9d.6746b","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":120,"y":260,"wires":[["6ce55750.20cc68"]]},{"id":"ccdc7bf6.5c5398","type":"inject","z":"7921df9d.6746b","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":120,"y":320,"wires":[["e34dd34.7c4fb3"]]},{"id":"e34dd34.7c4fb3","type":"function","z":"7921df9d.6746b","name":"AbnormalHistory","func":"var logger = global.get(\"logger\");\nlogger.info(node.name);\nvar moment = global.get(\"moment\");\nvar platform = global.get(\"platform\");\n\nvar machines = global.get(\"Machines\").List;\n\nmachines.forEach((machine)=>{\n    if(\"00\" === machine.Id){\n        return;\n    }\n    // MachineState\n    var now = moment.utc(moment.utc().add(9, \"hours\").format(\"YYYYMMDD\") + \"000000\", \"YYYYMMDDHHmmss\");\n\n    for(var i=0;i<101;i++){\n        var content = {\n        \t\"AbnormalHistory\": {\n                \"Occurring\": [\n                {\n                    \"Time\": GetTime(now),\n                    \"DrawNumber\": \"D051(^^)5\" + getRandomInt(1,9),\n                    \"OrderNumber\": \"SASHIZUBANGO-01\" + getRandomInt(1,9),\n                    \"Code\": getRandomInt(1,10),\n                    \"MachineState\": getRandomInt(0,8)\n                },\n                {\n                    \"Time\": GetTime(now),\n                    \"DrawNumber\": \"D051(^^)5\" + getRandomInt(1,9),\n                    \"OrderNumber\": \"SASHIZUBANGO-01\" + getRandomInt(1,9),\n                    \"Code\": getRandomInt(1,10),\n                    \"MachineState\": getRandomInt(0,8)\n                },\n                {\n                    \"Time\": GetTime(now),\n                    \"DrawNumber\": \"D051(^^)4\" + getRandomInt(1,9),\n                    \"OrderNumber\": \"SASHIZUBANGO-01\" + getRandomInt(1,9),\n                    \"Code\": getRandomInt(1,10),\n                    \"MachineState\": getRandomInt(0,8)\n                },\n                {\n                    \"Time\": GetTime(now),\n                    \"DrawNumber\": \"D051(^^)1\" + getRandomInt(1,9),\n                    \"OrderNumber\": \"SASHIZUBANGO-01\" + getRandomInt(1,9),\n                    \"Code\": getRandomInt(1,10),\n                    \"MachineState\": getRandomInt(0,8)\n                }\n                ],\n                \"New\": [\n                {\n                    \"Time\": GetTime(now),\n                    \"DrawNumber\": \"D051(^^)5\" + getRandomInt(1,9),\n                    \"OrderNumber\": \"SASHIZUBANGO-01\" + getRandomInt(1,9),\n                    \"Code\": getRandomInt(1,10),\n                    \"MachineState\": getRandomInt(0,8)\n                },\n                {\n                    \"Time\": GetTime(now),\n                    \"DrawNumber\": \"D051(^^)5\" + getRandomInt(1,9),\n                    \"OrderNumber\": \"SASHIZUBANGO-01\" + getRandomInt(1,9),\n                    \"Code\": getRandomInt(1,10),\n                    \"MachineState\": getRandomInt(0,8)\n                }\n                ]\n            }\n    \t};\n        platform.record(machine.Things.AbnormalHistory, content, ()=>{\n        \n        });\n        now.add(1,\"hours\");\n    }\n    \n    \n});\n\n\nreturn msg;\n\nfunction GetTime(time){\n    return time.format(\"YYYY-MM-DD HH:mm:SS.0000000 +09:00\");\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}","outputs":1,"noerr":0,"x":310,"y":320,"wires":[[]]},{"id":"a3ff2ac2.8bdbb8","type":"inject","z":"7921df9d.6746b","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":120,"y":380,"wires":[["931ee47e.176b98"]]},{"id":"931ee47e.176b98","type":"function","z":"7921df9d.6746b","name":"QualityAbnormalHistory","func":"var logger = global.get(\"logger\");\nlogger.info(node.name);\nvar moment = global.get(\"moment\");\nvar platform = global.get(\"platform\");\n\nvar machines = global.get(\"Machines\").List;\n\nmachines.forEach((machine)=>{\n    if(\"00\" === machine.Id){\n        return;\n    }\n    // MachineState\n    var now = moment.utc(moment.utc().add(9, \"hours\").format(\"YYYYMMDD\") + \"000000\", \"YYYYMMDDHHmmss\");\n    \n    node.warn(machine.Id + \" \" + GetTime(now) + \" \" + machine.Things.QualityAbnormalHistory);\n\n    for(var i=0;i<101;i++){\n        var content = {\n        \t\"QualityAbnormalHistory\": {\n                \"Time\": GetTime(now),\n                \"DrawNumber\": \"D00051/~\"+getRandomInt(10,1000),\n                \"OrderNumber\": \"SASHIZU\",\n                \"MeasuredValue\": [\n                    {\n                        \"No\": getRandomInt(1,10),\n                        \"Result\": getRandomNGOK(),\n                        \"Value\": getRandomInt(10,800)\n                    },\n                    {\n                        \"No\": getRandomInt(1,10),\n                        \"Result\": getRandomNGOK(),\n                        \"Value\": getRandomInt(1900,8000)\n                    },\n                     {\n                        \"No\": getRandomInt(1,10),\n                        \"Result\": getRandomNGOK(),\n                        \"Value\": getRandomInt(1900,8000)\n                     },\n                      {\n                        \"No\": getRandomInt(1,10),\n                        \"Result\": getRandomNGOK(),\n                        \"Value\": getRandomInt(1900,80000)\n                     }\n                ],\n                \"NoMeasuredValue\": [\n                    {\n                        \"No\": getRandomInt(1,10),\n                        \"Result\": getRandomNGOK()\n                    },\n                    {\n                        \"No\": getRandomInt(1,10),\n                        \"Result\": getRandomNGOK()\n                    },\n                    {\n                        \"No\": getRandomInt(1,10),\n                        \"Result\": getRandomNGOK()\n                    },\n                    {\n                        \"No\": getRandomInt(1,10),\n                        \"Result\": getRandomNGOK()\n                    },\n                ]\n            }\n    \t};\n        platform.record(machine.Things.QualityAbnormalHistory, content, ()=>{\n        \n        });\n        now.add(1,\"hours\");\n    }\n});\n\n\nreturn msg;\n\nfunction GetTime(time){\n    return time.format(\"YYYY-MM-DDTHH:mm:ss.S+09:00\");\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}\n\nfunction getRandomNGOK() {\n    var rnd = Math.floor(Math.random() * (100 - 0)) + 0;\n    var res = '';\n    if(rnd >= 50){\n        res = 'OK';\n    } else {\n        res = 'NG';\n    }\n    \n    //node.warn(rnd + res);\n\n    return res;\n}\n","outputs":1,"noerr":0,"x":330,"y":380,"wires":[[]]},{"id":"6f7d18bf.ca1f88","type":"inject","z":"7921df9d.6746b","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":120,"y":440,"wires":[["98aa50c9.faf9f"]]},{"id":"98aa50c9.faf9f","type":"function","z":"7921df9d.6746b","name":"FixedCycleAcquisitionData","func":"var logger = global.get(\"logger\");\nlogger.info(node.name);\nvar platform = global.get(\"platform\");\n\n\nvar things = [\n        [\"08609E32-929D-4530-8DF3-D08DD8442A72\",\"6B83C3D1-C773-4015-A5CD-B2E456DEE742\",\"33AEEC2C-F11E-40C9-AC54-B32D6DED9802\",\"7DC5274E-6608-4606-88BE-3346E385F3BC\"],\n        [\"30D88C7C-F4EF-439D-9407-4EA6D6358887\",\"34E6FE83-D965-42A1-A8B2-776BC3557560\",\"5CD11D0B-DB4F-4607-B056-6B818D0BD974\",\"A3810FDA-9A8A-43FE-9FE8-65CA3F30E68C\"],\n        [\"D433F2C1-6367-4115-B1DC-7C8E63707EF6\",\"2D1A4506-F3B0-48FF-AA5D-E573FECB4333\",\"7F1831A4-1BB8-4E0A-B8D6-0B82AC0360C5\",\"BB32BD96-32B9-46FE-B5C5-A44EDFBB08EB\"],\n        [\"D8994807-49A6-4E52-8DE0-2D0C5C07B90C\",\"42473BBE-E522-4476-A588-B915CD9E23E1\",\"F22771C5-9FD3-46A6-8F0D-B72B4DF34F14\",\"6CCA1205-F470-4E52-AFC8-0CB866634AE2\"],\n        [\"03D2EF68-2CDF-4424-B9C3-585B418F7290\",\"8845EB71-9037-4C95-ACF8-FCABE34B7A5C\",\"145B5F79-DDAE-4F7A-B926-26A222D3114A\",\"5305EC1F-B988-40A2-902D-DF684B877858\"],\n        [\"E5A5EE78-DD88-4B36-B721-DAEAADF75EA2\",\"CC5D8317-588F-40A9-AAC0-4B171B25784E\",\"A7E5C815-EC8F-47AA-955A-D9DCFBD09A76\",\"301BECBD-74F5-4A57-8492-647E21F2C64F\"],\n        [\"39B1B676-9211-41CE-9C38-E63AC4FADDD5\",\"368E381D-E104-4C9E-AB8E-C009CBD8C7B1\",\"414CEE72-327B-4DD9-8371-05F8CD680B1C\",\"B6B6D13C-1A68-405F-BE55-94A0EE216738\"],\n        [\"12027E74-DCA7-49E9-B0BA-90EED2297563\",\"4394CC3F-DAE9-4B44-925C-27DB6F60B091\",\"A32CF41E-8494-4446-8806-0B06332CE766\",\"F7083B71-86A2-4023-992B-C79CF59C23C0\"],\n        [\"D9DD0E55-2F71-4920-A646-3C484BC0EC88\",\"4D27FB0F-5986-44BE-92AC-69773294184E\",\"59EAEBDE-CEB5-46C7-99BF-7FD8711FA338\",\"BBCDE71D-FBFC-4428-B546-45F44EBC123C\"],\n        [\"C35216F7-3B94-4EA6-BEBF-374056ED6FEC\",\"A270BC2B-9057-40B5-B3D7-06A326B02116\",\"8A348E03-08DC-4968-B5E6-3E51F93A4FC1\",\"DF7BB92E-59EB-42F6-A2F1-343C4E70EC5C\"]\n    ];\nthings.forEach((machines, index)=>{\n    machines.forEach((thing)=>{\n        var content = {};\n        content[\"FixedCycleAcquisitionDataNo\" + (index+1)] ={\n                \"DrawNumber\": \"D00051/~\",\n                \"OrderNumber\": \"SASHIZU\",\n                \"Data\": getRandomInt(100, 1000)\n            };\n        platform.record(thing, content, ()=>{\n        \n        });\n    });\n});\n\n\nreturn msg;\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}","outputs":1,"noerr":0,"x":340,"y":440,"wires":[[]]},{"id":"7f2bcb12.7ac584","type":"inject","z":"7921df9d.6746b","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":120,"y":620,"wires":[["8494fb1f.451358"]]},{"id":"fa5fba3b.c244b8","type":"comment","z":"7921df9d.6746b","name":"毎日のリアルタイム系","info":"","x":100,"y":60,"wires":[]},{"id":"16676e45.a910d2","type":"inject","z":"7921df9d.6746b","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":120,"y":680,"wires":[["32912941.2a9ed6"]]},{"id":"32912941.2a9ed6","type":"function","z":"7921df9d.6746b","name":"AbnormalHistoryDetailedInformation","func":"var logger = global.get(\"logger\");\nlogger.info(node.name);\nvar moment = global.get(\"moment\");\nvar platform = global.get(\"platform\");\n\nvar machines = global.get(\"Machines\").List;\n\nmachines.forEach((machine)=>{\n    if(\"00\" === machine.Id){\n        return;\n    }\n    // MachineState\n    var now = moment.utc(moment.utc().add(9, \"hours\").format(\"YYYYMMDD\") + \"000000\", \"YYYYMMDDHHmmss\");\n\n    for(var i=0;i<10;i++){\n        var abnormal1 = getRandomInt(1,5).toString();\n        var abnormal2 = getRandomInt(6,10).toString();\n        var abnormal3 = getRandomInt(11,15).toString();\n        var abnormal4 = getRandomInt(16,20).toString();\n        var abnormal5 = getRandomInt(21,25).toString();\n        var content = {\n        \t\"AbnormalHistoryDetailedInformation\": {\n                \"TimeFrame\": GetToday(now),\n                \"Numbers\": {\n                    \"DrawNumbers\": {\n                    },\n                    \"OrderNumbers\": {\n                    }\n                }\n            }\n    \t};\n    \tvar errors = {};\n    \terrors[abnormal1] = {\"CumulativeTime\": getRandomInt(1000,5000)/ 1000, \"NumberOfOccurrences\": getRandomInt(1,5)};\n    \terrors[abnormal2] = {\"CumulativeTime\": getRandomInt(1000,5000)/ 1000, \"NumberOfOccurrences\": getRandomInt(1,5)};\n    \terrors[abnormal3] = {\"CumulativeTime\": getRandomInt(1000,5000)/ 1000, \"NumberOfOccurrences\": getRandomInt(1,5)};\n    \terrors[abnormal4] = {\"CumulativeTime\": getRandomInt(1000,5000)/ 1000, \"NumberOfOccurrences\": getRandomInt(1,5)};\n    \terrors[abnormal5] = {\"CumulativeTime\": getRandomInt(1000,5000)/ 1000, \"NumberOfOccurrences\": getRandomInt(1,5)};\n    \tcontent.AbnormalHistoryDetailedInformation.Numbers.DrawNumbers[\"D051xxxx\" + getRandomInt(0,9)] = errors;\n    \tcontent.AbnormalHistoryDetailedInformation.Numbers.OrderNumbers[\"SASHIZUBANGO\" + getRandomInt(0,9)] = errors;\n        platform.record(machine.Things.AbnormalHistoryDetailedInformation, content, ()=>{\n        \n        });\n    }\n});\n\n\nreturn msg;\n\nfunction GetToday(time){\n    return time.format(\"YYYY-MM-DD\");\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}","outputs":1,"noerr":0,"x":370,"y":680,"wires":[[]]},{"id":"745488a1.d16718","type":"inject","z":"7921df9d.6746b","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":120,"y":740,"wires":[["b26231e9.9d04b"]]},{"id":"b26231e9.9d04b","type":"function","z":"7921df9d.6746b","name":"QualityAbnormalHistoryDetailedInformation","func":"var logger = global.get(\"logger\");\nlogger.info(node.name);\nvar moment = global.get(\"moment\");\nvar platform = global.get(\"platform\");\n\nvar machines = global.get(\"Machines\").List;\n\nmachines.forEach((machine)=>{\n    if(\"00\" === machine.Id){\n        return;\n    }\n    // MachineState\n    var now = moment.utc(moment.utc().add(9, \"hours\").format(\"YYYYMMDD\") + \"000000\", \"YYYYMMDDHHmmss\");\n\n    for(var i=0;i<10;i++){\n        var content = {\n        \t\"QualityAbnormalHistoryDetailedInformation\": {\n                \"TimeFrame\": GetToday(now),\n                \"Numbers\": {\n                    \"DrawNumbers\": {\n                        \"ZUBAN001\": {\n                            \"MeasuredValue\": {\n                                \"1\": {\n                                    \"NormalCount\": 3,\n                                    \"AbnormalCount\": 0\n                                }\n                            },\n                            \"NoMeasuredValue\": {}\n                        },\n                        \"ZUBAN111\": {\n                            \"MeasuredValue\": {},\n                            \"NoMeasuredValue\": {\n                                \"2\": {\n                                    \"NormalCount\": 1,\n                                    \"AbnormalCount\": 0\n                                }\n                            }\n                        }\n                    },\n                    \"OrderNumbers\": {\n                        \"SASHIZU001\": {\n                            \"MeasuredValue\": {\n                                \"1\": {\n                                    \"NormalCount\": 2,\n                                    \"AbnormalCount\": 0\n                                }\n                            },\n                            \"NoMeasuredValue\": {}\n                        },\n                        \"SASHIZU011\": {\n                            \"MeasuredValue\": {\n                                \"1\": {\n                                    \"NormalCount\": 1,\n                                    \"AbnormalCount\": 0\n                                }\n                            },\n                            \"NoMeasuredValue\": {\n                                \"2\": {\n                                    \"NormalCount\": 1,\n                                    \"AbnormalCount\": 0\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n    \t};\n        platform.record(machine.Things.QualityAbnormalHistoryDetailedInformation, content, ()=>{\n        \n        });\n    }\n});\n\n\nreturn msg;\n\nfunction GetToday(time){\n    return time.format(\"YYYY-MM-DD\");\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}","outputs":1,"noerr":0,"x":390,"y":740,"wires":[[]]},{"id":"4a652d19.5d8994","type":"function","z":"7921df9d.6746b","name":"ProductionDataAchievementTotalOfTheDay","func":"var logger = global.get(\"logger\");\nlogger.info(node.name);\nvar moment = global.get(\"moment\");\nvar platform = global.get(\"platform\");\n\nvar machines = global.get(\"Machines\").List;\n\nmachines.forEach((machine)=>{\n    // MachineState\n    var now = moment.utc(moment.utc().add(9, \"hours\").format(\"YYYYMMDD\") + \"000000\", \"YYYYMMDDHHmmss\");\n\n    for(var i=0;i<10;i++){\n        var content = {\n        \t\"ProductionDataAchievementTotalOfTheDay\": {\n                \"TimeFrame\": GetToday(now),\n                \"ProductionResults\": getRandomInt(0, 1000),\n                \"ProductionBadResults\": getRandomInt(50, 500),\n                \"EnergyConsumption\": getRandomInt(10000, 20000),\n                \"AmountOfConsumptionAir\": getRandomInt(10000, 20000),\n                \"CumulativeTime\": \n                {\n                    \"PowerOFF\": getRandomInt(1,1000),\n                    \"Uncommunication\": getRandomInt(1,1000),\n                    \"Abnormal\": getRandomInt(1,1000),\n                    \"Warning\": getRandomInt(1,1000),\n                    \"AutomaticStandby\": getRandomInt(1,1000),\n                    \"Automatic\": getRandomInt(1,1000),\n                    \"Stop\": getRandomInt(1,1000),\n                    \"CommunicationNotEstablished\": getRandomInt(1,1000),\n                    \"Unregistered\": getRandomInt(1,1000)\n                }\n            }\n    \t};\n        platform.record(machine.Things.ProductionNow, content, ()=>{\n        \n        });\n        now.add(1,\"hours\");\n    }\n    \n});\n\nreturn msg;\n\nfunction GetToday(time){\n    return time.format(\"YYYY-MM-DD\");\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}","outputs":1,"noerr":0,"x":390,"y":800,"wires":[[]]},{"id":"49b63964.18fcc8","type":"inject","z":"7921df9d.6746b","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":120,"y":800,"wires":[["4a652d19.5d8994"]]},{"id":"23cb9c41.0d47e4","type":"function","z":"7921df9d.6746b","name":"ProductionDataAchievementFor1Day","func":"var logger = global.get(\"logger\");\nlogger.info(node.name);\nvar moment = global.get(\"moment\");\nvar platform = global.get(\"platform\");\n\nvar machines = global.get(\"Machines\").List;\n\nmachines.forEach((machine)=>{\n    // MachineState\n    var now = moment.utc(moment.utc().add(9, \"hours\").format(\"YYYYMMDD\") + \"000000\", \"YYYYMMDDHHmmss\");\n\n    for(var i=0;i<1;i++){\n        var content = {\n        \t\"ProductionDataAchievementFor1Day\": {\n                \"TimeFrame\": GetToday(now),\n                \"ProductionResults\": getRandomInt(100000, 200000),\n                \"ProductionBadResults\": getRandomInt(50, 500),\n                \"EnergyConsumption\": getRandomInt(10000, 20000),\n                \"AmountOfConsumptionAir\": getRandomInt(10000, 20000),\n                \"CumulativeTime\": \n                {\n                    \"PowerOFF\": 96.541,\n                    \"Uncommunication\": 15.995,\n                    \"Abnormal\": 38.852,\n                    \"Warning\": 55.18,\n                    \"AutomaticStandby\": 0.0,\n                    \"Automatic\": 10000.0,\n                    \"Stop\": 0.0,\n                    \"CommunicationNotEstablished\": 10,\n                    \"Unregistered\": 3.785\n                }\n            }\n    \t};\n        platform.record(machine.Things.ProductionPerDay, content, ()=>{\n        \n        });\n        now.add(1,\"hours\");\n    }\n});\n\n\nreturn msg;\n\nfunction GetToday(time){\n    return time.format(\"YYYY-MM-DD\");\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}","outputs":1,"noerr":0,"x":370,"y":860,"wires":[[]]},{"id":"283bb685.64116a","type":"inject","z":"7921df9d.6746b","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":120,"y":860,"wires":[["23cb9c41.0d47e4"]]},{"id":"8494fb1f.451358","type":"function","z":"7921df9d.6746b","name":"ProductionHistory","func":"var logger = global.get(\"logger\");\nlogger.info(node.name);\nvar moment = global.get(\"moment\");\nvar platform = global.get(\"platform\");\n\nvar machines = global.get(\"Machines\").List;\n\nmachines.forEach((machine)=>{\n    if(\"00\" === machine.Id){\n        return;\n    }\n    // MachineState\n    var now = moment.utc(moment.utc().add(9, \"hours\").format(\"YYYYMMDD\") + \"000000\", \"YYYYMMDDHHmmss\");\n\n    for(var i=0;i<10;i++){\n        var content = {\n            \"ProductionHistory\": {\n                \"Time\": GetTime(now),\n                \"DisplayUpdate\":1,\n                \"Result\":1,\n                \"Numbers\": {\n                    \"DrawNumberInfo\": {\n                        \"StartTime\": GetTime(now),\n                        \"DrawNumber\": \"D00051/~\" + getRandomInt(1,9),\n                        \"NormalCount\":getRandomInt(0, 5000),\n                        \"AbnormalCount\":getRandomInt(0, 50),\n                        \"NumberOfOccurrences\":7,\n                        \"CumulativeTime\": {\n                            \"PowerOFFState\": 1000,\n                            \"UncommunicationState\": 1000,\n                            \"AbnormalState\": 1000,\n                            \"WarningState\": 1000,\n                            \"AutomaticStandbyState\": 1000,\n                            \"AutomaticState\": 1000,\n                            \"StopState\": 1000,\n                            \"UnregisteredState\": 0\n                        }\n                    },\n                    \"OrderNumberInfo\": {\n                        \"StartTime\": GetTime(now),\n                        \"OrderNumber\": \"SASHIZU\" + getRandomInt(1,9),\n                        \"NormalCount\":getRandomInt(0, 5000),\n                        \"AbnormalCount\":getRandomInt(0, 50),\n                        \"NumberOfOccurrences\":7,\n                        \"CumulativeTime\": {\n                            \"PowerOFFState\": 1000,\n                            \"UncommunicationState\": 1000,\n                            \"AbnormalState\": 1000,\n                            \"WarningState\": 1000,\n                            \"AutomaticStandbyState\": 1000,\n                            \"AutomaticState\": 1000,\n                            \"StopState\": 1000,\n                            \"UnregisteredState\": 0\n                        }\n                    }\n                },\n                \"TackTime\": getRandomInt(20,30)\n            }\n    \t};\n        platform.record(machine.Things.ProductionHistory, content, ()=>{\n        \n        });\n        now.add(1,\"hours\");\n    }\n});\n\n\nreturn msg;\n\nfunction GetTime(time){\n    return time.format(\"YYYY-MM-DD HH:mm:SS.0000000 +09:00\");\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}","outputs":1,"noerr":0,"x":310,"y":620,"wires":[[]]},{"id":"5aaf1212.5cbebc","type":"function","z":"dee5dc2.0abc72","name":"グローバルにセット","func":"global.set(\"ApplicationConfig\", msg.payload);\nreturn msg;\n","outputs":1,"noerr":0,"x":600,"y":180,"wires":[["f74da171.e794a"]]},{"id":"38020804.529a38","type":"json","z":"dee5dc2.0abc72","name":"","property":"payload","action":"","pretty":false,"x":390,"y":180,"wires":[["5aaf1212.5cbebc"]]},{"id":"7416402e.02c08","type":"file in","z":"dee5dc2.0abc72","name":"アプリコンフィグ設定ファイル","filename":"/data/projects/node-red-ckd-drug-gas-swage-system/json/applicationConfig.json","format":"utf8","chunk":false,"sendError":false,"x":170,"y":180,"wires":[["38020804.529a38"]]},{"id":"5b4619f4.358c48","type":"json","z":"8e70d73f.ce8c58","name":"","property":"payload","action":"","pretty":false,"x":360,"y":180,"wires":[["c81a1324.12f7"]]},{"id":"2b1aea8.424d516","type":"file in","z":"8e70d73f.ce8c58","name":"コンフィグ設定ファイル","filename":"/data/projects/node-red-ckd-drug-gas-swage-system/json/andonConfig.json","format":"utf8","chunk":false,"sendError":false,"x":170,"y":180,"wires":[["5b4619f4.358c48"]]},{"id":"c81a1324.12f7","type":"function","z":"8e70d73f.ce8c58","name":"フローにセット","func":"flow.set(\"Config\", msg.payload);\nreturn msg;\n\n","outputs":1,"noerr":0,"x":570,"y":180,"wires":[[]]},{"id":"73e448b8.85e498","type":"function","z":"444211fa.db8a7","name":"フローにセット","func":"flow.set(\"Config\", msg.payload);\nreturn msg;\n","outputs":1,"noerr":0,"x":540,"y":200,"wires":[[]]},{"id":"8c5f3fcc.6e8b8","type":"json","z":"444211fa.db8a7","name":"","property":"payload","action":"","pretty":false,"x":370,"y":200,"wires":[["73e448b8.85e498"]]},{"id":"986a1ed0.09c27","type":"file in","z":"444211fa.db8a7","name":"コンフィグ設定ファイル","filename":"/data/projects/node-red-ckd-drug-gas-swage-system/json/lineConfig.json","format":"utf8","chunk":false,"sendError":false,"x":170,"y":200,"wires":[["8c5f3fcc.6e8b8"]]},{"id":"40512177.58d9d","type":"json","z":"710f7aed.d2ab74","name":"","property":"payload","action":"","pretty":false,"x":370,"y":160,"wires":[["cd62cf26.be4e1"]]},{"id":"1e761936.e7bff7","type":"file in","z":"710f7aed.d2ab74","name":"コンフィグ設定ファイル","filename":"/data/projects/node-red-ckd-drug-gas-swage-system/json/soutiConfig.json","format":"utf8","chunk":false,"sendError":false,"x":160,"y":160,"wires":[["40512177.58d9d"]]},{"id":"cd62cf26.be4e1","type":"function","z":"710f7aed.d2ab74","name":"フローにセット","func":"flow.set(\"Config\", msg.payload);\nreturn msg;\n","outputs":1,"noerr":0,"x":540,"y":160,"wires":[[]]},{"id":"c4e67ffb.254b9","type":"json","z":"74818e7b.3d0c9","name":"","property":"payload","action":"","pretty":false,"x":590,"y":160,"wires":[["5b36115a.d3ee9"]]},{"id":"5b36115a.d3ee9","type":"function","z":"74818e7b.3d0c9","name":"グローバルにセット","func":"global.set(\"MachineState\", msg.payload);\nreturn msg;\n","outputs":1,"noerr":0,"x":780,"y":160,"wires":[[]]},{"id":"261b906b.4752a","type":"file in","z":"74818e7b.3d0c9","name":"装置状態マスタ設定ファイル","filename":"/data/projects/node-red-ckd-drug-gas-swage-system/json/machineState.json","format":"utf8","chunk":false,"sendError":false,"x":380,"y":160,"wires":[["c4e67ffb.254b9"]]},{"id":"6c052b7.c105fd4","type":"file in","z":"74818e7b.3d0c9","name":"異常マスタ設定ファイル","filename":"/data/projects/node-red-ckd-drug-gas-swage-system/json/abnormals.json","format":"utf8","chunk":false,"sendError":false,"x":390,"y":200,"wires":[["5503332c.c6289c"]]},{"id":"5503332c.c6289c","type":"json","z":"74818e7b.3d0c9","name":"","property":"payload","action":"","pretty":false,"x":590,"y":200,"wires":[["2cb59716.d4b398"]]},{"id":"2cb59716.d4b398","type":"function","z":"74818e7b.3d0c9","name":"グローバルにセット","func":"global.set(\"Abnormals\", msg.payload);\nreturn msg;\n","outputs":1,"noerr":0,"x":780,"y":200,"wires":[[]]},{"id":"8fe44f29.0e5ad","type":"file in","z":"74818e7b.3d0c9","name":"品質異常マスタ設定ファイル","filename":"/data/projects/node-red-ckd-drug-gas-swage-system/json/qualityAbnormals.json","format":"utf8","chunk":false,"sendError":false,"x":380,"y":240,"wires":[["2aebbd6b.4eea12"]]},{"id":"2aebbd6b.4eea12","type":"json","z":"74818e7b.3d0c9","name":"","property":"payload","action":"","pretty":false,"x":590,"y":240,"wires":[["5926d1f8.f9bb9"]]},{"id":"5926d1f8.f9bb9","type":"function","z":"74818e7b.3d0c9","name":"グローバルにセット","func":"global.set(\"QualityAbnormals\", msg.payload);\nreturn msg;\n","outputs":1,"noerr":0,"x":780,"y":240,"wires":[[]]},{"id":"232f802.7222d8","type":"file in","z":"74818e7b.3d0c9","name":"装置マスタ設定ファイル","filename":"/data/projects/node-red-ckd-drug-gas-swage-system/json/machines.json","format":"utf8","chunk":false,"sendError":false,"x":390,"y":280,"wires":[["ea37ee6f.3a18b"]]},{"id":"ea37ee6f.3a18b","type":"json","z":"74818e7b.3d0c9","name":"","property":"payload","action":"","pretty":false,"x":590,"y":280,"wires":[["b69d4106.c52d7"]]},{"id":"b69d4106.c52d7","type":"function","z":"74818e7b.3d0c9","name":"グローバルにセット","func":"global.set(\"Machines\", msg.payload);\nreturn msg;\n","outputs":1,"noerr":0,"x":780,"y":280,"wires":[[]]},{"id":"559405f1.fa78dc","type":"file in","z":"74818e7b.3d0c9","name":"PostThingsマスタ設定ファイル","filename":"/data/projects/node-red-ckd-drug-gas-swage-system/json/postThings.json","format":"utf8","chunk":false,"sendError":false,"x":370,"y":320,"wires":[["ca4315d1.96d518"]]},{"id":"ca4315d1.96d518","type":"json","z":"74818e7b.3d0c9","name":"","property":"payload","action":"","pretty":false,"x":590,"y":320,"wires":[["2943496d.fee9d6"]]},{"id":"2943496d.fee9d6","type":"function","z":"74818e7b.3d0c9","name":"グローバルにセット","func":"global.set(\"PostThings\", msg.payload);\nreturn msg;\n","outputs":1,"noerr":0,"x":780,"y":320,"wires":[[]]},{"id":"60e549f1.8fa0d8","type":"function","z":"7921df9d.6746b","name":"ProductionDataAchievementTotalOfTheDayDetailedInformation","func":"var logger = global.get(\"logger\");\nlogger.info(node.name);\nvar moment = global.get(\"moment\");\nvar platform = global.get(\"platform\");\n\nvar machines = global.get(\"Machines\").List;\n\nvar tomorrow = moment.utc(moment.utc().add(33, \"hours\").format(\"YYYYMMDD\") + \"000000\", \"YYYYMMDDHHmmss\");\n\nmachines.forEach((machine) => {\n    // MachineState\n    var now = moment.utc(moment.utc().add(9, \"hours\").format(\"YYYYMMDD\") + \"000000\", \"YYYYMMDDHHmmss\");\n\n    for (var i = 0; i < 1; i++) {\n        var content = {\n            \"ProductionDataAchievementTotalOfTheDayDetailedInformation\": {\n                \"TimeFrame\": GetToday(now),\n                \"Numbers\": {\n                    \"DrawNumbers\": {\n                        \"D051xxxx1\": {\n                            \"Start\": GetToday(now) + \" 09:12:11.2032482 +09:00\",\n                            \"End\": GetToday(now) + \" 12:12:19.2032482 +09:00\",\n                            \"ProductionResults\": getRandomInt(1, 999999999),\n                            \"ProductionBadResults\": getRandomInt(1, 999)\n                        },\n                        \"D051xxxx2\": {\n                            \"Start\": GetToday(now) + \" 12:12:19.2032482 +09:00\",\n                            \"End\": GetToday(now) + \" 19:12:19.2032482 +09:00\",\n                            \"ProductionResults\": getRandomInt(1, 999999999),\n                            \"ProductionBadResults\": getRandomInt(1, 999)\n                        },\n                        \"-\": {\n                            \"Start\": GetToday(now) + \" 19:12:19.2032482 +09:00\",\n                            \"End\": GetToday(tomorrow) + \" 00:00:00.0000000 +09:00\",\n                            \"ProductionResults\": getRandomInt(1, 999999999),\n                            \"ProductionBadResults\": getRandomInt(1, 999)\n                        }\n                    },\n                    \"OrderNumbers\": {\n                        \"SASHIZUxxxx1\": {\n                            \"Start\": GetToday(now) + \" 09:12:11.2032482 +09:00\",\n                            \"End\": GetToday(now) + \" 12:12:19.2032482 +09:00\",\n                            \"ProductionResults\": getRandomInt(1, 999999999),\n                            \"ProductionBadResults\": getRandomInt(1, 999)\n                        },\n                        \"SASHIZUxxxx2\": {\n                            \"Start\": GetToday(now) + \" 12:12:19.2032482 +09:00\",\n                            \"End\": GetToday(now) + \" 19:12:19.2032482 +09:00\",\n                            \"ProductionResults\": getRandomInt(1, 999999999),\n                            \"ProductionBadResults\": getRandomInt(1, 999)\n                        },\n                        \"-\": {\n                            \"Start\": GetToday(now) + \" 19:12:19.2032482 +09:00\",\n                            \"End\": GetToday(tomorrow) + \" 00:00:00.0000000 +09:00\",\n                            \"ProductionResults\": getRandomInt(1, 999999999),\n                            \"ProductionBadResults\": getRandomInt(1, 999)\n                        }\n                    }\n                }\n            }\n        }\n        platform.record(machine.Things.ProductionDataAchievementTotalOfTheDayDetailedInformation, content, () => {\n        });\n        now.add(1, \"hours\");\n    }\n});\n\n\nreturn msg;\n\nfunction GetToday(time) {\n    return time.format(\"YYYY-MM-DD\");\n}\n\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}","outputs":1,"noerr":0,"x":450,"y":920,"wires":[[]]},{"id":"c07de1df.f5c0b","type":"inject","z":"7921df9d.6746b","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":120,"y":920,"wires":[["60e549f1.8fa0d8"]]}]