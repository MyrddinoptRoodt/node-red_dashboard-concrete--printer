"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.exploreCertificateRevocationList = exports.readCertificateRevocationList = exports.readNameForCrl = void 0;
const fs = require("fs");
const util_1 = require("util");
const asn1_1 = require("./asn1");
const crypto_utils_1 = require("./crypto_utils");
function readNameForCrl(buffer, block) {
    return asn1_1._readDirectoryName(buffer, block);
}
exports.readNameForCrl = readNameForCrl;
function _readTbsCertList(buffer, blockInfo) {
    const blocks = asn1_1._readStruct(buffer, blockInfo);
    const version = asn1_1._readIntegerValue(buffer, blocks[0]);
    const signature = asn1_1._readAlgorithmIdentifier(buffer, blocks[1]);
    const issuer = readNameForCrl(buffer, blocks[2]);
    const issuerFingerprint = asn1_1.formatBuffer2DigetHexWithColum(crypto_utils_1.makeSHA1Thumbprint(asn1_1._getBlock(buffer, blocks[2])));
    const thisUpdate = asn1_1._readTime(buffer, blocks[3]);
    const nextUpdate = asn1_1._readTime(buffer, blocks[4]);
    const revokedCertificates = [];
    if (blocks[5] && blocks[5].tag < 0x80) {
        const list = asn1_1._readStruct(buffer, blocks[5]);
        for (const r of list) {
            // sometime blocks[5] doesn't exits .. in this case
            const rr = asn1_1._readStruct(buffer, r);
            const userCertificate = asn1_1.formatBuffer2DigetHexWithColum(asn1_1._readLongIntegerValue(buffer, rr[0]));
            const revocationDate = asn1_1._readTime(buffer, rr[1]);
            revokedCertificates.push({
                revocationDate,
                userCertificate,
            });
        }
    }
    const ext0 = asn1_1._findBlockAtIndex(blocks, 0);
    return { issuer, issuerFingerprint, thisUpdate, nextUpdate, signature, revokedCertificates };
}
function readCertificateRevocationList(filename) {
    return __awaiter(this, void 0, void 0, function* () {
        const crl = yield util_1.promisify(fs.readFile)(filename);
        if (crl[0] === 0x30 && crl[1] === 0x82) {
            // der format
            return crl;
        }
        const raw_crl = crl.toString();
        return crypto_utils_1.convertPEMtoDER(raw_crl);
    });
}
exports.readCertificateRevocationList = readCertificateRevocationList;
function exploreCertificateRevocationList(crl) {
    const blockInfo = asn1_1.readTag(crl, 0);
    const blocks = asn1_1._readStruct(crl, blockInfo);
    const tbsCertList = _readTbsCertList(crl, blocks[0]);
    const signatureAlgorithm = asn1_1._readAlgorithmIdentifier(crl, blocks[1]);
    const signatureValue = asn1_1._readSignatureValueBin(crl, blocks[2]);
    return { tbsCertList, signatureAlgorithm, signatureValue };
}
exports.exploreCertificateRevocationList = exploreCertificateRevocationList;
//# sourceMappingURL=explore_certificate_revocation_list.js.map