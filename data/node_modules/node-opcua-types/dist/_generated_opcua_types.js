"use strict";
// --------- This code has been automatically generated !!! 2022-06-11T07:26:23.946Z
/**
 * @module node-opcua-types
 */
// tslint:disable:no-this-assignment
// tslint:disable:max-classes-per-file
// tslint:disable:no-empty-interface
// tslint:disable:no-trailing-whitespace
// tslint:disable:array-type
// tslint:disable:object-literal-sort-keys
// tslint:disable:max-line-length
Object.defineProperty(exports, "__esModule", { value: true });
exports.WriterGroupTransportDataType = exports.BrokerDataSetWriterTransportDataType = exports.DataSetWriterTransportDataType = exports.BrokerDataSetReaderTransportDataType = exports._enumerationBrokerTransportQualityOfService = exports.BrokerTransportQualityOfService = exports.DataSetReaderTransportDataType = exports.BrokerConnectionTransportDataType = exports.ConnectionTransportDataType = exports.AttributeOperand = exports.RelativePath = exports.RelativePathElement = exports.Argument = exports.ApplicationDescription = exports._enumerationApplicationType = exports.ApplicationType = exports.AnonymousIdentityToken = exports.UserIdentityToken = exports.Annotation = exports.AliasNameDataType = exports.AggregateFilterResult = exports.MonitoringFilterResult = exports.AggregateFilter = exports.MonitoringFilter = exports.AggregateConfiguration = exports.AdditionalParametersType = exports.KeyValuePair = exports.AddReferencesResponse = exports.AddReferencesRequest = exports.AddReferencesItem = exports.AddNodesResponse = exports.AddNodesResult = exports.AddNodesRequest = exports.AddNodesItem = exports._enumerationNodeClass = exports.NodeClass = exports.ActivateSessionResponse = exports.ResponseHeader = exports.ActivateSessionRequest = exports.SignedSoftwareCertificate = exports.SignatureData = exports.RequestHeader = exports.SimpleAttributeOperand = exports.FilterOperand = exports.AxisInformation = exports._enumerationAxisScaleEnumeration = exports.AxisScaleEnumeration = exports.Range = exports.EUInformation = exports.DataTypeDefinition = void 0;
exports.CreateSubscriptionRequest = exports.CreateSessionResponse = exports.EndpointDescription = exports.UserTokenPolicy = exports._enumerationUserTokenType = exports.UserTokenType = exports._enumerationMessageSecurityMode = exports.MessageSecurityMode = exports.CreateSessionRequest = exports.CreateMonitoredItemsResponse = exports.MonitoredItemCreateResult = exports.CreateMonitoredItemsRequest = exports.MonitoredItemCreateRequest = exports.MonitoringParameters = exports._enumerationMonitoringMode = exports.MonitoringMode = exports.ReadValueId = exports.ContentFilterResult = exports.ContentFilterElementResult = exports.ContentFilter = exports.ContentFilterElement = exports._enumerationFilterOperator = exports.FilterOperator = exports.ConfigurationVersionDataType = exports.ComplexNumberType = exports.CloseSessionResponse = exports.CloseSessionRequest = exports.CloseSecureChannelResponse = exports.CloseSecureChannelRequest = exports.ChannelSecurityToken = exports.CartesianCoordinates = exports.CancelResponse = exports.CancelRequest = exports.CallResponse = exports.CallRequest = exports.CallMethodResult = exports.CallMethodRequest = exports.BuildInfo = exports.BrowseResponse = exports.BrowseRequest = exports.ViewDescription = exports.BrowsePathResult = exports.BrowsePathTarget = exports.BrowsePath = exports.BrowseNextResponse = exports.BrowseResult = exports.ReferenceDescription = exports.BrowseNextRequest = exports.BrowseDescription = exports.BrokerWriterGroupTransportDataType = void 0;
exports.DeleteNodesResponse = exports.DeleteNodesRequest = exports.DeleteNodesItem = exports.DeleteMonitoredItemsResponse = exports.DeleteMonitoredItemsRequest = exports.DeleteEventDetails = exports.DeleteAtTimeDetails = exports.HistoryUpdateDetails = exports.DecimalDataType = exports.DatagramWriterGroupTransportDataType = exports.DatagramConnectionTransportDataType = exports.DataTypeNode = exports.TypeNode = exports.Node = exports.ReferenceNode = exports.RolePermissionType = exports._enumerationPermissionType = exports.PermissionType = exports.DataTypeAttributes = exports.NodeAttributes = exports.DataSetWriterMessageDataType = exports.DataSetWriterDataType = exports.DataSetReaderMessageDataType = exports.DataSetReaderDataType = exports._enumerationDataSetFieldContentMask = exports.DataSetFieldContentMask = exports.DataSetMetaDataType = exports.FieldMetaData = exports._enumerationDataSetFieldFlags = exports.DataSetFieldFlags = exports.DataTypeSchemaHeader = exports.SimpleTypeDescription = exports.EnumDescription = exports.EnumDefinition = exports.EnumField = exports.EnumValueType = exports.StructureDescription = exports.StructureDefinition = exports.StructureField = exports._enumerationStructureType = exports.StructureType = exports.DataTypeDescription = exports.DataChangeNotification = exports.MonitoredItemNotification = exports.NotificationData = exports.DataChangeFilter = exports._enumerationDataChangeTrigger = exports.DataChangeTrigger = exports.CurrencyUnitType = exports.CreateSubscriptionResponse = void 0;
exports.IssuedIdentityToken = exports.InstanceNode = exports.IdentityMappingRuleType = exports._enumerationIdentityCriteriaType = exports.IdentityCriteriaType = exports.HistoryUpdateResponse = exports.HistoryUpdateResult = exports.HistoryUpdateRequest = exports.HistoryReadResponse = exports.HistoryReadResult = exports.HistoryReadRequest = exports.HistoryReadValueId = exports.HistoryReadDetails = exports.HistoryModifiedData = exports.ModificationInfo = exports._enumerationHistoryUpdateType = exports.HistoryUpdateType = exports.HistoryEvent = exports.HistoryEventFieldList = exports.HistoryData = exports.GetEndpointsResponse = exports.GetEndpointsRequest = exports.GenericAttributes = exports.GenericAttributeValue = exports.Frame = exports.FindServersResponse = exports.FindServersRequest = exports.FindServersOnNetworkResponse = exports.ServerOnNetwork = exports.FindServersOnNetworkRequest = exports.FieldTargetDataType = exports._enumerationOverrideValueHandling = exports.OverrideValueHandling = exports.EventNotificationList = exports.EventFilterResult = exports.EventFilter = exports.EventFieldList = exports.EphemeralKeyType = exports.EndpointUrlListDataType = exports.EndpointType = exports.EndpointConfiguration = exports.ElementOperand = exports.DoubleComplexNumberType = exports.DiscoveryConfiguration = exports.DeleteSubscriptionsResponse = exports.DeleteSubscriptionsRequest = exports.DeleteReferencesResponse = exports.DeleteReferencesRequest = exports.DeleteReferencesItem = exports.DeleteRawModifiedDetails = void 0;
exports.PublishedDataSetSourceDataType = exports.PublishResponse = exports.PublishRequest = exports.SubscriptionAcknowledgement = exports.PubSubConfigurationDataType = exports.PubSubConnectionDataType = exports.ReaderGroupDataType = exports.WriterGroupDataType = exports.PubSubGroupDataType = exports.PublishedDataSetDataType = exports.ProgramDiagnosticDataType = exports.ProgramDiagnostic2DataType = exports.StatusResult = exports.ParsingResult = exports.Orientation = exports.OptionSet = exports.OpenSecureChannelResponse = exports.OpenSecureChannelRequest = exports._enumerationSecurityTokenRequestType = exports.SecurityTokenRequestType = exports.ObjectTypeNode = exports.ObjectTypeAttributes = exports.ObjectNode = exports.ObjectAttributes = exports.NotificationMessage = exports.NodeTypeDescription = exports.QueryDataDescription = exports.NodeReference = exports.NetworkGroupDataType = exports.NetworkAddressUrlDataType = exports.NetworkAddressDataType = exports.ModifySubscriptionResponse = exports.ModifySubscriptionRequest = exports.ModifyMonitoredItemsResponse = exports.MonitoredItemModifyResult = exports.ModifyMonitoredItemsRequest = exports.MonitoredItemModifyRequest = exports.ModelChangeStructureDataType = exports.MethodNode = exports.MethodAttributes = exports.MdnsDiscoveryConfiguration = exports.LiteralOperand = exports.JsonWriterGroupMessageDataType = exports.WriterGroupMessageDataType = exports.JsonDataSetWriterMessageDataType = exports.JsonDataSetReaderMessageDataType = exports._enumerationJsonDataSetMessageContentMask = exports.JsonDataSetMessageContentMask = exports._enumerationJsonNetworkMessageContentMask = exports.JsonNetworkMessageContentMask = void 0;
exports.SubscribedDataSetDataType = exports.StatusChangeNotification = exports.SetTriggeringResponse = exports.SetTriggeringRequest = exports.SetPublishingModeResponse = exports.SetPublishingModeRequest = exports.SetMonitoringModeResponse = exports.SetMonitoringModeRequest = exports.SessionlessInvokeResponseType = exports.SessionlessInvokeRequestType = exports.SessionSecurityDiagnosticsDataType = exports.SessionDiagnosticsDataType = exports.ServiceFault = exports.ServiceCounterDataType = exports.ServerStatusDataType = exports.ServerDiagnosticsSummaryDataType = exports.SemanticChangeStructureDataType = exports.SamplingIntervalDiagnosticsDataType = exports.RepublishResponse = exports.RepublishRequest = exports.RegisterServerResponse = exports.RegisterServerRequest = exports.RegisterServer2Response = exports.RegisterServer2Request = exports.RegisteredServer = exports.RegisterNodesResponse = exports.RegisterNodesRequest = exports.ReferenceTypeNode = exports.ReferenceTypeAttributes = exports.RedundantServerDataType = exports._enumerationServerState = exports.ServerState = exports.ReaderGroupTransportDataType = exports.ReaderGroupMessageDataType = exports.ReadResponse = exports.ReadRequest = exports.ReadRawModifiedDetails = exports.ReadProcessedDetails = exports.ReadEventDetails = exports.ReadAtTimeDetails = exports.ReadAnnotationDataDetails = exports.RationalNumber = exports.QueryNextResponse = exports.QueryNextRequest = exports.QueryFirstResponse = exports.QueryFirstRequest = exports.QueryDataSet = exports.PublishedEventsDataType = exports.PublishedDataItemsDataType = exports.PublishedVariableDataType = void 0;
exports.XVType = exports.X509IdentityToken = exports.WriteResponse = exports.WriteRequest = exports.WriteValue = exports.ViewNode = exports.ViewAttributes = exports.VariableTypeNode = exports.VariableTypeAttributes = exports.VariableNode = exports.VariableAttributes = exports.UserNameIdentityToken = exports.UpdateStructureDataDetails = exports.UpdateEventDetails = exports.UpdateDataDetails = exports._enumerationPerformUpdateType = exports.PerformUpdateType = exports.UnregisterNodesResponse = exports.UnregisterNodesRequest = exports.Union = exports.UadpWriterGroupMessageDataType = exports._enumerationDataSetOrderingType = exports.DataSetOrderingType = exports.UadpDataSetWriterMessageDataType = exports.UadpDataSetReaderMessageDataType = exports._enumerationUadpDataSetMessageContentMask = exports.UadpDataSetMessageContentMask = exports._enumerationUadpNetworkMessageContentMask = exports.UadpNetworkMessageContentMask = exports.UABinaryFileDataType = exports.TrustListDataType = exports.TranslateBrowsePathsToNodeIdsResponse = exports.TranslateBrowsePathsToNodeIdsRequest = exports.TransferSubscriptionsResponse = exports.TransferSubscriptionsRequest = exports.TransferResult = exports.TimeZoneDataType = exports.ThreeDVector = exports.Vector = exports.ThreeDFrame = exports.ThreeDOrientation = exports.ThreeDCartesianCoordinates = exports.TargetVariablesDataType = exports.SubscriptionDiagnosticsDataType = exports.SubscribedDataSetMirrorDataType = void 0;
const node_opcua_assert_1 = require("node-opcua-assert");
const node_opcua_basic_types_1 = require("node-opcua-basic-types");
const node_opcua_data_model_1 = require("node-opcua-data-model");
const node_opcua_data_value_1 = require("node-opcua-data-value");
const node_opcua_extension_object_1 = require("node-opcua-extension-object");
const node_opcua_factory_1 = require("node-opcua-factory");
const node_opcua_nodeid_1 = require("node-opcua-nodeid");
const node_opcua_numeric_range_1 = require("node-opcua-numeric-range");
const node_opcua_status_code_1 = require("node-opcua-status-code");
const node_opcua_variant_1 = require("node-opcua-variant");
class DataTypeDefinition extends node_opcua_factory_1.BaseUAObject {
    constructor(options) {
        options = options; // do not remove
        super();
    }
}
exports.DataTypeDefinition = DataTypeDefinition;
// --------------------------------------------------------------------------------------------
const schemaEUInformation = (0, node_opcua_factory_1.buildStructuredType)({
    name: "EUInformation",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "namespaceUri",
            fieldType: "UAString",
        },
        {
            name: "unitId",
            fieldType: "Int32",
        },
        {
            name: "displayName",
            fieldType: "LocalizedText",
        },
        {
            name: "description",
            fieldType: "LocalizedText",
        },
    ]
});
class EUInformation extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.namespaceUri = null;
            this.unitId = 0;
            this.displayName = new node_opcua_data_model_1.LocalizedText(null);
            this.description = new node_opcua_data_model_1.LocalizedText(null);
            return;
        }
        const schema = EUInformation.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.namespaceUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.namespaceUri);
        this.unitId = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.unitId);
        this.displayName = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.displayName);
        this.description = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.description);
    }
    static get schema() { return schemaEUInformation; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.namespaceUri, stream);
        (0, node_opcua_basic_types_1.encodeInt32)(this.unitId, stream);
        (0, node_opcua_data_model_1.encodeLocalizedText)(this.displayName, stream);
        (0, node_opcua_data_model_1.encodeLocalizedText)(this.description, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.namespaceUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.namespaceUri);
        this.unitId = (0, node_opcua_basic_types_1.decodeInt32)(stream, this.unitId);
        this.displayName = (0, node_opcua_data_model_1.decodeLocalizedText)(stream, this.displayName);
        this.description = (0, node_opcua_data_model_1.decodeLocalizedText)(stream, this.description);
    }
    get schema() { return schemaEUInformation; }
}
exports.EUInformation = EUInformation;
EUInformation.possibleFields = [
    "namespaceUri",
    "unitId",
    "displayName",
    "description"
];
EUInformation.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(887, 0);
EUInformation.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(889, 0);
EUInformation.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(888, 0);
EUInformation.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15376, 0);
EUInformation.schema.dataTypeNodeId = EUInformation.dataTypeNodeId;
EUInformation.schema.encodingDefaultBinary = EUInformation.encodingDefaultBinary;
EUInformation.schema.encodingDefaultXml = EUInformation.encodingDefaultXml;
EUInformation.schema.encodingDefaultJson = EUInformation.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(EUInformation.dataTypeNodeId, "EUInformation", EUInformation);
// --------------------------------------------------------------------------------------------
const schemaRange = (0, node_opcua_factory_1.buildStructuredType)({
    name: "Range",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "low",
            fieldType: "Double",
        },
        {
            name: "high",
            fieldType: "Double",
        },
    ]
});
class Range extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.low = 0;
            this.high = 0;
            return;
        }
        const schema = Range.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.low = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.low);
        this.high = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.high);
    }
    static get schema() { return schemaRange; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.low, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.high, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.low = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.low);
        this.high = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.high);
    }
    get schema() { return schemaRange; }
}
exports.Range = Range;
Range.possibleFields = [
    "low",
    "high"
];
Range.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(884, 0);
Range.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(886, 0);
Range.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(885, 0);
Range.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15375, 0);
Range.schema.dataTypeNodeId = Range.dataTypeNodeId;
Range.schema.encodingDefaultBinary = Range.encodingDefaultBinary;
Range.schema.encodingDefaultXml = Range.encodingDefaultXml;
Range.schema.encodingDefaultJson = Range.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(Range.dataTypeNodeId, "Range", Range);
// --------------------------------------------------------------------------------------------
var AxisScaleEnumeration;
(function (AxisScaleEnumeration) {
    AxisScaleEnumeration[AxisScaleEnumeration["Linear"] = 0] = "Linear";
    AxisScaleEnumeration[AxisScaleEnumeration["Log"] = 1] = "Log";
    AxisScaleEnumeration[AxisScaleEnumeration["Ln"] = 2] = "Ln";
    AxisScaleEnumeration[AxisScaleEnumeration["Invalid"] = 4294967295] = "Invalid";
})(AxisScaleEnumeration = exports.AxisScaleEnumeration || (exports.AxisScaleEnumeration = {}));
const schemaAxisScaleEnumeration = {
    enumValues: AxisScaleEnumeration,
    flaggable: false,
    minValue: 0,
    maxValue: 2,
    name: "AxisScaleEnumeration"
};
function decodeAxisScaleEnumeration(stream, _value) {
    let value = stream.readUInt32();
    value = (value < schemaAxisScaleEnumeration.minValue || value > schemaAxisScaleEnumeration.maxValue) ? AxisScaleEnumeration.Invalid : value;
    return value;
}
function encodeAxisScaleEnumeration(value, stream) {
    stream.writeUInt32(value);
}
exports._enumerationAxisScaleEnumeration = (0, node_opcua_factory_1.registerEnumeration)(schemaAxisScaleEnumeration);
(0, node_opcua_assert_1.assert)(exports._enumerationAxisScaleEnumeration.isFlaggable === false);
// --------------------------------------------------------------------------------------------
const schemaAxisInformation = (0, node_opcua_factory_1.buildStructuredType)({
    name: "AxisInformation",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "engineeringUnits",
            fieldType: "EUInformation",
        },
        {
            name: "euRange",
            fieldType: "Range",
        },
        {
            name: "title",
            fieldType: "LocalizedText",
        },
        {
            name: "axisScaleType",
            fieldType: "AxisScaleEnumeration",
        },
        {
            name: "axisSteps",
            fieldType: "Double",
            isArray: true
        },
    ]
});
class AxisInformation extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.engineeringUnits = new EUInformation(null);
            this.euRange = new Range(null);
            this.title = new node_opcua_data_model_1.LocalizedText(null);
            this.axisScaleType = 0;
            this.axisSteps = [];
            return;
        }
        const schema = AxisInformation.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.engineeringUnits = new EUInformation(options.engineeringUnits);
        this.euRange = new Range(options.euRange);
        this.title = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.title);
        this.axisScaleType = this.setAxisScaleType((0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.axisScaleType));
        this.axisSteps = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[4], options === null || options === void 0 ? void 0 : options.axisSteps);
    }
    static get schema() { return schemaAxisInformation; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.engineeringUnits.encode(stream);
        this.euRange.encode(stream);
        (0, node_opcua_data_model_1.encodeLocalizedText)(this.title, stream);
        encodeAxisScaleEnumeration(this.axisScaleType, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.axisSteps, stream, node_opcua_basic_types_1.encodeDouble);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.engineeringUnits.decode(stream);
        this.euRange.decode(stream);
        this.title = (0, node_opcua_data_model_1.decodeLocalizedText)(stream, this.title);
        this.axisScaleType = decodeAxisScaleEnumeration(stream, this.axisScaleType);
        this.axisSteps = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeDouble);
    }
    // Define Enumeration setters
    setAxisScaleType(value) {
        const coercedValue = exports._enumerationAxisScaleEnumeration.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to AxisScaleEnumeration :" + value);
        }
        this.axisScaleType = coercedValue.value;
        return this.axisScaleType;
    }
    get schema() { return schemaAxisInformation; }
}
exports.AxisInformation = AxisInformation;
AxisInformation.possibleFields = [
    "engineeringUnits",
    "euRange",
    "title",
    "axisScaleType",
    "axisSteps"
];
AxisInformation.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12079, 0);
AxisInformation.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12089, 0);
AxisInformation.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12081, 0);
AxisInformation.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15379, 0);
AxisInformation.schema.dataTypeNodeId = AxisInformation.dataTypeNodeId;
AxisInformation.schema.encodingDefaultBinary = AxisInformation.encodingDefaultBinary;
AxisInformation.schema.encodingDefaultXml = AxisInformation.encodingDefaultXml;
AxisInformation.schema.encodingDefaultJson = AxisInformation.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(AxisInformation.dataTypeNodeId, "AxisInformation", AxisInformation);
// --------------------------------------------------------------------------------------------
const schemaFilterOperand = (0, node_opcua_factory_1.buildStructuredType)({
    name: "FilterOperand",
    baseType: "ExtensionObject",
    fields: []
});
class FilterOperand extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            return;
        }
        const schema = FilterOperand.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
    }
    static get schema() { return schemaFilterOperand; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
    }
    get schema() { return schemaFilterOperand; }
}
exports.FilterOperand = FilterOperand;
FilterOperand.possibleFields = [];
FilterOperand.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(589, 0);
FilterOperand.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(591, 0);
FilterOperand.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(590, 0);
FilterOperand.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15206, 0);
FilterOperand.schema.dataTypeNodeId = FilterOperand.dataTypeNodeId;
FilterOperand.schema.encodingDefaultBinary = FilterOperand.encodingDefaultBinary;
FilterOperand.schema.encodingDefaultXml = FilterOperand.encodingDefaultXml;
FilterOperand.schema.encodingDefaultJson = FilterOperand.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(FilterOperand.dataTypeNodeId, "FilterOperand", FilterOperand);
// --------------------------------------------------------------------------------------------
const schemaSimpleAttributeOperand = (0, node_opcua_factory_1.buildStructuredType)({
    name: "SimpleAttributeOperand",
    baseType: "FilterOperand",
    fields: [
        {
            name: "typeDefinitionId",
            fieldType: "NodeId",
        },
        {
            name: "browsePath",
            fieldType: "QualifiedName",
            isArray: true
        },
        {
            name: "attributeId",
            fieldType: "UInt32",
        },
        {
            name: "indexRange",
            fieldType: "NumericRange",
        },
    ]
});
class SimpleAttributeOperand extends FilterOperand {
    constructor(options) {
        super(options);
        if (options === null) {
            this.typeDefinitionId = new node_opcua_nodeid_1.NodeId(null);
            this.browsePath = [];
            this.attributeId = 0;
            this.indexRange = new node_opcua_numeric_range_1.NumericRange(null);
            return;
        }
        const schema = SimpleAttributeOperand.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.typeDefinitionId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.typeDefinitionId);
        this.browsePath = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.browsePath);
        this.attributeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.attributeId);
        this.indexRange = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.indexRange);
    }
    static get schema() { return schemaSimpleAttributeOperand; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.typeDefinitionId, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.browsePath, stream, node_opcua_data_model_1.encodeQualifiedName);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.attributeId, stream);
        (0, node_opcua_numeric_range_1.encodeNumericRange)(this.indexRange, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.typeDefinitionId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.typeDefinitionId);
        this.browsePath = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeQualifiedName);
        this.attributeId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.attributeId);
        this.indexRange = (0, node_opcua_numeric_range_1.decodeNumericRange)(stream, this.indexRange);
    }
    get schema() { return schemaSimpleAttributeOperand; }
}
exports.SimpleAttributeOperand = SimpleAttributeOperand;
SimpleAttributeOperand.possibleFields = [
    "typeDefinitionId",
    "browsePath",
    "attributeId",
    "indexRange"
];
SimpleAttributeOperand.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(601, 0);
SimpleAttributeOperand.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(603, 0);
SimpleAttributeOperand.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(602, 0);
SimpleAttributeOperand.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15210, 0);
SimpleAttributeOperand.schema.dataTypeNodeId = SimpleAttributeOperand.dataTypeNodeId;
SimpleAttributeOperand.schema.encodingDefaultBinary = SimpleAttributeOperand.encodingDefaultBinary;
SimpleAttributeOperand.schema.encodingDefaultXml = SimpleAttributeOperand.encodingDefaultXml;
SimpleAttributeOperand.schema.encodingDefaultJson = SimpleAttributeOperand.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(SimpleAttributeOperand.dataTypeNodeId, "SimpleAttributeOperand", SimpleAttributeOperand);
// --------------------------------------------------------------------------------------------
const schemaRequestHeader = (0, node_opcua_factory_1.buildStructuredType)({
    name: "RequestHeader",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "authenticationToken",
            fieldType: "NodeId",
        },
        {
            name: "timestamp",
            fieldType: "DateTime",
        },
        {
            name: "requestHandle",
            fieldType: "UInt32",
        },
        {
            name: "returnDiagnostics",
            fieldType: "UInt32",
        },
        {
            name: "auditEntryId",
            fieldType: "UAString",
        },
        {
            name: "timeoutHint",
            fieldType: "UInt32",
        },
        {
            name: "additionalHeader",
            fieldType: "ExtensionObject",
        },
    ]
});
class RequestHeader extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.authenticationToken = new node_opcua_nodeid_1.NodeId(null);
            this.timestamp = new Date();
            this.requestHandle = 0;
            this.returnDiagnostics = 0;
            this.auditEntryId = null;
            this.timeoutHint = 0;
            this.additionalHeader = null;
            return;
        }
        const schema = RequestHeader.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.authenticationToken = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.authenticationToken);
        this.timestamp = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.timestamp);
        this.requestHandle = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.requestHandle);
        this.returnDiagnostics = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.returnDiagnostics);
        this.auditEntryId = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.auditEntryId);
        this.timeoutHint = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.timeoutHint);
        this.additionalHeader = (0, node_opcua_factory_1.initialize_field)(schema.fields[6], options === null || options === void 0 ? void 0 : options.additionalHeader);
    }
    static get schema() { return schemaRequestHeader; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.authenticationToken, stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.timestamp, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.requestHandle, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.returnDiagnostics, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.auditEntryId, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.timeoutHint, stream);
        (0, node_opcua_extension_object_1.encodeExtensionObject)(this.additionalHeader, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.authenticationToken = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.authenticationToken);
        this.timestamp = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.timestamp);
        this.requestHandle = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.requestHandle);
        this.returnDiagnostics = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.returnDiagnostics);
        this.auditEntryId = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.auditEntryId);
        this.timeoutHint = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.timeoutHint);
        this.additionalHeader = (0, node_opcua_extension_object_1.decodeExtensionObject)(stream, this.additionalHeader);
    }
    get schema() { return schemaRequestHeader; }
}
exports.RequestHeader = RequestHeader;
RequestHeader.possibleFields = [
    "authenticationToken",
    "timestamp",
    "requestHandle",
    "returnDiagnostics",
    "auditEntryId",
    "timeoutHint",
    "additionalHeader"
];
RequestHeader.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(389, 0);
RequestHeader.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(391, 0);
RequestHeader.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(390, 0);
RequestHeader.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15088, 0);
RequestHeader.schema.dataTypeNodeId = RequestHeader.dataTypeNodeId;
RequestHeader.schema.encodingDefaultBinary = RequestHeader.encodingDefaultBinary;
RequestHeader.schema.encodingDefaultXml = RequestHeader.encodingDefaultXml;
RequestHeader.schema.encodingDefaultJson = RequestHeader.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(RequestHeader.dataTypeNodeId, "RequestHeader", RequestHeader);
// --------------------------------------------------------------------------------------------
const schemaSignatureData = (0, node_opcua_factory_1.buildStructuredType)({
    name: "SignatureData",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "algorithm",
            fieldType: "UAString",
        },
        {
            name: "signature",
            fieldType: "ByteString",
        },
    ]
});
class SignatureData extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.algorithm = null;
            this.signature = Buffer.alloc(0);
            return;
        }
        const schema = SignatureData.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.algorithm = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.algorithm);
        this.signature = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.signature);
    }
    static get schema() { return schemaSignatureData; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.algorithm, stream);
        (0, node_opcua_basic_types_1.encodeByteString)(this.signature, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.algorithm = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.algorithm);
        this.signature = (0, node_opcua_basic_types_1.decodeByteString)(stream, this.signature);
    }
    get schema() { return schemaSignatureData; }
}
exports.SignatureData = SignatureData;
SignatureData.possibleFields = [
    "algorithm",
    "signature"
];
SignatureData.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(456, 0);
SignatureData.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(458, 0);
SignatureData.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(457, 0);
SignatureData.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15137, 0);
SignatureData.schema.dataTypeNodeId = SignatureData.dataTypeNodeId;
SignatureData.schema.encodingDefaultBinary = SignatureData.encodingDefaultBinary;
SignatureData.schema.encodingDefaultXml = SignatureData.encodingDefaultXml;
SignatureData.schema.encodingDefaultJson = SignatureData.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(SignatureData.dataTypeNodeId, "SignatureData", SignatureData);
// --------------------------------------------------------------------------------------------
const schemaSignedSoftwareCertificate = (0, node_opcua_factory_1.buildStructuredType)({
    name: "SignedSoftwareCertificate",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "certificateData",
            fieldType: "ByteString",
        },
        {
            name: "signature",
            fieldType: "ByteString",
        },
    ]
});
class SignedSoftwareCertificate extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.certificateData = Buffer.alloc(0);
            this.signature = Buffer.alloc(0);
            return;
        }
        const schema = SignedSoftwareCertificate.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.certificateData = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.certificateData);
        this.signature = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.signature);
    }
    static get schema() { return schemaSignedSoftwareCertificate; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeByteString)(this.certificateData, stream);
        (0, node_opcua_basic_types_1.encodeByteString)(this.signature, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.certificateData = (0, node_opcua_basic_types_1.decodeByteString)(stream, this.certificateData);
        this.signature = (0, node_opcua_basic_types_1.decodeByteString)(stream, this.signature);
    }
    get schema() { return schemaSignedSoftwareCertificate; }
}
exports.SignedSoftwareCertificate = SignedSoftwareCertificate;
SignedSoftwareCertificate.possibleFields = [
    "certificateData",
    "signature"
];
SignedSoftwareCertificate.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(344, 0);
SignedSoftwareCertificate.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(346, 0);
SignedSoftwareCertificate.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(345, 0);
SignedSoftwareCertificate.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15136, 0);
SignedSoftwareCertificate.schema.dataTypeNodeId = SignedSoftwareCertificate.dataTypeNodeId;
SignedSoftwareCertificate.schema.encodingDefaultBinary = SignedSoftwareCertificate.encodingDefaultBinary;
SignedSoftwareCertificate.schema.encodingDefaultXml = SignedSoftwareCertificate.encodingDefaultXml;
SignedSoftwareCertificate.schema.encodingDefaultJson = SignedSoftwareCertificate.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(SignedSoftwareCertificate.dataTypeNodeId, "SignedSoftwareCertificate", SignedSoftwareCertificate);
// --------------------------------------------------------------------------------------------
const schemaActivateSessionRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ActivateSessionRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "clientSignature",
            fieldType: "SignatureData",
        },
        {
            name: "clientSoftwareCertificates",
            fieldType: "SignedSoftwareCertificate",
            isArray: true
        },
        {
            name: "localeIds",
            fieldType: "UAString",
            isArray: true
        },
        {
            name: "userIdentityToken",
            fieldType: "ExtensionObject",
        },
        {
            name: "userTokenSignature",
            fieldType: "SignatureData",
        },
    ]
});
class ActivateSessionRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.clientSignature = new SignatureData(null);
            this.clientSoftwareCertificates = null; /* null array */
            this.localeIds = [];
            this.userIdentityToken = null;
            this.userTokenSignature = new SignatureData(null);
            return;
        }
        const schema = ActivateSessionRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.clientSignature = new SignatureData(options.clientSignature);
        this.clientSoftwareCertificates = []; // should default
        if (options.clientSoftwareCertificates) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.clientSoftwareCertificates));
            this.clientSoftwareCertificates = options.clientSoftwareCertificates.map((e) => new SignedSoftwareCertificate(e));
        }
        this.localeIds = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[3], options === null || options === void 0 ? void 0 : options.localeIds);
        this.userIdentityToken = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.userIdentityToken);
        this.userTokenSignature = new SignatureData(options.userTokenSignature);
    }
    static get schema() { return schemaActivateSessionRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        this.clientSignature.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.clientSoftwareCertificates, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.localeIds, stream, node_opcua_basic_types_1.encodeUAString);
        (0, node_opcua_extension_object_1.encodeExtensionObject)(this.userIdentityToken, stream);
        this.userTokenSignature.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.clientSignature.decode(stream);
        this.clientSoftwareCertificates = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new SignedSoftwareCertificate(null);
            obj.decode(stream1);
            return obj;
        });
        this.localeIds = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUAString);
        this.userIdentityToken = (0, node_opcua_extension_object_1.decodeExtensionObject)(stream, this.userIdentityToken);
        this.userTokenSignature.decode(stream);
    }
    get schema() { return schemaActivateSessionRequest; }
}
exports.ActivateSessionRequest = ActivateSessionRequest;
ActivateSessionRequest.possibleFields = [
    "requestHeader",
    "clientSignature",
    "clientSoftwareCertificates",
    "localeIds",
    "userIdentityToken",
    "userTokenSignature"
];
ActivateSessionRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(465, 0);
ActivateSessionRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(467, 0);
ActivateSessionRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(466, 0);
ActivateSessionRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15145, 0);
ActivateSessionRequest.schema.dataTypeNodeId = ActivateSessionRequest.dataTypeNodeId;
ActivateSessionRequest.schema.encodingDefaultBinary = ActivateSessionRequest.encodingDefaultBinary;
ActivateSessionRequest.schema.encodingDefaultXml = ActivateSessionRequest.encodingDefaultXml;
ActivateSessionRequest.schema.encodingDefaultJson = ActivateSessionRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ActivateSessionRequest.dataTypeNodeId, "ActivateSessionRequest", ActivateSessionRequest);
// --------------------------------------------------------------------------------------------
const schemaResponseHeader = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ResponseHeader",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "timestamp",
            fieldType: "DateTime",
        },
        {
            name: "requestHandle",
            fieldType: "UInt32",
        },
        {
            name: "serviceResult",
            fieldType: "StatusCode",
        },
        {
            name: "serviceDiagnostics",
            fieldType: "DiagnosticInfo",
        },
        {
            name: "stringTable",
            fieldType: "UAString",
            isArray: true
        },
        {
            name: "additionalHeader",
            fieldType: "ExtensionObject",
        },
    ]
});
class ResponseHeader extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.timestamp = new Date();
            this.requestHandle = 0;
            this.serviceResult = node_opcua_status_code_1.StatusCodes.Good;
            this.serviceDiagnostics = null;
            this.stringTable = [];
            this.additionalHeader = null;
            return;
        }
        const schema = ResponseHeader.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.timestamp = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.timestamp);
        this.requestHandle = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.requestHandle);
        this.serviceResult = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.serviceResult);
        this.serviceDiagnostics = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.serviceDiagnostics);
        this.stringTable = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[4], options === null || options === void 0 ? void 0 : options.stringTable);
        this.additionalHeader = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.additionalHeader);
    }
    static get schema() { return schemaResponseHeader; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.timestamp, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.requestHandle, stream);
        (0, node_opcua_status_code_1.encodeStatusCode)(this.serviceResult, stream);
        (0, node_opcua_data_model_1.encodeDiagnosticInfo)(this.serviceDiagnostics, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.stringTable, stream, node_opcua_basic_types_1.encodeUAString);
        (0, node_opcua_extension_object_1.encodeExtensionObject)(this.additionalHeader, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.timestamp = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.timestamp);
        this.requestHandle = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.requestHandle);
        this.serviceResult = (0, node_opcua_status_code_1.decodeStatusCode)(stream, this.serviceResult);
        this.serviceDiagnostics = (0, node_opcua_data_model_1.decodeDiagnosticInfo)(stream, this.serviceDiagnostics);
        this.stringTable = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUAString);
        this.additionalHeader = (0, node_opcua_extension_object_1.decodeExtensionObject)(stream, this.additionalHeader);
    }
    get schema() { return schemaResponseHeader; }
}
exports.ResponseHeader = ResponseHeader;
ResponseHeader.possibleFields = [
    "timestamp",
    "requestHandle",
    "serviceResult",
    "serviceDiagnostics",
    "stringTable",
    "additionalHeader"
];
ResponseHeader.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(392, 0);
ResponseHeader.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(394, 0);
ResponseHeader.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(393, 0);
ResponseHeader.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15089, 0);
ResponseHeader.schema.dataTypeNodeId = ResponseHeader.dataTypeNodeId;
ResponseHeader.schema.encodingDefaultBinary = ResponseHeader.encodingDefaultBinary;
ResponseHeader.schema.encodingDefaultXml = ResponseHeader.encodingDefaultXml;
ResponseHeader.schema.encodingDefaultJson = ResponseHeader.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ResponseHeader.dataTypeNodeId, "ResponseHeader", ResponseHeader);
// --------------------------------------------------------------------------------------------
const schemaActivateSessionResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ActivateSessionResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "serverNonce",
            fieldType: "ByteString",
        },
        {
            name: "results",
            fieldType: "StatusCode",
            isArray: true
        },
        {
            name: "diagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class ActivateSessionResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.serverNonce = Buffer.alloc(0);
            this.results = [];
            this.diagnosticInfos = [];
            return;
        }
        const schema = ActivateSessionResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.serverNonce = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.serverNonce);
        this.results = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.results);
        this.diagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[3], options === null || options === void 0 ? void 0 : options.diagnosticInfos);
    }
    static get schema() { return schemaActivateSessionResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeByteString)(this.serverNonce, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.results, stream, node_opcua_status_code_1.encodeStatusCode);
        (0, node_opcua_basic_types_1.encodeArray)(this.diagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.serverNonce = (0, node_opcua_basic_types_1.decodeByteString)(stream, this.serverNonce);
        this.results = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_status_code_1.decodeStatusCode);
        this.diagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaActivateSessionResponse; }
}
exports.ActivateSessionResponse = ActivateSessionResponse;
ActivateSessionResponse.possibleFields = [
    "responseHeader",
    "serverNonce",
    "results",
    "diagnosticInfos"
];
ActivateSessionResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(468, 0);
ActivateSessionResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(470, 0);
ActivateSessionResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(469, 0);
ActivateSessionResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15146, 0);
ActivateSessionResponse.schema.dataTypeNodeId = ActivateSessionResponse.dataTypeNodeId;
ActivateSessionResponse.schema.encodingDefaultBinary = ActivateSessionResponse.encodingDefaultBinary;
ActivateSessionResponse.schema.encodingDefaultXml = ActivateSessionResponse.encodingDefaultXml;
ActivateSessionResponse.schema.encodingDefaultJson = ActivateSessionResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ActivateSessionResponse.dataTypeNodeId, "ActivateSessionResponse", ActivateSessionResponse);
// --------------------------------------------------------------------------------------------
var NodeClass;
(function (NodeClass) {
    NodeClass[NodeClass["Unspecified"] = 0] = "Unspecified";
    NodeClass[NodeClass["Object"] = 1] = "Object";
    NodeClass[NodeClass["Variable"] = 2] = "Variable";
    NodeClass[NodeClass["Method"] = 4] = "Method";
    NodeClass[NodeClass["ObjectType"] = 8] = "ObjectType";
    NodeClass[NodeClass["VariableType"] = 16] = "VariableType";
    NodeClass[NodeClass["ReferenceType"] = 32] = "ReferenceType";
    NodeClass[NodeClass["DataType"] = 64] = "DataType";
    NodeClass[NodeClass["View"] = 128] = "View";
})(NodeClass = exports.NodeClass || (exports.NodeClass = {}));
const schemaNodeClass = {
    enumValues: NodeClass,
    flaggable: true,
    name: "NodeClass"
};
function decodeNodeClass(stream, _value) {
    return stream.readUInt32();
}
function encodeNodeClass(value, stream) {
    stream.writeUInt32(value);
}
exports._enumerationNodeClass = (0, node_opcua_factory_1.registerEnumeration)(schemaNodeClass);
(0, node_opcua_assert_1.assert)(exports._enumerationNodeClass.isFlaggable === true);
// --------------------------------------------------------------------------------------------
const schemaAddNodesItem = (0, node_opcua_factory_1.buildStructuredType)({
    name: "AddNodesItem",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "parentNodeId",
            fieldType: "ExpandedNodeId",
        },
        {
            name: "referenceTypeId",
            fieldType: "NodeId",
        },
        {
            name: "requestedNewNodeId",
            fieldType: "ExpandedNodeId",
        },
        {
            name: "browseName",
            fieldType: "QualifiedName",
        },
        {
            name: "nodeClass",
            fieldType: "NodeClass",
        },
        {
            name: "nodeAttributes",
            fieldType: "ExtensionObject",
        },
        {
            name: "typeDefinition",
            fieldType: "ExpandedNodeId",
        },
    ]
});
class AddNodesItem extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.parentNodeId = new node_opcua_nodeid_1.ExpandedNodeId(null);
            this.referenceTypeId = new node_opcua_nodeid_1.NodeId(null);
            this.requestedNewNodeId = new node_opcua_nodeid_1.ExpandedNodeId(null);
            this.browseName = new node_opcua_data_model_1.QualifiedName(null);
            this.nodeClass = 0;
            this.nodeAttributes = null;
            this.typeDefinition = new node_opcua_nodeid_1.ExpandedNodeId(null);
            return;
        }
        const schema = AddNodesItem.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.parentNodeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.parentNodeId);
        this.referenceTypeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.referenceTypeId);
        this.requestedNewNodeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.requestedNewNodeId);
        this.browseName = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.browseName);
        this.nodeClass = this.setNodeClass((0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.nodeClass));
        this.nodeAttributes = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.nodeAttributes);
        this.typeDefinition = (0, node_opcua_factory_1.initialize_field)(schema.fields[6], options === null || options === void 0 ? void 0 : options.typeDefinition);
    }
    static get schema() { return schemaAddNodesItem; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeExpandedNodeId)(this.parentNodeId, stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.referenceTypeId, stream);
        (0, node_opcua_basic_types_1.encodeExpandedNodeId)(this.requestedNewNodeId, stream);
        (0, node_opcua_data_model_1.encodeQualifiedName)(this.browseName, stream);
        encodeNodeClass(this.nodeClass, stream);
        (0, node_opcua_extension_object_1.encodeExtensionObject)(this.nodeAttributes, stream);
        (0, node_opcua_basic_types_1.encodeExpandedNodeId)(this.typeDefinition, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.parentNodeId = (0, node_opcua_basic_types_1.decodeExpandedNodeId)(stream, this.parentNodeId);
        this.referenceTypeId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.referenceTypeId);
        this.requestedNewNodeId = (0, node_opcua_basic_types_1.decodeExpandedNodeId)(stream, this.requestedNewNodeId);
        this.browseName = (0, node_opcua_data_model_1.decodeQualifiedName)(stream, this.browseName);
        this.nodeClass = decodeNodeClass(stream, this.nodeClass);
        this.nodeAttributes = (0, node_opcua_extension_object_1.decodeExtensionObject)(stream, this.nodeAttributes);
        this.typeDefinition = (0, node_opcua_basic_types_1.decodeExpandedNodeId)(stream, this.typeDefinition);
    }
    // Define Enumeration setters
    setNodeClass(value) {
        const coercedValue = exports._enumerationNodeClass.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to NodeClass :" + value);
        }
        this.nodeClass = coercedValue.value;
        return this.nodeClass;
    }
    get schema() { return schemaAddNodesItem; }
}
exports.AddNodesItem = AddNodesItem;
AddNodesItem.possibleFields = [
    "parentNodeId",
    "referenceTypeId",
    "requestedNewNodeId",
    "browseName",
    "nodeClass",
    "nodeAttributes",
    "typeDefinition"
];
AddNodesItem.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(376, 0);
AddNodesItem.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(378, 0);
AddNodesItem.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(377, 0);
AddNodesItem.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15165, 0);
AddNodesItem.schema.dataTypeNodeId = AddNodesItem.dataTypeNodeId;
AddNodesItem.schema.encodingDefaultBinary = AddNodesItem.encodingDefaultBinary;
AddNodesItem.schema.encodingDefaultXml = AddNodesItem.encodingDefaultXml;
AddNodesItem.schema.encodingDefaultJson = AddNodesItem.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(AddNodesItem.dataTypeNodeId, "AddNodesItem", AddNodesItem);
// --------------------------------------------------------------------------------------------
const schemaAddNodesRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "AddNodesRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "nodesToAdd",
            fieldType: "AddNodesItem",
            isArray: true
        },
    ]
});
class AddNodesRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.nodesToAdd = null; /* null array */
            return;
        }
        const schema = AddNodesRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.nodesToAdd = []; // should default
        if (options.nodesToAdd) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.nodesToAdd));
            this.nodesToAdd = options.nodesToAdd.map((e) => new AddNodesItem(e));
        }
    }
    static get schema() { return schemaAddNodesRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.nodesToAdd, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.nodesToAdd = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new AddNodesItem(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaAddNodesRequest; }
}
exports.AddNodesRequest = AddNodesRequest;
AddNodesRequest.possibleFields = [
    "requestHeader",
    "nodesToAdd"
];
AddNodesRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(486, 0);
AddNodesRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(488, 0);
AddNodesRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(487, 0);
AddNodesRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15167, 0);
AddNodesRequest.schema.dataTypeNodeId = AddNodesRequest.dataTypeNodeId;
AddNodesRequest.schema.encodingDefaultBinary = AddNodesRequest.encodingDefaultBinary;
AddNodesRequest.schema.encodingDefaultXml = AddNodesRequest.encodingDefaultXml;
AddNodesRequest.schema.encodingDefaultJson = AddNodesRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(AddNodesRequest.dataTypeNodeId, "AddNodesRequest", AddNodesRequest);
// --------------------------------------------------------------------------------------------
const schemaAddNodesResult = (0, node_opcua_factory_1.buildStructuredType)({
    name: "AddNodesResult",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "statusCode",
            fieldType: "StatusCode",
        },
        {
            name: "addedNodeId",
            fieldType: "NodeId",
        },
    ]
});
class AddNodesResult extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.statusCode = node_opcua_status_code_1.StatusCodes.Good;
            this.addedNodeId = new node_opcua_nodeid_1.NodeId(null);
            return;
        }
        const schema = AddNodesResult.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.statusCode = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.statusCode);
        this.addedNodeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.addedNodeId);
    }
    static get schema() { return schemaAddNodesResult; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_status_code_1.encodeStatusCode)(this.statusCode, stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.addedNodeId, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.statusCode = (0, node_opcua_status_code_1.decodeStatusCode)(stream, this.statusCode);
        this.addedNodeId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.addedNodeId);
    }
    get schema() { return schemaAddNodesResult; }
}
exports.AddNodesResult = AddNodesResult;
AddNodesResult.possibleFields = [
    "statusCode",
    "addedNodeId"
];
AddNodesResult.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(483, 0);
AddNodesResult.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(485, 0);
AddNodesResult.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(484, 0);
AddNodesResult.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15166, 0);
AddNodesResult.schema.dataTypeNodeId = AddNodesResult.dataTypeNodeId;
AddNodesResult.schema.encodingDefaultBinary = AddNodesResult.encodingDefaultBinary;
AddNodesResult.schema.encodingDefaultXml = AddNodesResult.encodingDefaultXml;
AddNodesResult.schema.encodingDefaultJson = AddNodesResult.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(AddNodesResult.dataTypeNodeId, "AddNodesResult", AddNodesResult);
// --------------------------------------------------------------------------------------------
const schemaAddNodesResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "AddNodesResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "results",
            fieldType: "AddNodesResult",
            isArray: true
        },
        {
            name: "diagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class AddNodesResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.results = null; /* null array */
            this.diagnosticInfos = [];
            return;
        }
        const schema = AddNodesResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.results = []; // should default
        if (options.results) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.results));
            this.results = options.results.map((e) => new AddNodesResult(e));
        }
        this.diagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.diagnosticInfos);
    }
    static get schema() { return schemaAddNodesResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.results, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.diagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.results = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new AddNodesResult(null);
            obj.decode(stream1);
            return obj;
        });
        this.diagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaAddNodesResponse; }
}
exports.AddNodesResponse = AddNodesResponse;
AddNodesResponse.possibleFields = [
    "responseHeader",
    "results",
    "diagnosticInfos"
];
AddNodesResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(489, 0);
AddNodesResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(491, 0);
AddNodesResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(490, 0);
AddNodesResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15168, 0);
AddNodesResponse.schema.dataTypeNodeId = AddNodesResponse.dataTypeNodeId;
AddNodesResponse.schema.encodingDefaultBinary = AddNodesResponse.encodingDefaultBinary;
AddNodesResponse.schema.encodingDefaultXml = AddNodesResponse.encodingDefaultXml;
AddNodesResponse.schema.encodingDefaultJson = AddNodesResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(AddNodesResponse.dataTypeNodeId, "AddNodesResponse", AddNodesResponse);
// --------------------------------------------------------------------------------------------
const schemaAddReferencesItem = (0, node_opcua_factory_1.buildStructuredType)({
    name: "AddReferencesItem",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "sourceNodeId",
            fieldType: "NodeId",
        },
        {
            name: "referenceTypeId",
            fieldType: "NodeId",
        },
        {
            name: "isForward",
            fieldType: "UABoolean",
        },
        {
            name: "targetServerUri",
            fieldType: "UAString",
        },
        {
            name: "targetNodeId",
            fieldType: "ExpandedNodeId",
        },
        {
            name: "targetNodeClass",
            fieldType: "NodeClass",
        },
    ]
});
class AddReferencesItem extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.sourceNodeId = new node_opcua_nodeid_1.NodeId(null);
            this.referenceTypeId = new node_opcua_nodeid_1.NodeId(null);
            this.isForward = false;
            this.targetServerUri = null;
            this.targetNodeId = new node_opcua_nodeid_1.ExpandedNodeId(null);
            this.targetNodeClass = 0;
            return;
        }
        const schema = AddReferencesItem.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.sourceNodeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.sourceNodeId);
        this.referenceTypeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.referenceTypeId);
        this.isForward = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.isForward);
        this.targetServerUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.targetServerUri);
        this.targetNodeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.targetNodeId);
        this.targetNodeClass = this.setTargetNodeClass((0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.targetNodeClass));
    }
    static get schema() { return schemaAddReferencesItem; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.sourceNodeId, stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.referenceTypeId, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.isForward, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.targetServerUri, stream);
        (0, node_opcua_basic_types_1.encodeExpandedNodeId)(this.targetNodeId, stream);
        encodeNodeClass(this.targetNodeClass, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.sourceNodeId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.sourceNodeId);
        this.referenceTypeId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.referenceTypeId);
        this.isForward = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.isForward);
        this.targetServerUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.targetServerUri);
        this.targetNodeId = (0, node_opcua_basic_types_1.decodeExpandedNodeId)(stream, this.targetNodeId);
        this.targetNodeClass = decodeNodeClass(stream, this.targetNodeClass);
    }
    // Define Enumeration setters
    setTargetNodeClass(value) {
        const coercedValue = exports._enumerationNodeClass.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to NodeClass :" + value);
        }
        this.targetNodeClass = coercedValue.value;
        return this.targetNodeClass;
    }
    get schema() { return schemaAddReferencesItem; }
}
exports.AddReferencesItem = AddReferencesItem;
AddReferencesItem.possibleFields = [
    "sourceNodeId",
    "referenceTypeId",
    "isForward",
    "targetServerUri",
    "targetNodeId",
    "targetNodeClass"
];
AddReferencesItem.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(379, 0);
AddReferencesItem.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(381, 0);
AddReferencesItem.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(380, 0);
AddReferencesItem.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15169, 0);
AddReferencesItem.schema.dataTypeNodeId = AddReferencesItem.dataTypeNodeId;
AddReferencesItem.schema.encodingDefaultBinary = AddReferencesItem.encodingDefaultBinary;
AddReferencesItem.schema.encodingDefaultXml = AddReferencesItem.encodingDefaultXml;
AddReferencesItem.schema.encodingDefaultJson = AddReferencesItem.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(AddReferencesItem.dataTypeNodeId, "AddReferencesItem", AddReferencesItem);
// --------------------------------------------------------------------------------------------
const schemaAddReferencesRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "AddReferencesRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "referencesToAdd",
            fieldType: "AddReferencesItem",
            isArray: true
        },
    ]
});
class AddReferencesRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.referencesToAdd = null; /* null array */
            return;
        }
        const schema = AddReferencesRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.referencesToAdd = []; // should default
        if (options.referencesToAdd) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.referencesToAdd));
            this.referencesToAdd = options.referencesToAdd.map((e) => new AddReferencesItem(e));
        }
    }
    static get schema() { return schemaAddReferencesRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.referencesToAdd, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.referencesToAdd = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new AddReferencesItem(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaAddReferencesRequest; }
}
exports.AddReferencesRequest = AddReferencesRequest;
AddReferencesRequest.possibleFields = [
    "requestHeader",
    "referencesToAdd"
];
AddReferencesRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(492, 0);
AddReferencesRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(494, 0);
AddReferencesRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(493, 0);
AddReferencesRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15170, 0);
AddReferencesRequest.schema.dataTypeNodeId = AddReferencesRequest.dataTypeNodeId;
AddReferencesRequest.schema.encodingDefaultBinary = AddReferencesRequest.encodingDefaultBinary;
AddReferencesRequest.schema.encodingDefaultXml = AddReferencesRequest.encodingDefaultXml;
AddReferencesRequest.schema.encodingDefaultJson = AddReferencesRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(AddReferencesRequest.dataTypeNodeId, "AddReferencesRequest", AddReferencesRequest);
// --------------------------------------------------------------------------------------------
const schemaAddReferencesResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "AddReferencesResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "results",
            fieldType: "StatusCode",
            isArray: true
        },
        {
            name: "diagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class AddReferencesResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.results = [];
            this.diagnosticInfos = [];
            return;
        }
        const schema = AddReferencesResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.results = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.results);
        this.diagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.diagnosticInfos);
    }
    static get schema() { return schemaAddReferencesResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.results, stream, node_opcua_status_code_1.encodeStatusCode);
        (0, node_opcua_basic_types_1.encodeArray)(this.diagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.results = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_status_code_1.decodeStatusCode);
        this.diagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaAddReferencesResponse; }
}
exports.AddReferencesResponse = AddReferencesResponse;
AddReferencesResponse.possibleFields = [
    "responseHeader",
    "results",
    "diagnosticInfos"
];
AddReferencesResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(495, 0);
AddReferencesResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(497, 0);
AddReferencesResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(496, 0);
AddReferencesResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15171, 0);
AddReferencesResponse.schema.dataTypeNodeId = AddReferencesResponse.dataTypeNodeId;
AddReferencesResponse.schema.encodingDefaultBinary = AddReferencesResponse.encodingDefaultBinary;
AddReferencesResponse.schema.encodingDefaultXml = AddReferencesResponse.encodingDefaultXml;
AddReferencesResponse.schema.encodingDefaultJson = AddReferencesResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(AddReferencesResponse.dataTypeNodeId, "AddReferencesResponse", AddReferencesResponse);
// --------------------------------------------------------------------------------------------
const schemaKeyValuePair = (0, node_opcua_factory_1.buildStructuredType)({
    name: "KeyValuePair",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "key",
            fieldType: "QualifiedName",
        },
        {
            name: "value",
            fieldType: "Variant",
        },
    ]
});
class KeyValuePair extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.key = new node_opcua_data_model_1.QualifiedName(null);
            this.value = new node_opcua_variant_1.Variant(null);
            return;
        }
        const schema = KeyValuePair.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.key = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.key);
        this.value = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.value);
    }
    static get schema() { return schemaKeyValuePair; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_data_model_1.encodeQualifiedName)(this.key, stream);
        (0, node_opcua_variant_1.encodeVariant)(this.value, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.key = (0, node_opcua_data_model_1.decodeQualifiedName)(stream, this.key);
        this.value = (0, node_opcua_variant_1.decodeVariant)(stream, this.value);
    }
    get schema() { return schemaKeyValuePair; }
}
exports.KeyValuePair = KeyValuePair;
KeyValuePair.possibleFields = [
    "key",
    "value"
];
KeyValuePair.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(14533, 0);
KeyValuePair.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(14846, 0);
KeyValuePair.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(14802, 0);
KeyValuePair.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15041, 0);
KeyValuePair.schema.dataTypeNodeId = KeyValuePair.dataTypeNodeId;
KeyValuePair.schema.encodingDefaultBinary = KeyValuePair.encodingDefaultBinary;
KeyValuePair.schema.encodingDefaultXml = KeyValuePair.encodingDefaultXml;
KeyValuePair.schema.encodingDefaultJson = KeyValuePair.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(KeyValuePair.dataTypeNodeId, "KeyValuePair", KeyValuePair);
// --------------------------------------------------------------------------------------------
const schemaAdditionalParametersType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "AdditionalParametersType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "parameters",
            fieldType: "KeyValuePair",
            isArray: true
        },
    ]
});
class AdditionalParametersType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.parameters = null; /* null array */
            return;
        }
        const schema = AdditionalParametersType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.parameters = []; // should default
        if (options.parameters) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.parameters));
            this.parameters = options.parameters.map((e) => new KeyValuePair(e));
        }
    }
    static get schema() { return schemaAdditionalParametersType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.parameters, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.parameters = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new KeyValuePair(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaAdditionalParametersType; }
}
exports.AdditionalParametersType = AdditionalParametersType;
AdditionalParametersType.possibleFields = [
    "parameters"
];
AdditionalParametersType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16313, 0);
AdditionalParametersType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(17537, 0);
AdditionalParametersType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(17541, 0);
AdditionalParametersType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(17547, 0);
AdditionalParametersType.schema.dataTypeNodeId = AdditionalParametersType.dataTypeNodeId;
AdditionalParametersType.schema.encodingDefaultBinary = AdditionalParametersType.encodingDefaultBinary;
AdditionalParametersType.schema.encodingDefaultXml = AdditionalParametersType.encodingDefaultXml;
AdditionalParametersType.schema.encodingDefaultJson = AdditionalParametersType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(AdditionalParametersType.dataTypeNodeId, "AdditionalParametersType", AdditionalParametersType);
// --------------------------------------------------------------------------------------------
const schemaAggregateConfiguration = (0, node_opcua_factory_1.buildStructuredType)({
    name: "AggregateConfiguration",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "useServerCapabilitiesDefaults",
            fieldType: "UABoolean",
        },
        {
            name: "treatUncertainAsBad",
            fieldType: "UABoolean",
        },
        {
            name: "percentDataBad",
            fieldType: "Byte",
        },
        {
            name: "percentDataGood",
            fieldType: "Byte",
        },
        {
            name: "useSlopedExtrapolation",
            fieldType: "UABoolean",
        },
    ]
});
class AggregateConfiguration extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.useServerCapabilitiesDefaults = false;
            this.treatUncertainAsBad = false;
            this.percentDataBad = 0;
            this.percentDataGood = 0;
            this.useSlopedExtrapolation = false;
            return;
        }
        const schema = AggregateConfiguration.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.useServerCapabilitiesDefaults = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.useServerCapabilitiesDefaults);
        this.treatUncertainAsBad = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.treatUncertainAsBad);
        this.percentDataBad = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.percentDataBad);
        this.percentDataGood = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.percentDataGood);
        this.useSlopedExtrapolation = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.useSlopedExtrapolation);
    }
    static get schema() { return schemaAggregateConfiguration; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.useServerCapabilitiesDefaults, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.treatUncertainAsBad, stream);
        (0, node_opcua_basic_types_1.encodeByte)(this.percentDataBad, stream);
        (0, node_opcua_basic_types_1.encodeByte)(this.percentDataGood, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.useSlopedExtrapolation, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.useServerCapabilitiesDefaults = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.useServerCapabilitiesDefaults);
        this.treatUncertainAsBad = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.treatUncertainAsBad);
        this.percentDataBad = (0, node_opcua_basic_types_1.decodeByte)(stream, this.percentDataBad);
        this.percentDataGood = (0, node_opcua_basic_types_1.decodeByte)(stream, this.percentDataGood);
        this.useSlopedExtrapolation = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.useSlopedExtrapolation);
    }
    get schema() { return schemaAggregateConfiguration; }
}
exports.AggregateConfiguration = AggregateConfiguration;
AggregateConfiguration.possibleFields = [
    "useServerCapabilitiesDefaults",
    "treatUncertainAsBad",
    "percentDataBad",
    "percentDataGood",
    "useSlopedExtrapolation"
];
AggregateConfiguration.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(948, 0);
AggregateConfiguration.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(950, 0);
AggregateConfiguration.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(949, 0);
AggregateConfiguration.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15304, 0);
AggregateConfiguration.schema.dataTypeNodeId = AggregateConfiguration.dataTypeNodeId;
AggregateConfiguration.schema.encodingDefaultBinary = AggregateConfiguration.encodingDefaultBinary;
AggregateConfiguration.schema.encodingDefaultXml = AggregateConfiguration.encodingDefaultXml;
AggregateConfiguration.schema.encodingDefaultJson = AggregateConfiguration.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(AggregateConfiguration.dataTypeNodeId, "AggregateConfiguration", AggregateConfiguration);
// --------------------------------------------------------------------------------------------
const schemaMonitoringFilter = (0, node_opcua_factory_1.buildStructuredType)({
    name: "MonitoringFilter",
    baseType: "ExtensionObject",
    fields: []
});
class MonitoringFilter extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            return;
        }
        const schema = MonitoringFilter.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
    }
    static get schema() { return schemaMonitoringFilter; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
    }
    get schema() { return schemaMonitoringFilter; }
}
exports.MonitoringFilter = MonitoringFilter;
MonitoringFilter.possibleFields = [];
MonitoringFilter.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(719, 0);
MonitoringFilter.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(721, 0);
MonitoringFilter.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(720, 0);
MonitoringFilter.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15293, 0);
MonitoringFilter.schema.dataTypeNodeId = MonitoringFilter.dataTypeNodeId;
MonitoringFilter.schema.encodingDefaultBinary = MonitoringFilter.encodingDefaultBinary;
MonitoringFilter.schema.encodingDefaultXml = MonitoringFilter.encodingDefaultXml;
MonitoringFilter.schema.encodingDefaultJson = MonitoringFilter.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(MonitoringFilter.dataTypeNodeId, "MonitoringFilter", MonitoringFilter);
// --------------------------------------------------------------------------------------------
const schemaAggregateFilter = (0, node_opcua_factory_1.buildStructuredType)({
    name: "AggregateFilter",
    baseType: "MonitoringFilter",
    fields: [
        {
            name: "startTime",
            fieldType: "DateTime",
        },
        {
            name: "aggregateType",
            fieldType: "NodeId",
        },
        {
            name: "processingInterval",
            fieldType: "Double",
        },
        {
            name: "aggregateConfiguration",
            fieldType: "AggregateConfiguration",
        },
    ]
});
class AggregateFilter extends MonitoringFilter {
    constructor(options) {
        super(options);
        if (options === null) {
            this.startTime = new Date();
            this.aggregateType = new node_opcua_nodeid_1.NodeId(null);
            this.processingInterval = 0;
            this.aggregateConfiguration = new AggregateConfiguration(null);
            return;
        }
        const schema = AggregateFilter.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.startTime = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.startTime);
        this.aggregateType = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.aggregateType);
        this.processingInterval = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.processingInterval);
        this.aggregateConfiguration = new AggregateConfiguration(options.aggregateConfiguration);
    }
    static get schema() { return schemaAggregateFilter; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.startTime, stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.aggregateType, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.processingInterval, stream);
        this.aggregateConfiguration.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.startTime = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.startTime);
        this.aggregateType = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.aggregateType);
        this.processingInterval = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.processingInterval);
        this.aggregateConfiguration.decode(stream);
    }
    get schema() { return schemaAggregateFilter; }
}
exports.AggregateFilter = AggregateFilter;
AggregateFilter.possibleFields = [
    "startTime",
    "aggregateType",
    "processingInterval",
    "aggregateConfiguration"
];
AggregateFilter.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(728, 0);
AggregateFilter.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(730, 0);
AggregateFilter.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(729, 0);
AggregateFilter.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15312, 0);
AggregateFilter.schema.dataTypeNodeId = AggregateFilter.dataTypeNodeId;
AggregateFilter.schema.encodingDefaultBinary = AggregateFilter.encodingDefaultBinary;
AggregateFilter.schema.encodingDefaultXml = AggregateFilter.encodingDefaultXml;
AggregateFilter.schema.encodingDefaultJson = AggregateFilter.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(AggregateFilter.dataTypeNodeId, "AggregateFilter", AggregateFilter);
// --------------------------------------------------------------------------------------------
const schemaMonitoringFilterResult = (0, node_opcua_factory_1.buildStructuredType)({
    name: "MonitoringFilterResult",
    baseType: "ExtensionObject",
    fields: []
});
class MonitoringFilterResult extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            return;
        }
        const schema = MonitoringFilterResult.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
    }
    static get schema() { return schemaMonitoringFilterResult; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
    }
    get schema() { return schemaMonitoringFilterResult; }
}
exports.MonitoringFilterResult = MonitoringFilterResult;
MonitoringFilterResult.possibleFields = [];
MonitoringFilterResult.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(731, 0);
MonitoringFilterResult.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(733, 0);
MonitoringFilterResult.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(732, 0);
MonitoringFilterResult.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15313, 0);
MonitoringFilterResult.schema.dataTypeNodeId = MonitoringFilterResult.dataTypeNodeId;
MonitoringFilterResult.schema.encodingDefaultBinary = MonitoringFilterResult.encodingDefaultBinary;
MonitoringFilterResult.schema.encodingDefaultXml = MonitoringFilterResult.encodingDefaultXml;
MonitoringFilterResult.schema.encodingDefaultJson = MonitoringFilterResult.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(MonitoringFilterResult.dataTypeNodeId, "MonitoringFilterResult", MonitoringFilterResult);
// --------------------------------------------------------------------------------------------
const schemaAggregateFilterResult = (0, node_opcua_factory_1.buildStructuredType)({
    name: "AggregateFilterResult",
    baseType: "MonitoringFilterResult",
    fields: [
        {
            name: "revisedStartTime",
            fieldType: "DateTime",
        },
        {
            name: "revisedProcessingInterval",
            fieldType: "Double",
        },
        {
            name: "revisedAggregateConfiguration",
            fieldType: "AggregateConfiguration",
        },
    ]
});
class AggregateFilterResult extends MonitoringFilterResult {
    constructor(options) {
        super(options);
        if (options === null) {
            this.revisedStartTime = new Date();
            this.revisedProcessingInterval = 0;
            this.revisedAggregateConfiguration = new AggregateConfiguration(null);
            return;
        }
        const schema = AggregateFilterResult.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.revisedStartTime = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.revisedStartTime);
        this.revisedProcessingInterval = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.revisedProcessingInterval);
        this.revisedAggregateConfiguration = new AggregateConfiguration(options.revisedAggregateConfiguration);
    }
    static get schema() { return schemaAggregateFilterResult; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.revisedStartTime, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.revisedProcessingInterval, stream);
        this.revisedAggregateConfiguration.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.revisedStartTime = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.revisedStartTime);
        this.revisedProcessingInterval = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.revisedProcessingInterval);
        this.revisedAggregateConfiguration.decode(stream);
    }
    get schema() { return schemaAggregateFilterResult; }
}
exports.AggregateFilterResult = AggregateFilterResult;
AggregateFilterResult.possibleFields = [
    "revisedStartTime",
    "revisedProcessingInterval",
    "revisedAggregateConfiguration"
];
AggregateFilterResult.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(737, 0);
AggregateFilterResult.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(739, 0);
AggregateFilterResult.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(738, 0);
AggregateFilterResult.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15315, 0);
AggregateFilterResult.schema.dataTypeNodeId = AggregateFilterResult.dataTypeNodeId;
AggregateFilterResult.schema.encodingDefaultBinary = AggregateFilterResult.encodingDefaultBinary;
AggregateFilterResult.schema.encodingDefaultXml = AggregateFilterResult.encodingDefaultXml;
AggregateFilterResult.schema.encodingDefaultJson = AggregateFilterResult.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(AggregateFilterResult.dataTypeNodeId, "AggregateFilterResult", AggregateFilterResult);
// --------------------------------------------------------------------------------------------
const schemaAliasNameDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "AliasNameDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "aliasName",
            fieldType: "QualifiedName",
        },
        {
            name: "referencedNodes",
            fieldType: "ExpandedNodeId",
            isArray: true
        },
    ]
});
class AliasNameDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.aliasName = new node_opcua_data_model_1.QualifiedName(null);
            this.referencedNodes = [];
            return;
        }
        const schema = AliasNameDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.aliasName = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.aliasName);
        this.referencedNodes = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.referencedNodes);
    }
    static get schema() { return schemaAliasNameDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_data_model_1.encodeQualifiedName)(this.aliasName, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.referencedNodes, stream, node_opcua_basic_types_1.encodeExpandedNodeId);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.aliasName = (0, node_opcua_data_model_1.decodeQualifiedName)(stream, this.aliasName);
        this.referencedNodes = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeExpandedNodeId);
    }
    get schema() { return schemaAliasNameDataType; }
}
exports.AliasNameDataType = AliasNameDataType;
AliasNameDataType.possibleFields = [
    "aliasName",
    "referencedNodes"
];
AliasNameDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(23468, 0);
AliasNameDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(23499, 0);
AliasNameDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(23505, 0);
AliasNameDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(23511, 0);
AliasNameDataType.schema.dataTypeNodeId = AliasNameDataType.dataTypeNodeId;
AliasNameDataType.schema.encodingDefaultBinary = AliasNameDataType.encodingDefaultBinary;
AliasNameDataType.schema.encodingDefaultXml = AliasNameDataType.encodingDefaultXml;
AliasNameDataType.schema.encodingDefaultJson = AliasNameDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(AliasNameDataType.dataTypeNodeId, "AliasNameDataType", AliasNameDataType);
// --------------------------------------------------------------------------------------------
const schemaAnnotation = (0, node_opcua_factory_1.buildStructuredType)({
    name: "Annotation",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "message",
            fieldType: "UAString",
        },
        {
            name: "userName",
            fieldType: "UAString",
        },
        {
            name: "annotationTime",
            fieldType: "DateTime",
        },
    ]
});
class Annotation extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.message = null;
            this.userName = null;
            this.annotationTime = new Date();
            return;
        }
        const schema = Annotation.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.message = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.message);
        this.userName = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.userName);
        this.annotationTime = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.annotationTime);
    }
    static get schema() { return schemaAnnotation; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.message, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.userName, stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.annotationTime, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.message = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.message);
        this.userName = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.userName);
        this.annotationTime = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.annotationTime);
    }
    get schema() { return schemaAnnotation; }
}
exports.Annotation = Annotation;
Annotation.possibleFields = [
    "message",
    "userName",
    "annotationTime"
];
Annotation.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(891, 0);
Annotation.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(893, 0);
Annotation.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(892, 0);
Annotation.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15382, 0);
Annotation.schema.dataTypeNodeId = Annotation.dataTypeNodeId;
Annotation.schema.encodingDefaultBinary = Annotation.encodingDefaultBinary;
Annotation.schema.encodingDefaultXml = Annotation.encodingDefaultXml;
Annotation.schema.encodingDefaultJson = Annotation.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(Annotation.dataTypeNodeId, "Annotation", Annotation);
// --------------------------------------------------------------------------------------------
const schemaUserIdentityToken = (0, node_opcua_factory_1.buildStructuredType)({
    name: "UserIdentityToken",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "policyId",
            fieldType: "UAString",
        },
    ]
});
class UserIdentityToken extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.policyId = null;
            return;
        }
        const schema = UserIdentityToken.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.policyId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.policyId);
    }
    static get schema() { return schemaUserIdentityToken; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.policyId, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.policyId = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.policyId);
    }
    get schema() { return schemaUserIdentityToken; }
}
exports.UserIdentityToken = UserIdentityToken;
UserIdentityToken.possibleFields = [
    "policyId"
];
UserIdentityToken.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(316, 0);
UserIdentityToken.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(318, 0);
UserIdentityToken.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(317, 0);
UserIdentityToken.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15140, 0);
UserIdentityToken.schema.dataTypeNodeId = UserIdentityToken.dataTypeNodeId;
UserIdentityToken.schema.encodingDefaultBinary = UserIdentityToken.encodingDefaultBinary;
UserIdentityToken.schema.encodingDefaultXml = UserIdentityToken.encodingDefaultXml;
UserIdentityToken.schema.encodingDefaultJson = UserIdentityToken.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(UserIdentityToken.dataTypeNodeId, "UserIdentityToken", UserIdentityToken);
// --------------------------------------------------------------------------------------------
const schemaAnonymousIdentityToken = (0, node_opcua_factory_1.buildStructuredType)({
    name: "AnonymousIdentityToken",
    baseType: "UserIdentityToken",
    fields: []
});
class AnonymousIdentityToken extends UserIdentityToken {
    constructor(options) {
        super(options);
        if (options === null) {
            return;
        }
        const schema = AnonymousIdentityToken.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
    }
    static get schema() { return schemaAnonymousIdentityToken; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
    }
    get schema() { return schemaAnonymousIdentityToken; }
}
exports.AnonymousIdentityToken = AnonymousIdentityToken;
AnonymousIdentityToken.possibleFields = [];
AnonymousIdentityToken.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(319, 0);
AnonymousIdentityToken.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(321, 0);
AnonymousIdentityToken.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(320, 0);
AnonymousIdentityToken.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15141, 0);
AnonymousIdentityToken.schema.dataTypeNodeId = AnonymousIdentityToken.dataTypeNodeId;
AnonymousIdentityToken.schema.encodingDefaultBinary = AnonymousIdentityToken.encodingDefaultBinary;
AnonymousIdentityToken.schema.encodingDefaultXml = AnonymousIdentityToken.encodingDefaultXml;
AnonymousIdentityToken.schema.encodingDefaultJson = AnonymousIdentityToken.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(AnonymousIdentityToken.dataTypeNodeId, "AnonymousIdentityToken", AnonymousIdentityToken);
// --------------------------------------------------------------------------------------------
var ApplicationType;
(function (ApplicationType) {
    ApplicationType[ApplicationType["Server"] = 0] = "Server";
    ApplicationType[ApplicationType["Client"] = 1] = "Client";
    ApplicationType[ApplicationType["ClientAndServer"] = 2] = "ClientAndServer";
    ApplicationType[ApplicationType["DiscoveryServer"] = 3] = "DiscoveryServer";
    ApplicationType[ApplicationType["Invalid"] = 4294967295] = "Invalid";
})(ApplicationType = exports.ApplicationType || (exports.ApplicationType = {}));
const schemaApplicationType = {
    enumValues: ApplicationType,
    flaggable: false,
    minValue: 0,
    maxValue: 3,
    name: "ApplicationType"
};
function decodeApplicationType(stream, _value) {
    let value = stream.readUInt32();
    value = (value < schemaApplicationType.minValue || value > schemaApplicationType.maxValue) ? ApplicationType.Invalid : value;
    return value;
}
function encodeApplicationType(value, stream) {
    stream.writeUInt32(value);
}
exports._enumerationApplicationType = (0, node_opcua_factory_1.registerEnumeration)(schemaApplicationType);
(0, node_opcua_assert_1.assert)(exports._enumerationApplicationType.isFlaggable === false);
// --------------------------------------------------------------------------------------------
const schemaApplicationDescription = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ApplicationDescription",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "applicationUri",
            fieldType: "UAString",
        },
        {
            name: "productUri",
            fieldType: "UAString",
        },
        {
            name: "applicationName",
            fieldType: "LocalizedText",
        },
        {
            name: "applicationType",
            fieldType: "ApplicationType",
        },
        {
            name: "gatewayServerUri",
            fieldType: "UAString",
        },
        {
            name: "discoveryProfileUri",
            fieldType: "UAString",
        },
        {
            name: "discoveryUrls",
            fieldType: "UAString",
            isArray: true
        },
    ]
});
class ApplicationDescription extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.applicationUri = null;
            this.productUri = null;
            this.applicationName = new node_opcua_data_model_1.LocalizedText(null);
            this.applicationType = 0;
            this.gatewayServerUri = null;
            this.discoveryProfileUri = null;
            this.discoveryUrls = [];
            return;
        }
        const schema = ApplicationDescription.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.applicationUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.applicationUri);
        this.productUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.productUri);
        this.applicationName = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.applicationName);
        this.applicationType = this.setApplicationType((0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.applicationType));
        this.gatewayServerUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.gatewayServerUri);
        this.discoveryProfileUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.discoveryProfileUri);
        this.discoveryUrls = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[6], options === null || options === void 0 ? void 0 : options.discoveryUrls);
    }
    static get schema() { return schemaApplicationDescription; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.applicationUri, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.productUri, stream);
        (0, node_opcua_data_model_1.encodeLocalizedText)(this.applicationName, stream);
        encodeApplicationType(this.applicationType, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.gatewayServerUri, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.discoveryProfileUri, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.discoveryUrls, stream, node_opcua_basic_types_1.encodeUAString);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.applicationUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.applicationUri);
        this.productUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.productUri);
        this.applicationName = (0, node_opcua_data_model_1.decodeLocalizedText)(stream, this.applicationName);
        this.applicationType = decodeApplicationType(stream, this.applicationType);
        this.gatewayServerUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.gatewayServerUri);
        this.discoveryProfileUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.discoveryProfileUri);
        this.discoveryUrls = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUAString);
    }
    // Define Enumeration setters
    setApplicationType(value) {
        const coercedValue = exports._enumerationApplicationType.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to ApplicationType :" + value);
        }
        this.applicationType = coercedValue.value;
        return this.applicationType;
    }
    get schema() { return schemaApplicationDescription; }
}
exports.ApplicationDescription = ApplicationDescription;
ApplicationDescription.possibleFields = [
    "applicationUri",
    "productUri",
    "applicationName",
    "applicationType",
    "gatewayServerUri",
    "discoveryProfileUri",
    "discoveryUrls"
];
ApplicationDescription.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(308, 0);
ApplicationDescription.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(310, 0);
ApplicationDescription.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(309, 0);
ApplicationDescription.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15087, 0);
ApplicationDescription.schema.dataTypeNodeId = ApplicationDescription.dataTypeNodeId;
ApplicationDescription.schema.encodingDefaultBinary = ApplicationDescription.encodingDefaultBinary;
ApplicationDescription.schema.encodingDefaultXml = ApplicationDescription.encodingDefaultXml;
ApplicationDescription.schema.encodingDefaultJson = ApplicationDescription.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ApplicationDescription.dataTypeNodeId, "ApplicationDescription", ApplicationDescription);
// --------------------------------------------------------------------------------------------
const schemaArgument = (0, node_opcua_factory_1.buildStructuredType)({
    name: "Argument",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "name",
            fieldType: "UAString",
        },
        {
            name: "dataType",
            fieldType: "NodeId",
        },
        {
            name: "valueRank",
            fieldType: "Int32",
        },
        {
            name: "arrayDimensions",
            fieldType: "UInt32",
            isArray: true
        },
        {
            name: "description",
            fieldType: "LocalizedText",
        },
    ]
});
class Argument extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.name = null;
            this.dataType = new node_opcua_nodeid_1.NodeId(null);
            this.valueRank = 0;
            this.arrayDimensions = [];
            this.description = new node_opcua_data_model_1.LocalizedText(null);
            return;
        }
        const schema = Argument.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.name = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.name);
        this.dataType = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.dataType);
        this.valueRank = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.valueRank);
        this.arrayDimensions = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[3], options === null || options === void 0 ? void 0 : options.arrayDimensions);
        this.description = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.description);
    }
    static get schema() { return schemaArgument; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.name, stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.dataType, stream);
        (0, node_opcua_basic_types_1.encodeInt32)(this.valueRank, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.arrayDimensions, stream, node_opcua_basic_types_1.encodeUInt32);
        (0, node_opcua_data_model_1.encodeLocalizedText)(this.description, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.name = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.name);
        this.dataType = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.dataType);
        this.valueRank = (0, node_opcua_basic_types_1.decodeInt32)(stream, this.valueRank);
        this.arrayDimensions = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUInt32);
        this.description = (0, node_opcua_data_model_1.decodeLocalizedText)(stream, this.description);
    }
    get schema() { return schemaArgument; }
}
exports.Argument = Argument;
Argument.possibleFields = [
    "name",
    "dataType",
    "valueRank",
    "arrayDimensions",
    "description"
];
Argument.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(296, 0);
Argument.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(298, 0);
Argument.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(297, 0);
Argument.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15081, 0);
Argument.schema.dataTypeNodeId = Argument.dataTypeNodeId;
Argument.schema.encodingDefaultBinary = Argument.encodingDefaultBinary;
Argument.schema.encodingDefaultXml = Argument.encodingDefaultXml;
Argument.schema.encodingDefaultJson = Argument.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(Argument.dataTypeNodeId, "Argument", Argument);
// --------------------------------------------------------------------------------------------
const schemaRelativePathElement = (0, node_opcua_factory_1.buildStructuredType)({
    name: "RelativePathElement",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "referenceTypeId",
            fieldType: "NodeId",
        },
        {
            name: "isInverse",
            fieldType: "UABoolean",
        },
        {
            name: "includeSubtypes",
            fieldType: "UABoolean",
        },
        {
            name: "targetName",
            fieldType: "QualifiedName",
        },
    ]
});
class RelativePathElement extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.referenceTypeId = new node_opcua_nodeid_1.NodeId(null);
            this.isInverse = false;
            this.includeSubtypes = false;
            this.targetName = new node_opcua_data_model_1.QualifiedName(null);
            return;
        }
        const schema = RelativePathElement.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.referenceTypeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.referenceTypeId);
        this.isInverse = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.isInverse);
        this.includeSubtypes = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.includeSubtypes);
        this.targetName = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.targetName);
    }
    static get schema() { return schemaRelativePathElement; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.referenceTypeId, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.isInverse, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.includeSubtypes, stream);
        (0, node_opcua_data_model_1.encodeQualifiedName)(this.targetName, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.referenceTypeId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.referenceTypeId);
        this.isInverse = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.isInverse);
        this.includeSubtypes = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.includeSubtypes);
        this.targetName = (0, node_opcua_data_model_1.decodeQualifiedName)(stream, this.targetName);
    }
    get schema() { return schemaRelativePathElement; }
}
exports.RelativePathElement = RelativePathElement;
RelativePathElement.possibleFields = [
    "referenceTypeId",
    "isInverse",
    "includeSubtypes",
    "targetName"
];
RelativePathElement.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(537, 0);
RelativePathElement.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(539, 0);
RelativePathElement.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(538, 0);
RelativePathElement.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15188, 0);
RelativePathElement.schema.dataTypeNodeId = RelativePathElement.dataTypeNodeId;
RelativePathElement.schema.encodingDefaultBinary = RelativePathElement.encodingDefaultBinary;
RelativePathElement.schema.encodingDefaultXml = RelativePathElement.encodingDefaultXml;
RelativePathElement.schema.encodingDefaultJson = RelativePathElement.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(RelativePathElement.dataTypeNodeId, "RelativePathElement", RelativePathElement);
// --------------------------------------------------------------------------------------------
const schemaRelativePath = (0, node_opcua_factory_1.buildStructuredType)({
    name: "RelativePath",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "elements",
            fieldType: "RelativePathElement",
            isArray: true
        },
    ]
});
class RelativePath extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.elements = null; /* null array */
            return;
        }
        const schema = RelativePath.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.elements = []; // should default
        if (options.elements) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.elements));
            this.elements = options.elements.map((e) => new RelativePathElement(e));
        }
    }
    static get schema() { return schemaRelativePath; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.elements, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.elements = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new RelativePathElement(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaRelativePath; }
}
exports.RelativePath = RelativePath;
RelativePath.possibleFields = [
    "elements"
];
RelativePath.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(540, 0);
RelativePath.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(542, 0);
RelativePath.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(541, 0);
RelativePath.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15189, 0);
RelativePath.schema.dataTypeNodeId = RelativePath.dataTypeNodeId;
RelativePath.schema.encodingDefaultBinary = RelativePath.encodingDefaultBinary;
RelativePath.schema.encodingDefaultXml = RelativePath.encodingDefaultXml;
RelativePath.schema.encodingDefaultJson = RelativePath.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(RelativePath.dataTypeNodeId, "RelativePath", RelativePath);
// --------------------------------------------------------------------------------------------
const schemaAttributeOperand = (0, node_opcua_factory_1.buildStructuredType)({
    name: "AttributeOperand",
    baseType: "FilterOperand",
    fields: [
        {
            name: "nodeId",
            fieldType: "NodeId",
        },
        {
            name: "alias",
            fieldType: "UAString",
        },
        {
            name: "browsePath",
            fieldType: "RelativePath",
        },
        {
            name: "attributeId",
            fieldType: "UInt32",
        },
        {
            name: "indexRange",
            fieldType: "NumericRange",
        },
    ]
});
class AttributeOperand extends FilterOperand {
    constructor(options) {
        super(options);
        if (options === null) {
            this.nodeId = new node_opcua_nodeid_1.NodeId(null);
            this.alias = null;
            this.browsePath = new RelativePath(null);
            this.attributeId = 0;
            this.indexRange = new node_opcua_numeric_range_1.NumericRange(null);
            return;
        }
        const schema = AttributeOperand.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.nodeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.nodeId);
        this.alias = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.alias);
        this.browsePath = new RelativePath(options.browsePath);
        this.attributeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.attributeId);
        this.indexRange = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.indexRange);
    }
    static get schema() { return schemaAttributeOperand; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.nodeId, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.alias, stream);
        this.browsePath.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.attributeId, stream);
        (0, node_opcua_numeric_range_1.encodeNumericRange)(this.indexRange, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.nodeId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.nodeId);
        this.alias = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.alias);
        this.browsePath.decode(stream);
        this.attributeId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.attributeId);
        this.indexRange = (0, node_opcua_numeric_range_1.decodeNumericRange)(stream, this.indexRange);
    }
    get schema() { return schemaAttributeOperand; }
}
exports.AttributeOperand = AttributeOperand;
AttributeOperand.possibleFields = [
    "nodeId",
    "alias",
    "browsePath",
    "attributeId",
    "indexRange"
];
AttributeOperand.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(598, 0);
AttributeOperand.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(600, 0);
AttributeOperand.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(599, 0);
AttributeOperand.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15209, 0);
AttributeOperand.schema.dataTypeNodeId = AttributeOperand.dataTypeNodeId;
AttributeOperand.schema.encodingDefaultBinary = AttributeOperand.encodingDefaultBinary;
AttributeOperand.schema.encodingDefaultXml = AttributeOperand.encodingDefaultXml;
AttributeOperand.schema.encodingDefaultJson = AttributeOperand.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(AttributeOperand.dataTypeNodeId, "AttributeOperand", AttributeOperand);
// --------------------------------------------------------------------------------------------
const schemaConnectionTransportDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ConnectionTransportDataType",
    baseType: "ExtensionObject",
    fields: []
});
class ConnectionTransportDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            return;
        }
        const schema = ConnectionTransportDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
    }
    static get schema() { return schemaConnectionTransportDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
    }
    get schema() { return schemaConnectionTransportDataType; }
}
exports.ConnectionTransportDataType = ConnectionTransportDataType;
ConnectionTransportDataType.possibleFields = [];
ConnectionTransportDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15618, 0);
ConnectionTransportDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15695, 0);
ConnectionTransportDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15993, 0);
ConnectionTransportDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16282, 0);
ConnectionTransportDataType.schema.dataTypeNodeId = ConnectionTransportDataType.dataTypeNodeId;
ConnectionTransportDataType.schema.encodingDefaultBinary = ConnectionTransportDataType.encodingDefaultBinary;
ConnectionTransportDataType.schema.encodingDefaultXml = ConnectionTransportDataType.encodingDefaultXml;
ConnectionTransportDataType.schema.encodingDefaultJson = ConnectionTransportDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ConnectionTransportDataType.dataTypeNodeId, "ConnectionTransportDataType", ConnectionTransportDataType);
// --------------------------------------------------------------------------------------------
const schemaBrokerConnectionTransportDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "BrokerConnectionTransportDataType",
    baseType: "ConnectionTransportDataType",
    fields: [
        {
            name: "resourceUri",
            fieldType: "UAString",
        },
        {
            name: "authenticationProfileUri",
            fieldType: "UAString",
        },
    ]
});
class BrokerConnectionTransportDataType extends ConnectionTransportDataType {
    constructor(options) {
        super(options);
        if (options === null) {
            this.resourceUri = null;
            this.authenticationProfileUri = null;
            return;
        }
        const schema = BrokerConnectionTransportDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.resourceUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.resourceUri);
        this.authenticationProfileUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.authenticationProfileUri);
    }
    static get schema() { return schemaBrokerConnectionTransportDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.resourceUri, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.authenticationProfileUri, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.resourceUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.resourceUri);
        this.authenticationProfileUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.authenticationProfileUri);
    }
    get schema() { return schemaBrokerConnectionTransportDataType; }
}
exports.BrokerConnectionTransportDataType = BrokerConnectionTransportDataType;
BrokerConnectionTransportDataType.possibleFields = [
    "resourceUri",
    "authenticationProfileUri"
];
BrokerConnectionTransportDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15007, 0);
BrokerConnectionTransportDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15479, 0);
BrokerConnectionTransportDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15579, 0);
BrokerConnectionTransportDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15726, 0);
BrokerConnectionTransportDataType.schema.dataTypeNodeId = BrokerConnectionTransportDataType.dataTypeNodeId;
BrokerConnectionTransportDataType.schema.encodingDefaultBinary = BrokerConnectionTransportDataType.encodingDefaultBinary;
BrokerConnectionTransportDataType.schema.encodingDefaultXml = BrokerConnectionTransportDataType.encodingDefaultXml;
BrokerConnectionTransportDataType.schema.encodingDefaultJson = BrokerConnectionTransportDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(BrokerConnectionTransportDataType.dataTypeNodeId, "BrokerConnectionTransportDataType", BrokerConnectionTransportDataType);
// --------------------------------------------------------------------------------------------
const schemaDataSetReaderTransportDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DataSetReaderTransportDataType",
    baseType: "ExtensionObject",
    fields: []
});
class DataSetReaderTransportDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            return;
        }
        const schema = DataSetReaderTransportDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
    }
    static get schema() { return schemaDataSetReaderTransportDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
    }
    get schema() { return schemaDataSetReaderTransportDataType; }
}
exports.DataSetReaderTransportDataType = DataSetReaderTransportDataType;
DataSetReaderTransportDataType.possibleFields = [];
DataSetReaderTransportDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15628, 0);
DataSetReaderTransportDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15705, 0);
DataSetReaderTransportDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16008, 0);
DataSetReaderTransportDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16287, 0);
DataSetReaderTransportDataType.schema.dataTypeNodeId = DataSetReaderTransportDataType.dataTypeNodeId;
DataSetReaderTransportDataType.schema.encodingDefaultBinary = DataSetReaderTransportDataType.encodingDefaultBinary;
DataSetReaderTransportDataType.schema.encodingDefaultXml = DataSetReaderTransportDataType.encodingDefaultXml;
DataSetReaderTransportDataType.schema.encodingDefaultJson = DataSetReaderTransportDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DataSetReaderTransportDataType.dataTypeNodeId, "DataSetReaderTransportDataType", DataSetReaderTransportDataType);
// --------------------------------------------------------------------------------------------
var BrokerTransportQualityOfService;
(function (BrokerTransportQualityOfService) {
    BrokerTransportQualityOfService[BrokerTransportQualityOfService["NotSpecified"] = 0] = "NotSpecified";
    BrokerTransportQualityOfService[BrokerTransportQualityOfService["BestEffort"] = 1] = "BestEffort";
    BrokerTransportQualityOfService[BrokerTransportQualityOfService["AtLeastOnce"] = 2] = "AtLeastOnce";
    BrokerTransportQualityOfService[BrokerTransportQualityOfService["AtMostOnce"] = 3] = "AtMostOnce";
    BrokerTransportQualityOfService[BrokerTransportQualityOfService["ExactlyOnce"] = 4] = "ExactlyOnce";
    BrokerTransportQualityOfService[BrokerTransportQualityOfService["Invalid"] = 4294967295] = "Invalid";
})(BrokerTransportQualityOfService = exports.BrokerTransportQualityOfService || (exports.BrokerTransportQualityOfService = {}));
const schemaBrokerTransportQualityOfService = {
    enumValues: BrokerTransportQualityOfService,
    flaggable: false,
    minValue: 0,
    maxValue: 4,
    name: "BrokerTransportQualityOfService"
};
function decodeBrokerTransportQualityOfService(stream, _value) {
    let value = stream.readUInt32();
    value = (value < schemaBrokerTransportQualityOfService.minValue || value > schemaBrokerTransportQualityOfService.maxValue) ? BrokerTransportQualityOfService.Invalid : value;
    return value;
}
function encodeBrokerTransportQualityOfService(value, stream) {
    stream.writeUInt32(value);
}
exports._enumerationBrokerTransportQualityOfService = (0, node_opcua_factory_1.registerEnumeration)(schemaBrokerTransportQualityOfService);
(0, node_opcua_assert_1.assert)(exports._enumerationBrokerTransportQualityOfService.isFlaggable === false);
// --------------------------------------------------------------------------------------------
const schemaBrokerDataSetReaderTransportDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "BrokerDataSetReaderTransportDataType",
    baseType: "DataSetReaderTransportDataType",
    fields: [
        {
            name: "queueName",
            fieldType: "UAString",
        },
        {
            name: "resourceUri",
            fieldType: "UAString",
        },
        {
            name: "authenticationProfileUri",
            fieldType: "UAString",
        },
        {
            name: "requestedDeliveryGuarantee",
            fieldType: "BrokerTransportQualityOfService",
        },
        {
            name: "metaDataQueueName",
            fieldType: "UAString",
        },
    ]
});
class BrokerDataSetReaderTransportDataType extends DataSetReaderTransportDataType {
    constructor(options) {
        super(options);
        if (options === null) {
            this.queueName = null;
            this.resourceUri = null;
            this.authenticationProfileUri = null;
            this.requestedDeliveryGuarantee = 0;
            this.metaDataQueueName = null;
            return;
        }
        const schema = BrokerDataSetReaderTransportDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.queueName = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.queueName);
        this.resourceUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.resourceUri);
        this.authenticationProfileUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.authenticationProfileUri);
        this.requestedDeliveryGuarantee = this.setRequestedDeliveryGuarantee((0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.requestedDeliveryGuarantee));
        this.metaDataQueueName = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.metaDataQueueName);
    }
    static get schema() { return schemaBrokerDataSetReaderTransportDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.queueName, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.resourceUri, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.authenticationProfileUri, stream);
        encodeBrokerTransportQualityOfService(this.requestedDeliveryGuarantee, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.metaDataQueueName, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.queueName = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.queueName);
        this.resourceUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.resourceUri);
        this.authenticationProfileUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.authenticationProfileUri);
        this.requestedDeliveryGuarantee = decodeBrokerTransportQualityOfService(stream, this.requestedDeliveryGuarantee);
        this.metaDataQueueName = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.metaDataQueueName);
    }
    // Define Enumeration setters
    setRequestedDeliveryGuarantee(value) {
        const coercedValue = exports._enumerationBrokerTransportQualityOfService.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to BrokerTransportQualityOfService :" + value);
        }
        this.requestedDeliveryGuarantee = coercedValue.value;
        return this.requestedDeliveryGuarantee;
    }
    get schema() { return schemaBrokerDataSetReaderTransportDataType; }
}
exports.BrokerDataSetReaderTransportDataType = BrokerDataSetReaderTransportDataType;
BrokerDataSetReaderTransportDataType.possibleFields = [
    "queueName",
    "resourceUri",
    "authenticationProfileUri",
    "requestedDeliveryGuarantee",
    "metaDataQueueName"
];
BrokerDataSetReaderTransportDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15670, 0);
BrokerDataSetReaderTransportDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15733, 0);
BrokerDataSetReaderTransportDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16023, 0);
BrokerDataSetReaderTransportDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16526, 0);
BrokerDataSetReaderTransportDataType.schema.dataTypeNodeId = BrokerDataSetReaderTransportDataType.dataTypeNodeId;
BrokerDataSetReaderTransportDataType.schema.encodingDefaultBinary = BrokerDataSetReaderTransportDataType.encodingDefaultBinary;
BrokerDataSetReaderTransportDataType.schema.encodingDefaultXml = BrokerDataSetReaderTransportDataType.encodingDefaultXml;
BrokerDataSetReaderTransportDataType.schema.encodingDefaultJson = BrokerDataSetReaderTransportDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(BrokerDataSetReaderTransportDataType.dataTypeNodeId, "BrokerDataSetReaderTransportDataType", BrokerDataSetReaderTransportDataType);
// --------------------------------------------------------------------------------------------
const schemaDataSetWriterTransportDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DataSetWriterTransportDataType",
    baseType: "ExtensionObject",
    fields: []
});
class DataSetWriterTransportDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            return;
        }
        const schema = DataSetWriterTransportDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
    }
    static get schema() { return schemaDataSetWriterTransportDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
    }
    get schema() { return schemaDataSetWriterTransportDataType; }
}
exports.DataSetWriterTransportDataType = DataSetWriterTransportDataType;
DataSetWriterTransportDataType.possibleFields = [];
DataSetWriterTransportDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15598, 0);
DataSetWriterTransportDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15683, 0);
DataSetWriterTransportDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15956, 0);
DataSetWriterTransportDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16157, 0);
DataSetWriterTransportDataType.schema.dataTypeNodeId = DataSetWriterTransportDataType.dataTypeNodeId;
DataSetWriterTransportDataType.schema.encodingDefaultBinary = DataSetWriterTransportDataType.encodingDefaultBinary;
DataSetWriterTransportDataType.schema.encodingDefaultXml = DataSetWriterTransportDataType.encodingDefaultXml;
DataSetWriterTransportDataType.schema.encodingDefaultJson = DataSetWriterTransportDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DataSetWriterTransportDataType.dataTypeNodeId, "DataSetWriterTransportDataType", DataSetWriterTransportDataType);
// --------------------------------------------------------------------------------------------
const schemaBrokerDataSetWriterTransportDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "BrokerDataSetWriterTransportDataType",
    baseType: "DataSetWriterTransportDataType",
    fields: [
        {
            name: "queueName",
            fieldType: "UAString",
        },
        {
            name: "resourceUri",
            fieldType: "UAString",
        },
        {
            name: "authenticationProfileUri",
            fieldType: "UAString",
        },
        {
            name: "requestedDeliveryGuarantee",
            fieldType: "BrokerTransportQualityOfService",
        },
        {
            name: "metaDataQueueName",
            fieldType: "UAString",
        },
        {
            name: "metaDataUpdateTime",
            fieldType: "Double",
        },
    ]
});
class BrokerDataSetWriterTransportDataType extends DataSetWriterTransportDataType {
    constructor(options) {
        super(options);
        if (options === null) {
            this.queueName = null;
            this.resourceUri = null;
            this.authenticationProfileUri = null;
            this.requestedDeliveryGuarantee = 0;
            this.metaDataQueueName = null;
            this.metaDataUpdateTime = 0;
            return;
        }
        const schema = BrokerDataSetWriterTransportDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.queueName = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.queueName);
        this.resourceUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.resourceUri);
        this.authenticationProfileUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.authenticationProfileUri);
        this.requestedDeliveryGuarantee = this.setRequestedDeliveryGuarantee((0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.requestedDeliveryGuarantee));
        this.metaDataQueueName = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.metaDataQueueName);
        this.metaDataUpdateTime = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.metaDataUpdateTime);
    }
    static get schema() { return schemaBrokerDataSetWriterTransportDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.queueName, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.resourceUri, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.authenticationProfileUri, stream);
        encodeBrokerTransportQualityOfService(this.requestedDeliveryGuarantee, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.metaDataQueueName, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.metaDataUpdateTime, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.queueName = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.queueName);
        this.resourceUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.resourceUri);
        this.authenticationProfileUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.authenticationProfileUri);
        this.requestedDeliveryGuarantee = decodeBrokerTransportQualityOfService(stream, this.requestedDeliveryGuarantee);
        this.metaDataQueueName = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.metaDataQueueName);
        this.metaDataUpdateTime = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.metaDataUpdateTime);
    }
    // Define Enumeration setters
    setRequestedDeliveryGuarantee(value) {
        const coercedValue = exports._enumerationBrokerTransportQualityOfService.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to BrokerTransportQualityOfService :" + value);
        }
        this.requestedDeliveryGuarantee = coercedValue.value;
        return this.requestedDeliveryGuarantee;
    }
    get schema() { return schemaBrokerDataSetWriterTransportDataType; }
}
exports.BrokerDataSetWriterTransportDataType = BrokerDataSetWriterTransportDataType;
BrokerDataSetWriterTransportDataType.possibleFields = [
    "queueName",
    "resourceUri",
    "authenticationProfileUri",
    "requestedDeliveryGuarantee",
    "metaDataQueueName",
    "metaDataUpdateTime"
];
BrokerDataSetWriterTransportDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15669, 0);
BrokerDataSetWriterTransportDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15729, 0);
BrokerDataSetWriterTransportDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16022, 0);
BrokerDataSetWriterTransportDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16525, 0);
BrokerDataSetWriterTransportDataType.schema.dataTypeNodeId = BrokerDataSetWriterTransportDataType.dataTypeNodeId;
BrokerDataSetWriterTransportDataType.schema.encodingDefaultBinary = BrokerDataSetWriterTransportDataType.encodingDefaultBinary;
BrokerDataSetWriterTransportDataType.schema.encodingDefaultXml = BrokerDataSetWriterTransportDataType.encodingDefaultXml;
BrokerDataSetWriterTransportDataType.schema.encodingDefaultJson = BrokerDataSetWriterTransportDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(BrokerDataSetWriterTransportDataType.dataTypeNodeId, "BrokerDataSetWriterTransportDataType", BrokerDataSetWriterTransportDataType);
// --------------------------------------------------------------------------------------------
const schemaWriterGroupTransportDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "WriterGroupTransportDataType",
    baseType: "ExtensionObject",
    fields: []
});
class WriterGroupTransportDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            return;
        }
        const schema = WriterGroupTransportDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
    }
    static get schema() { return schemaWriterGroupTransportDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
    }
    get schema() { return schemaWriterGroupTransportDataType; }
}
exports.WriterGroupTransportDataType = WriterGroupTransportDataType;
WriterGroupTransportDataType.possibleFields = [];
WriterGroupTransportDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15611, 0);
WriterGroupTransportDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15691, 0);
WriterGroupTransportDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15990, 0);
WriterGroupTransportDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16161, 0);
WriterGroupTransportDataType.schema.dataTypeNodeId = WriterGroupTransportDataType.dataTypeNodeId;
WriterGroupTransportDataType.schema.encodingDefaultBinary = WriterGroupTransportDataType.encodingDefaultBinary;
WriterGroupTransportDataType.schema.encodingDefaultXml = WriterGroupTransportDataType.encodingDefaultXml;
WriterGroupTransportDataType.schema.encodingDefaultJson = WriterGroupTransportDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(WriterGroupTransportDataType.dataTypeNodeId, "WriterGroupTransportDataType", WriterGroupTransportDataType);
// --------------------------------------------------------------------------------------------
const schemaBrokerWriterGroupTransportDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "BrokerWriterGroupTransportDataType",
    baseType: "WriterGroupTransportDataType",
    fields: [
        {
            name: "queueName",
            fieldType: "UAString",
        },
        {
            name: "resourceUri",
            fieldType: "UAString",
        },
        {
            name: "authenticationProfileUri",
            fieldType: "UAString",
        },
        {
            name: "requestedDeliveryGuarantee",
            fieldType: "BrokerTransportQualityOfService",
        },
    ]
});
class BrokerWriterGroupTransportDataType extends WriterGroupTransportDataType {
    constructor(options) {
        super(options);
        if (options === null) {
            this.queueName = null;
            this.resourceUri = null;
            this.authenticationProfileUri = null;
            this.requestedDeliveryGuarantee = 0;
            return;
        }
        const schema = BrokerWriterGroupTransportDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.queueName = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.queueName);
        this.resourceUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.resourceUri);
        this.authenticationProfileUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.authenticationProfileUri);
        this.requestedDeliveryGuarantee = this.setRequestedDeliveryGuarantee((0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.requestedDeliveryGuarantee));
    }
    static get schema() { return schemaBrokerWriterGroupTransportDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.queueName, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.resourceUri, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.authenticationProfileUri, stream);
        encodeBrokerTransportQualityOfService(this.requestedDeliveryGuarantee, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.queueName = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.queueName);
        this.resourceUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.resourceUri);
        this.authenticationProfileUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.authenticationProfileUri);
        this.requestedDeliveryGuarantee = decodeBrokerTransportQualityOfService(stream, this.requestedDeliveryGuarantee);
    }
    // Define Enumeration setters
    setRequestedDeliveryGuarantee(value) {
        const coercedValue = exports._enumerationBrokerTransportQualityOfService.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to BrokerTransportQualityOfService :" + value);
        }
        this.requestedDeliveryGuarantee = coercedValue.value;
        return this.requestedDeliveryGuarantee;
    }
    get schema() { return schemaBrokerWriterGroupTransportDataType; }
}
exports.BrokerWriterGroupTransportDataType = BrokerWriterGroupTransportDataType;
BrokerWriterGroupTransportDataType.possibleFields = [
    "queueName",
    "resourceUri",
    "authenticationProfileUri",
    "requestedDeliveryGuarantee"
];
BrokerWriterGroupTransportDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15667, 0);
BrokerWriterGroupTransportDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15727, 0);
BrokerWriterGroupTransportDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16021, 0);
BrokerWriterGroupTransportDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16524, 0);
BrokerWriterGroupTransportDataType.schema.dataTypeNodeId = BrokerWriterGroupTransportDataType.dataTypeNodeId;
BrokerWriterGroupTransportDataType.schema.encodingDefaultBinary = BrokerWriterGroupTransportDataType.encodingDefaultBinary;
BrokerWriterGroupTransportDataType.schema.encodingDefaultXml = BrokerWriterGroupTransportDataType.encodingDefaultXml;
BrokerWriterGroupTransportDataType.schema.encodingDefaultJson = BrokerWriterGroupTransportDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(BrokerWriterGroupTransportDataType.dataTypeNodeId, "BrokerWriterGroupTransportDataType", BrokerWriterGroupTransportDataType);
// --------------------------------------------------------------------------------------------
const schemaBrowseDescription = (0, node_opcua_factory_1.buildStructuredType)({
    name: "BrowseDescription",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "nodeId",
            fieldType: "NodeId",
        },
        {
            name: "browseDirection",
            fieldType: "BrowseDirection",
        },
        {
            name: "referenceTypeId",
            fieldType: "NodeId",
        },
        {
            name: "includeSubtypes",
            fieldType: "UABoolean",
        },
        {
            name: "nodeClassMask",
            fieldType: "UInt32",
        },
        {
            name: "resultMask",
            fieldType: "UInt32",
        },
    ]
});
class BrowseDescription extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.nodeId = new node_opcua_nodeid_1.NodeId(null);
            this.browseDirection = 0;
            this.referenceTypeId = new node_opcua_nodeid_1.NodeId(null);
            this.includeSubtypes = false;
            this.nodeClassMask = 0;
            this.resultMask = 0;
            return;
        }
        const schema = BrowseDescription.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.nodeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.nodeId);
        this.browseDirection = this.setBrowseDirection((0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.browseDirection));
        this.referenceTypeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.referenceTypeId);
        this.includeSubtypes = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.includeSubtypes);
        this.nodeClassMask = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.nodeClassMask);
        this.resultMask = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.resultMask);
    }
    static get schema() { return schemaBrowseDescription; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.nodeId, stream);
        (0, node_opcua_data_model_1.encodeBrowseDirection)(this.browseDirection, stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.referenceTypeId, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.includeSubtypes, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.nodeClassMask, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.resultMask, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.nodeId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.nodeId);
        this.browseDirection = (0, node_opcua_data_model_1.decodeBrowseDirection)(stream, this.browseDirection);
        this.referenceTypeId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.referenceTypeId);
        this.includeSubtypes = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.includeSubtypes);
        this.nodeClassMask = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.nodeClassMask);
        this.resultMask = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.resultMask);
    }
    // Define Enumeration setters
    setBrowseDirection(value) {
        const coercedValue = node_opcua_data_model_1._enumerationBrowseDirection.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to BrowseDirection :" + value);
        }
        this.browseDirection = coercedValue.value;
        return this.browseDirection;
    }
    get schema() { return schemaBrowseDescription; }
}
exports.BrowseDescription = BrowseDescription;
BrowseDescription.possibleFields = [
    "nodeId",
    "browseDirection",
    "referenceTypeId",
    "includeSubtypes",
    "nodeClassMask",
    "resultMask"
];
BrowseDescription.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(514, 0);
BrowseDescription.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(516, 0);
BrowseDescription.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(515, 0);
BrowseDescription.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15180, 0);
BrowseDescription.schema.dataTypeNodeId = BrowseDescription.dataTypeNodeId;
BrowseDescription.schema.encodingDefaultBinary = BrowseDescription.encodingDefaultBinary;
BrowseDescription.schema.encodingDefaultXml = BrowseDescription.encodingDefaultXml;
BrowseDescription.schema.encodingDefaultJson = BrowseDescription.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(BrowseDescription.dataTypeNodeId, "BrowseDescription", BrowseDescription);
// --------------------------------------------------------------------------------------------
const schemaBrowseNextRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "BrowseNextRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "releaseContinuationPoints",
            fieldType: "UABoolean",
        },
        {
            name: "continuationPoints",
            fieldType: "ByteString",
            isArray: true
        },
    ]
});
class BrowseNextRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.releaseContinuationPoints = false;
            this.continuationPoints = [];
            return;
        }
        const schema = BrowseNextRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.releaseContinuationPoints = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.releaseContinuationPoints);
        this.continuationPoints = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.continuationPoints);
    }
    static get schema() { return schemaBrowseNextRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.releaseContinuationPoints, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.continuationPoints, stream, node_opcua_basic_types_1.encodeByteString);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.releaseContinuationPoints = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.releaseContinuationPoints);
        this.continuationPoints = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeByteString);
    }
    get schema() { return schemaBrowseNextRequest; }
}
exports.BrowseNextRequest = BrowseNextRequest;
BrowseNextRequest.possibleFields = [
    "requestHeader",
    "releaseContinuationPoints",
    "continuationPoints"
];
BrowseNextRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(531, 0);
BrowseNextRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(533, 0);
BrowseNextRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(532, 0);
BrowseNextRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15186, 0);
BrowseNextRequest.schema.dataTypeNodeId = BrowseNextRequest.dataTypeNodeId;
BrowseNextRequest.schema.encodingDefaultBinary = BrowseNextRequest.encodingDefaultBinary;
BrowseNextRequest.schema.encodingDefaultXml = BrowseNextRequest.encodingDefaultXml;
BrowseNextRequest.schema.encodingDefaultJson = BrowseNextRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(BrowseNextRequest.dataTypeNodeId, "BrowseNextRequest", BrowseNextRequest);
// --------------------------------------------------------------------------------------------
const schemaReferenceDescription = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ReferenceDescription",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "referenceTypeId",
            fieldType: "NodeId",
        },
        {
            name: "isForward",
            fieldType: "UABoolean",
        },
        {
            name: "nodeId",
            fieldType: "ExpandedNodeId",
        },
        {
            name: "browseName",
            fieldType: "QualifiedName",
        },
        {
            name: "displayName",
            fieldType: "LocalizedText",
        },
        {
            name: "nodeClass",
            fieldType: "NodeClass",
        },
        {
            name: "typeDefinition",
            fieldType: "ExpandedNodeId",
        },
    ]
});
class ReferenceDescription extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.referenceTypeId = new node_opcua_nodeid_1.NodeId(null);
            this.isForward = false;
            this.nodeId = new node_opcua_nodeid_1.ExpandedNodeId(null);
            this.browseName = new node_opcua_data_model_1.QualifiedName(null);
            this.displayName = new node_opcua_data_model_1.LocalizedText(null);
            this.nodeClass = 0;
            this.typeDefinition = new node_opcua_nodeid_1.ExpandedNodeId(null);
            return;
        }
        const schema = ReferenceDescription.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.referenceTypeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.referenceTypeId);
        this.isForward = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.isForward);
        this.nodeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.nodeId);
        this.browseName = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.browseName);
        this.displayName = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.displayName);
        this.nodeClass = this.setNodeClass((0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.nodeClass));
        this.typeDefinition = (0, node_opcua_factory_1.initialize_field)(schema.fields[6], options === null || options === void 0 ? void 0 : options.typeDefinition);
    }
    static get schema() { return schemaReferenceDescription; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.referenceTypeId, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.isForward, stream);
        (0, node_opcua_basic_types_1.encodeExpandedNodeId)(this.nodeId, stream);
        (0, node_opcua_data_model_1.encodeQualifiedName)(this.browseName, stream);
        (0, node_opcua_data_model_1.encodeLocalizedText)(this.displayName, stream);
        encodeNodeClass(this.nodeClass, stream);
        (0, node_opcua_basic_types_1.encodeExpandedNodeId)(this.typeDefinition, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.referenceTypeId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.referenceTypeId);
        this.isForward = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.isForward);
        this.nodeId = (0, node_opcua_basic_types_1.decodeExpandedNodeId)(stream, this.nodeId);
        this.browseName = (0, node_opcua_data_model_1.decodeQualifiedName)(stream, this.browseName);
        this.displayName = (0, node_opcua_data_model_1.decodeLocalizedText)(stream, this.displayName);
        this.nodeClass = decodeNodeClass(stream, this.nodeClass);
        this.typeDefinition = (0, node_opcua_basic_types_1.decodeExpandedNodeId)(stream, this.typeDefinition);
    }
    // Define Enumeration setters
    setNodeClass(value) {
        const coercedValue = exports._enumerationNodeClass.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to NodeClass :" + value);
        }
        this.nodeClass = coercedValue.value;
        return this.nodeClass;
    }
    get schema() { return schemaReferenceDescription; }
}
exports.ReferenceDescription = ReferenceDescription;
ReferenceDescription.possibleFields = [
    "referenceTypeId",
    "isForward",
    "nodeId",
    "browseName",
    "displayName",
    "nodeClass",
    "typeDefinition"
];
ReferenceDescription.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(518, 0);
ReferenceDescription.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(520, 0);
ReferenceDescription.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(519, 0);
ReferenceDescription.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15182, 0);
ReferenceDescription.schema.dataTypeNodeId = ReferenceDescription.dataTypeNodeId;
ReferenceDescription.schema.encodingDefaultBinary = ReferenceDescription.encodingDefaultBinary;
ReferenceDescription.schema.encodingDefaultXml = ReferenceDescription.encodingDefaultXml;
ReferenceDescription.schema.encodingDefaultJson = ReferenceDescription.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ReferenceDescription.dataTypeNodeId, "ReferenceDescription", ReferenceDescription);
// --------------------------------------------------------------------------------------------
const schemaBrowseResult = (0, node_opcua_factory_1.buildStructuredType)({
    name: "BrowseResult",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "statusCode",
            fieldType: "StatusCode",
        },
        {
            name: "continuationPoint",
            fieldType: "ByteString",
        },
        {
            name: "references",
            fieldType: "ReferenceDescription",
            isArray: true
        },
    ]
});
class BrowseResult extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.statusCode = node_opcua_status_code_1.StatusCodes.Good;
            this.continuationPoint = Buffer.alloc(0);
            this.references = null; /* null array */
            return;
        }
        const schema = BrowseResult.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.statusCode = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.statusCode);
        this.continuationPoint = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.continuationPoint);
        this.references = []; // should default
        if (options.references) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.references));
            this.references = options.references.map((e) => new ReferenceDescription(e));
        }
    }
    static get schema() { return schemaBrowseResult; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_status_code_1.encodeStatusCode)(this.statusCode, stream);
        (0, node_opcua_basic_types_1.encodeByteString)(this.continuationPoint, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.references, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.statusCode = (0, node_opcua_status_code_1.decodeStatusCode)(stream, this.statusCode);
        this.continuationPoint = (0, node_opcua_basic_types_1.decodeByteString)(stream, this.continuationPoint);
        this.references = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new ReferenceDescription(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaBrowseResult; }
}
exports.BrowseResult = BrowseResult;
BrowseResult.possibleFields = [
    "statusCode",
    "continuationPoint",
    "references"
];
BrowseResult.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(522, 0);
BrowseResult.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(524, 0);
BrowseResult.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(523, 0);
BrowseResult.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15183, 0);
BrowseResult.schema.dataTypeNodeId = BrowseResult.dataTypeNodeId;
BrowseResult.schema.encodingDefaultBinary = BrowseResult.encodingDefaultBinary;
BrowseResult.schema.encodingDefaultXml = BrowseResult.encodingDefaultXml;
BrowseResult.schema.encodingDefaultJson = BrowseResult.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(BrowseResult.dataTypeNodeId, "BrowseResult", BrowseResult);
// --------------------------------------------------------------------------------------------
const schemaBrowseNextResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "BrowseNextResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "results",
            fieldType: "BrowseResult",
            isArray: true
        },
        {
            name: "diagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class BrowseNextResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.results = null; /* null array */
            this.diagnosticInfos = [];
            return;
        }
        const schema = BrowseNextResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.results = []; // should default
        if (options.results) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.results));
            this.results = options.results.map((e) => new BrowseResult(e));
        }
        this.diagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.diagnosticInfos);
    }
    static get schema() { return schemaBrowseNextResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.results, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.diagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.results = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new BrowseResult(null);
            obj.decode(stream1);
            return obj;
        });
        this.diagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaBrowseNextResponse; }
}
exports.BrowseNextResponse = BrowseNextResponse;
BrowseNextResponse.possibleFields = [
    "responseHeader",
    "results",
    "diagnosticInfos"
];
BrowseNextResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(534, 0);
BrowseNextResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(536, 0);
BrowseNextResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(535, 0);
BrowseNextResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15187, 0);
BrowseNextResponse.schema.dataTypeNodeId = BrowseNextResponse.dataTypeNodeId;
BrowseNextResponse.schema.encodingDefaultBinary = BrowseNextResponse.encodingDefaultBinary;
BrowseNextResponse.schema.encodingDefaultXml = BrowseNextResponse.encodingDefaultXml;
BrowseNextResponse.schema.encodingDefaultJson = BrowseNextResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(BrowseNextResponse.dataTypeNodeId, "BrowseNextResponse", BrowseNextResponse);
// --------------------------------------------------------------------------------------------
const schemaBrowsePath = (0, node_opcua_factory_1.buildStructuredType)({
    name: "BrowsePath",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "startingNode",
            fieldType: "NodeId",
        },
        {
            name: "relativePath",
            fieldType: "RelativePath",
        },
    ]
});
class BrowsePath extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.startingNode = new node_opcua_nodeid_1.NodeId(null);
            this.relativePath = new RelativePath(null);
            return;
        }
        const schema = BrowsePath.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.startingNode = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.startingNode);
        this.relativePath = new RelativePath(options.relativePath);
    }
    static get schema() { return schemaBrowsePath; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.startingNode, stream);
        this.relativePath.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.startingNode = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.startingNode);
        this.relativePath.decode(stream);
    }
    get schema() { return schemaBrowsePath; }
}
exports.BrowsePath = BrowsePath;
BrowsePath.possibleFields = [
    "startingNode",
    "relativePath"
];
BrowsePath.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(543, 0);
BrowsePath.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(545, 0);
BrowsePath.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(544, 0);
BrowsePath.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15190, 0);
BrowsePath.schema.dataTypeNodeId = BrowsePath.dataTypeNodeId;
BrowsePath.schema.encodingDefaultBinary = BrowsePath.encodingDefaultBinary;
BrowsePath.schema.encodingDefaultXml = BrowsePath.encodingDefaultXml;
BrowsePath.schema.encodingDefaultJson = BrowsePath.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(BrowsePath.dataTypeNodeId, "BrowsePath", BrowsePath);
// --------------------------------------------------------------------------------------------
const schemaBrowsePathTarget = (0, node_opcua_factory_1.buildStructuredType)({
    name: "BrowsePathTarget",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "targetId",
            fieldType: "ExpandedNodeId",
        },
        {
            name: "remainingPathIndex",
            fieldType: "UInt32",
        },
    ]
});
class BrowsePathTarget extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.targetId = new node_opcua_nodeid_1.ExpandedNodeId(null);
            this.remainingPathIndex = 0;
            return;
        }
        const schema = BrowsePathTarget.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.targetId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.targetId);
        this.remainingPathIndex = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.remainingPathIndex);
    }
    static get schema() { return schemaBrowsePathTarget; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeExpandedNodeId)(this.targetId, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.remainingPathIndex, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.targetId = (0, node_opcua_basic_types_1.decodeExpandedNodeId)(stream, this.targetId);
        this.remainingPathIndex = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.remainingPathIndex);
    }
    get schema() { return schemaBrowsePathTarget; }
}
exports.BrowsePathTarget = BrowsePathTarget;
BrowsePathTarget.possibleFields = [
    "targetId",
    "remainingPathIndex"
];
BrowsePathTarget.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(546, 0);
BrowsePathTarget.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(548, 0);
BrowsePathTarget.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(547, 0);
BrowsePathTarget.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15191, 0);
BrowsePathTarget.schema.dataTypeNodeId = BrowsePathTarget.dataTypeNodeId;
BrowsePathTarget.schema.encodingDefaultBinary = BrowsePathTarget.encodingDefaultBinary;
BrowsePathTarget.schema.encodingDefaultXml = BrowsePathTarget.encodingDefaultXml;
BrowsePathTarget.schema.encodingDefaultJson = BrowsePathTarget.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(BrowsePathTarget.dataTypeNodeId, "BrowsePathTarget", BrowsePathTarget);
// --------------------------------------------------------------------------------------------
const schemaBrowsePathResult = (0, node_opcua_factory_1.buildStructuredType)({
    name: "BrowsePathResult",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "statusCode",
            fieldType: "StatusCode",
        },
        {
            name: "targets",
            fieldType: "BrowsePathTarget",
            isArray: true
        },
    ]
});
class BrowsePathResult extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.statusCode = node_opcua_status_code_1.StatusCodes.Good;
            this.targets = null; /* null array */
            return;
        }
        const schema = BrowsePathResult.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.statusCode = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.statusCode);
        this.targets = []; // should default
        if (options.targets) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.targets));
            this.targets = options.targets.map((e) => new BrowsePathTarget(e));
        }
    }
    static get schema() { return schemaBrowsePathResult; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_status_code_1.encodeStatusCode)(this.statusCode, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.targets, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.statusCode = (0, node_opcua_status_code_1.decodeStatusCode)(stream, this.statusCode);
        this.targets = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new BrowsePathTarget(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaBrowsePathResult; }
}
exports.BrowsePathResult = BrowsePathResult;
BrowsePathResult.possibleFields = [
    "statusCode",
    "targets"
];
BrowsePathResult.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(549, 0);
BrowsePathResult.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(551, 0);
BrowsePathResult.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(550, 0);
BrowsePathResult.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15192, 0);
BrowsePathResult.schema.dataTypeNodeId = BrowsePathResult.dataTypeNodeId;
BrowsePathResult.schema.encodingDefaultBinary = BrowsePathResult.encodingDefaultBinary;
BrowsePathResult.schema.encodingDefaultXml = BrowsePathResult.encodingDefaultXml;
BrowsePathResult.schema.encodingDefaultJson = BrowsePathResult.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(BrowsePathResult.dataTypeNodeId, "BrowsePathResult", BrowsePathResult);
// --------------------------------------------------------------------------------------------
const schemaViewDescription = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ViewDescription",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "viewId",
            fieldType: "NodeId",
        },
        {
            name: "timestamp",
            fieldType: "DateTime",
        },
        {
            name: "viewVersion",
            fieldType: "UInt32",
        },
    ]
});
class ViewDescription extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.viewId = new node_opcua_nodeid_1.NodeId(null);
            this.timestamp = new Date();
            this.viewVersion = 0;
            return;
        }
        const schema = ViewDescription.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.viewId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.viewId);
        this.timestamp = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.timestamp);
        this.viewVersion = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.viewVersion);
    }
    static get schema() { return schemaViewDescription; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.viewId, stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.timestamp, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.viewVersion, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.viewId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.viewId);
        this.timestamp = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.timestamp);
        this.viewVersion = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.viewVersion);
    }
    get schema() { return schemaViewDescription; }
}
exports.ViewDescription = ViewDescription;
ViewDescription.possibleFields = [
    "viewId",
    "timestamp",
    "viewVersion"
];
ViewDescription.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(511, 0);
ViewDescription.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(513, 0);
ViewDescription.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(512, 0);
ViewDescription.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15179, 0);
ViewDescription.schema.dataTypeNodeId = ViewDescription.dataTypeNodeId;
ViewDescription.schema.encodingDefaultBinary = ViewDescription.encodingDefaultBinary;
ViewDescription.schema.encodingDefaultXml = ViewDescription.encodingDefaultXml;
ViewDescription.schema.encodingDefaultJson = ViewDescription.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ViewDescription.dataTypeNodeId, "ViewDescription", ViewDescription);
// --------------------------------------------------------------------------------------------
const schemaBrowseRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "BrowseRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "view",
            fieldType: "ViewDescription",
        },
        {
            name: "requestedMaxReferencesPerNode",
            fieldType: "UInt32",
        },
        {
            name: "nodesToBrowse",
            fieldType: "BrowseDescription",
            isArray: true
        },
    ]
});
class BrowseRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.view = new ViewDescription(null);
            this.requestedMaxReferencesPerNode = 0;
            this.nodesToBrowse = null; /* null array */
            return;
        }
        const schema = BrowseRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.view = new ViewDescription(options.view);
        this.requestedMaxReferencesPerNode = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.requestedMaxReferencesPerNode);
        this.nodesToBrowse = []; // should default
        if (options.nodesToBrowse) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.nodesToBrowse));
            this.nodesToBrowse = options.nodesToBrowse.map((e) => new BrowseDescription(e));
        }
    }
    static get schema() { return schemaBrowseRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        this.view.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.requestedMaxReferencesPerNode, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.nodesToBrowse, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.view.decode(stream);
        this.requestedMaxReferencesPerNode = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.requestedMaxReferencesPerNode);
        this.nodesToBrowse = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new BrowseDescription(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaBrowseRequest; }
}
exports.BrowseRequest = BrowseRequest;
BrowseRequest.possibleFields = [
    "requestHeader",
    "view",
    "requestedMaxReferencesPerNode",
    "nodesToBrowse"
];
BrowseRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(525, 0);
BrowseRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(527, 0);
BrowseRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(526, 0);
BrowseRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15184, 0);
BrowseRequest.schema.dataTypeNodeId = BrowseRequest.dataTypeNodeId;
BrowseRequest.schema.encodingDefaultBinary = BrowseRequest.encodingDefaultBinary;
BrowseRequest.schema.encodingDefaultXml = BrowseRequest.encodingDefaultXml;
BrowseRequest.schema.encodingDefaultJson = BrowseRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(BrowseRequest.dataTypeNodeId, "BrowseRequest", BrowseRequest);
// --------------------------------------------------------------------------------------------
const schemaBrowseResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "BrowseResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "results",
            fieldType: "BrowseResult",
            isArray: true
        },
        {
            name: "diagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class BrowseResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.results = null; /* null array */
            this.diagnosticInfos = [];
            return;
        }
        const schema = BrowseResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.results = []; // should default
        if (options.results) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.results));
            this.results = options.results.map((e) => new BrowseResult(e));
        }
        this.diagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.diagnosticInfos);
    }
    static get schema() { return schemaBrowseResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.results, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.diagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.results = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new BrowseResult(null);
            obj.decode(stream1);
            return obj;
        });
        this.diagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaBrowseResponse; }
}
exports.BrowseResponse = BrowseResponse;
BrowseResponse.possibleFields = [
    "responseHeader",
    "results",
    "diagnosticInfos"
];
BrowseResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(528, 0);
BrowseResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(530, 0);
BrowseResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(529, 0);
BrowseResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15185, 0);
BrowseResponse.schema.dataTypeNodeId = BrowseResponse.dataTypeNodeId;
BrowseResponse.schema.encodingDefaultBinary = BrowseResponse.encodingDefaultBinary;
BrowseResponse.schema.encodingDefaultXml = BrowseResponse.encodingDefaultXml;
BrowseResponse.schema.encodingDefaultJson = BrowseResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(BrowseResponse.dataTypeNodeId, "BrowseResponse", BrowseResponse);
// --------------------------------------------------------------------------------------------
const schemaBuildInfo = (0, node_opcua_factory_1.buildStructuredType)({
    name: "BuildInfo",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "productUri",
            fieldType: "UAString",
        },
        {
            name: "manufacturerName",
            fieldType: "UAString",
        },
        {
            name: "productName",
            fieldType: "UAString",
        },
        {
            name: "softwareVersion",
            fieldType: "UAString",
        },
        {
            name: "buildNumber",
            fieldType: "UAString",
        },
        {
            name: "buildDate",
            fieldType: "DateTime",
        },
    ]
});
class BuildInfo extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.productUri = null;
            this.manufacturerName = null;
            this.productName = null;
            this.softwareVersion = null;
            this.buildNumber = null;
            this.buildDate = new Date();
            return;
        }
        const schema = BuildInfo.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.productUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.productUri);
        this.manufacturerName = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.manufacturerName);
        this.productName = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.productName);
        this.softwareVersion = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.softwareVersion);
        this.buildNumber = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.buildNumber);
        this.buildDate = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.buildDate);
    }
    static get schema() { return schemaBuildInfo; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.productUri, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.manufacturerName, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.productName, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.softwareVersion, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.buildNumber, stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.buildDate, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.productUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.productUri);
        this.manufacturerName = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.manufacturerName);
        this.productName = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.productName);
        this.softwareVersion = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.softwareVersion);
        this.buildNumber = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.buildNumber);
        this.buildDate = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.buildDate);
    }
    get schema() { return schemaBuildInfo; }
}
exports.BuildInfo = BuildInfo;
BuildInfo.possibleFields = [
    "productUri",
    "manufacturerName",
    "productName",
    "softwareVersion",
    "buildNumber",
    "buildDate"
];
BuildInfo.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(338, 0);
BuildInfo.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(340, 0);
BuildInfo.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(339, 0);
BuildInfo.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15361, 0);
BuildInfo.schema.dataTypeNodeId = BuildInfo.dataTypeNodeId;
BuildInfo.schema.encodingDefaultBinary = BuildInfo.encodingDefaultBinary;
BuildInfo.schema.encodingDefaultXml = BuildInfo.encodingDefaultXml;
BuildInfo.schema.encodingDefaultJson = BuildInfo.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(BuildInfo.dataTypeNodeId, "BuildInfo", BuildInfo);
// --------------------------------------------------------------------------------------------
const schemaCallMethodRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "CallMethodRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "objectId",
            fieldType: "NodeId",
        },
        {
            name: "methodId",
            fieldType: "NodeId",
        },
        {
            name: "inputArguments",
            fieldType: "Variant",
            isArray: true
        },
    ]
});
class CallMethodRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.objectId = new node_opcua_nodeid_1.NodeId(null);
            this.methodId = new node_opcua_nodeid_1.NodeId(null);
            this.inputArguments = [];
            return;
        }
        const schema = CallMethodRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.objectId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.objectId);
        this.methodId = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.methodId);
        this.inputArguments = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.inputArguments);
    }
    static get schema() { return schemaCallMethodRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.objectId, stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.methodId, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.inputArguments, stream, node_opcua_variant_1.encodeVariant);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.objectId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.objectId);
        this.methodId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.methodId);
        this.inputArguments = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_variant_1.decodeVariant);
    }
    get schema() { return schemaCallMethodRequest; }
}
exports.CallMethodRequest = CallMethodRequest;
CallMethodRequest.possibleFields = [
    "objectId",
    "methodId",
    "inputArguments"
];
CallMethodRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(704, 0);
CallMethodRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(706, 0);
CallMethodRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(705, 0);
CallMethodRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15289, 0);
CallMethodRequest.schema.dataTypeNodeId = CallMethodRequest.dataTypeNodeId;
CallMethodRequest.schema.encodingDefaultBinary = CallMethodRequest.encodingDefaultBinary;
CallMethodRequest.schema.encodingDefaultXml = CallMethodRequest.encodingDefaultXml;
CallMethodRequest.schema.encodingDefaultJson = CallMethodRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(CallMethodRequest.dataTypeNodeId, "CallMethodRequest", CallMethodRequest);
// --------------------------------------------------------------------------------------------
const schemaCallMethodResult = (0, node_opcua_factory_1.buildStructuredType)({
    name: "CallMethodResult",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "statusCode",
            fieldType: "StatusCode",
        },
        {
            name: "inputArgumentResults",
            fieldType: "StatusCode",
            isArray: true
        },
        {
            name: "inputArgumentDiagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
        {
            name: "outputArguments",
            fieldType: "Variant",
            isArray: true
        },
    ]
});
class CallMethodResult extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.statusCode = node_opcua_status_code_1.StatusCodes.Good;
            this.inputArgumentResults = [];
            this.inputArgumentDiagnosticInfos = [];
            this.outputArguments = [];
            return;
        }
        const schema = CallMethodResult.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.statusCode = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.statusCode);
        this.inputArgumentResults = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.inputArgumentResults);
        this.inputArgumentDiagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.inputArgumentDiagnosticInfos);
        this.outputArguments = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[3], options === null || options === void 0 ? void 0 : options.outputArguments);
    }
    static get schema() { return schemaCallMethodResult; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_status_code_1.encodeStatusCode)(this.statusCode, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.inputArgumentResults, stream, node_opcua_status_code_1.encodeStatusCode);
        (0, node_opcua_basic_types_1.encodeArray)(this.inputArgumentDiagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
        (0, node_opcua_basic_types_1.encodeArray)(this.outputArguments, stream, node_opcua_variant_1.encodeVariant);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.statusCode = (0, node_opcua_status_code_1.decodeStatusCode)(stream, this.statusCode);
        this.inputArgumentResults = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_status_code_1.decodeStatusCode);
        this.inputArgumentDiagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
        this.outputArguments = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_variant_1.decodeVariant);
    }
    get schema() { return schemaCallMethodResult; }
}
exports.CallMethodResult = CallMethodResult;
CallMethodResult.possibleFields = [
    "statusCode",
    "inputArgumentResults",
    "inputArgumentDiagnosticInfos",
    "outputArguments"
];
CallMethodResult.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(707, 0);
CallMethodResult.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(709, 0);
CallMethodResult.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(708, 0);
CallMethodResult.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15290, 0);
CallMethodResult.schema.dataTypeNodeId = CallMethodResult.dataTypeNodeId;
CallMethodResult.schema.encodingDefaultBinary = CallMethodResult.encodingDefaultBinary;
CallMethodResult.schema.encodingDefaultXml = CallMethodResult.encodingDefaultXml;
CallMethodResult.schema.encodingDefaultJson = CallMethodResult.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(CallMethodResult.dataTypeNodeId, "CallMethodResult", CallMethodResult);
// --------------------------------------------------------------------------------------------
const schemaCallRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "CallRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "methodsToCall",
            fieldType: "CallMethodRequest",
            isArray: true
        },
    ]
});
class CallRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.methodsToCall = null; /* null array */
            return;
        }
        const schema = CallRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.methodsToCall = []; // should default
        if (options.methodsToCall) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.methodsToCall));
            this.methodsToCall = options.methodsToCall.map((e) => new CallMethodRequest(e));
        }
    }
    static get schema() { return schemaCallRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.methodsToCall, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.methodsToCall = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new CallMethodRequest(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaCallRequest; }
}
exports.CallRequest = CallRequest;
CallRequest.possibleFields = [
    "requestHeader",
    "methodsToCall"
];
CallRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(710, 0);
CallRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(712, 0);
CallRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(711, 0);
CallRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15291, 0);
CallRequest.schema.dataTypeNodeId = CallRequest.dataTypeNodeId;
CallRequest.schema.encodingDefaultBinary = CallRequest.encodingDefaultBinary;
CallRequest.schema.encodingDefaultXml = CallRequest.encodingDefaultXml;
CallRequest.schema.encodingDefaultJson = CallRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(CallRequest.dataTypeNodeId, "CallRequest", CallRequest);
// --------------------------------------------------------------------------------------------
const schemaCallResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "CallResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "results",
            fieldType: "CallMethodResult",
            isArray: true
        },
        {
            name: "diagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class CallResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.results = null; /* null array */
            this.diagnosticInfos = [];
            return;
        }
        const schema = CallResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.results = []; // should default
        if (options.results) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.results));
            this.results = options.results.map((e) => new CallMethodResult(e));
        }
        this.diagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.diagnosticInfos);
    }
    static get schema() { return schemaCallResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.results, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.diagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.results = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new CallMethodResult(null);
            obj.decode(stream1);
            return obj;
        });
        this.diagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaCallResponse; }
}
exports.CallResponse = CallResponse;
CallResponse.possibleFields = [
    "responseHeader",
    "results",
    "diagnosticInfos"
];
CallResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(713, 0);
CallResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(715, 0);
CallResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(714, 0);
CallResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15292, 0);
CallResponse.schema.dataTypeNodeId = CallResponse.dataTypeNodeId;
CallResponse.schema.encodingDefaultBinary = CallResponse.encodingDefaultBinary;
CallResponse.schema.encodingDefaultXml = CallResponse.encodingDefaultXml;
CallResponse.schema.encodingDefaultJson = CallResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(CallResponse.dataTypeNodeId, "CallResponse", CallResponse);
// --------------------------------------------------------------------------------------------
const schemaCancelRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "CancelRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "requestHandle",
            fieldType: "UInt32",
        },
    ]
});
class CancelRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.requestHandle = 0;
            return;
        }
        const schema = CancelRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.requestHandle = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.requestHandle);
    }
    static get schema() { return schemaCancelRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.requestHandle, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.requestHandle = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.requestHandle);
    }
    get schema() { return schemaCancelRequest; }
}
exports.CancelRequest = CancelRequest;
CancelRequest.possibleFields = [
    "requestHeader",
    "requestHandle"
];
CancelRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(477, 0);
CancelRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(479, 0);
CancelRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(478, 0);
CancelRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15149, 0);
CancelRequest.schema.dataTypeNodeId = CancelRequest.dataTypeNodeId;
CancelRequest.schema.encodingDefaultBinary = CancelRequest.encodingDefaultBinary;
CancelRequest.schema.encodingDefaultXml = CancelRequest.encodingDefaultXml;
CancelRequest.schema.encodingDefaultJson = CancelRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(CancelRequest.dataTypeNodeId, "CancelRequest", CancelRequest);
// --------------------------------------------------------------------------------------------
const schemaCancelResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "CancelResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "cancelCount",
            fieldType: "UInt32",
        },
    ]
});
class CancelResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.cancelCount = 0;
            return;
        }
        const schema = CancelResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.cancelCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.cancelCount);
    }
    static get schema() { return schemaCancelResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.cancelCount, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.cancelCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.cancelCount);
    }
    get schema() { return schemaCancelResponse; }
}
exports.CancelResponse = CancelResponse;
CancelResponse.possibleFields = [
    "responseHeader",
    "cancelCount"
];
CancelResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(480, 0);
CancelResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(482, 0);
CancelResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(481, 0);
CancelResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15150, 0);
CancelResponse.schema.dataTypeNodeId = CancelResponse.dataTypeNodeId;
CancelResponse.schema.encodingDefaultBinary = CancelResponse.encodingDefaultBinary;
CancelResponse.schema.encodingDefaultXml = CancelResponse.encodingDefaultXml;
CancelResponse.schema.encodingDefaultJson = CancelResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(CancelResponse.dataTypeNodeId, "CancelResponse", CancelResponse);
// --------------------------------------------------------------------------------------------
const schemaCartesianCoordinates = (0, node_opcua_factory_1.buildStructuredType)({
    name: "CartesianCoordinates",
    baseType: "ExtensionObject",
    fields: []
});
class CartesianCoordinates extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            return;
        }
        const schema = CartesianCoordinates.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
    }
    static get schema() { return schemaCartesianCoordinates; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
    }
    get schema() { return schemaCartesianCoordinates; }
}
exports.CartesianCoordinates = CartesianCoordinates;
CartesianCoordinates.possibleFields = [];
CartesianCoordinates.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18809, 0);
CartesianCoordinates.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18818, 0);
CartesianCoordinates.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18854, 0);
CartesianCoordinates.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(19067, 0);
CartesianCoordinates.schema.dataTypeNodeId = CartesianCoordinates.dataTypeNodeId;
CartesianCoordinates.schema.encodingDefaultBinary = CartesianCoordinates.encodingDefaultBinary;
CartesianCoordinates.schema.encodingDefaultXml = CartesianCoordinates.encodingDefaultXml;
CartesianCoordinates.schema.encodingDefaultJson = CartesianCoordinates.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(CartesianCoordinates.dataTypeNodeId, "CartesianCoordinates", CartesianCoordinates);
// --------------------------------------------------------------------------------------------
const schemaChannelSecurityToken = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ChannelSecurityToken",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "channelId",
            fieldType: "UInt32",
        },
        {
            name: "tokenId",
            fieldType: "UInt32",
        },
        {
            name: "createdAt",
            fieldType: "DateTime",
        },
        {
            name: "revisedLifetime",
            fieldType: "UInt32",
        },
    ]
});
class ChannelSecurityToken extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.channelId = 0;
            this.tokenId = 0;
            this.createdAt = new Date();
            this.revisedLifetime = 0;
            return;
        }
        const schema = ChannelSecurityToken.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.channelId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.channelId);
        this.tokenId = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.tokenId);
        this.createdAt = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.createdAt);
        this.revisedLifetime = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.revisedLifetime);
    }
    static get schema() { return schemaChannelSecurityToken; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.channelId, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.tokenId, stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.createdAt, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.revisedLifetime, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.channelId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.channelId);
        this.tokenId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.tokenId);
        this.createdAt = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.createdAt);
        this.revisedLifetime = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.revisedLifetime);
    }
    get schema() { return schemaChannelSecurityToken; }
}
exports.ChannelSecurityToken = ChannelSecurityToken;
ChannelSecurityToken.possibleFields = [
    "channelId",
    "tokenId",
    "createdAt",
    "revisedLifetime"
];
ChannelSecurityToken.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(441, 0);
ChannelSecurityToken.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(443, 0);
ChannelSecurityToken.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(442, 0);
ChannelSecurityToken.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15131, 0);
ChannelSecurityToken.schema.dataTypeNodeId = ChannelSecurityToken.dataTypeNodeId;
ChannelSecurityToken.schema.encodingDefaultBinary = ChannelSecurityToken.encodingDefaultBinary;
ChannelSecurityToken.schema.encodingDefaultXml = ChannelSecurityToken.encodingDefaultXml;
ChannelSecurityToken.schema.encodingDefaultJson = ChannelSecurityToken.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ChannelSecurityToken.dataTypeNodeId, "ChannelSecurityToken", ChannelSecurityToken);
// --------------------------------------------------------------------------------------------
const schemaCloseSecureChannelRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "CloseSecureChannelRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
    ]
});
class CloseSecureChannelRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            return;
        }
        const schema = CloseSecureChannelRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
    }
    static get schema() { return schemaCloseSecureChannelRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
    }
    get schema() { return schemaCloseSecureChannelRequest; }
}
exports.CloseSecureChannelRequest = CloseSecureChannelRequest;
CloseSecureChannelRequest.possibleFields = [
    "requestHeader"
];
CloseSecureChannelRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(450, 0);
CloseSecureChannelRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(452, 0);
CloseSecureChannelRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(451, 0);
CloseSecureChannelRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15134, 0);
CloseSecureChannelRequest.schema.dataTypeNodeId = CloseSecureChannelRequest.dataTypeNodeId;
CloseSecureChannelRequest.schema.encodingDefaultBinary = CloseSecureChannelRequest.encodingDefaultBinary;
CloseSecureChannelRequest.schema.encodingDefaultXml = CloseSecureChannelRequest.encodingDefaultXml;
CloseSecureChannelRequest.schema.encodingDefaultJson = CloseSecureChannelRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(CloseSecureChannelRequest.dataTypeNodeId, "CloseSecureChannelRequest", CloseSecureChannelRequest);
// --------------------------------------------------------------------------------------------
const schemaCloseSecureChannelResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "CloseSecureChannelResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
    ]
});
class CloseSecureChannelResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            return;
        }
        const schema = CloseSecureChannelResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
    }
    static get schema() { return schemaCloseSecureChannelResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
    }
    get schema() { return schemaCloseSecureChannelResponse; }
}
exports.CloseSecureChannelResponse = CloseSecureChannelResponse;
CloseSecureChannelResponse.possibleFields = [
    "responseHeader"
];
CloseSecureChannelResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(453, 0);
CloseSecureChannelResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(455, 0);
CloseSecureChannelResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(454, 0);
CloseSecureChannelResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15135, 0);
CloseSecureChannelResponse.schema.dataTypeNodeId = CloseSecureChannelResponse.dataTypeNodeId;
CloseSecureChannelResponse.schema.encodingDefaultBinary = CloseSecureChannelResponse.encodingDefaultBinary;
CloseSecureChannelResponse.schema.encodingDefaultXml = CloseSecureChannelResponse.encodingDefaultXml;
CloseSecureChannelResponse.schema.encodingDefaultJson = CloseSecureChannelResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(CloseSecureChannelResponse.dataTypeNodeId, "CloseSecureChannelResponse", CloseSecureChannelResponse);
// --------------------------------------------------------------------------------------------
const schemaCloseSessionRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "CloseSessionRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "deleteSubscriptions",
            fieldType: "UABoolean",
        },
    ]
});
class CloseSessionRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.deleteSubscriptions = false;
            return;
        }
        const schema = CloseSessionRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.deleteSubscriptions = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.deleteSubscriptions);
    }
    static get schema() { return schemaCloseSessionRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.deleteSubscriptions, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.deleteSubscriptions = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.deleteSubscriptions);
    }
    get schema() { return schemaCloseSessionRequest; }
}
exports.CloseSessionRequest = CloseSessionRequest;
CloseSessionRequest.possibleFields = [
    "requestHeader",
    "deleteSubscriptions"
];
CloseSessionRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(471, 0);
CloseSessionRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(473, 0);
CloseSessionRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(472, 0);
CloseSessionRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15147, 0);
CloseSessionRequest.schema.dataTypeNodeId = CloseSessionRequest.dataTypeNodeId;
CloseSessionRequest.schema.encodingDefaultBinary = CloseSessionRequest.encodingDefaultBinary;
CloseSessionRequest.schema.encodingDefaultXml = CloseSessionRequest.encodingDefaultXml;
CloseSessionRequest.schema.encodingDefaultJson = CloseSessionRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(CloseSessionRequest.dataTypeNodeId, "CloseSessionRequest", CloseSessionRequest);
// --------------------------------------------------------------------------------------------
const schemaCloseSessionResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "CloseSessionResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
    ]
});
class CloseSessionResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            return;
        }
        const schema = CloseSessionResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
    }
    static get schema() { return schemaCloseSessionResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
    }
    get schema() { return schemaCloseSessionResponse; }
}
exports.CloseSessionResponse = CloseSessionResponse;
CloseSessionResponse.possibleFields = [
    "responseHeader"
];
CloseSessionResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(474, 0);
CloseSessionResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(476, 0);
CloseSessionResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(475, 0);
CloseSessionResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15148, 0);
CloseSessionResponse.schema.dataTypeNodeId = CloseSessionResponse.dataTypeNodeId;
CloseSessionResponse.schema.encodingDefaultBinary = CloseSessionResponse.encodingDefaultBinary;
CloseSessionResponse.schema.encodingDefaultXml = CloseSessionResponse.encodingDefaultXml;
CloseSessionResponse.schema.encodingDefaultJson = CloseSessionResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(CloseSessionResponse.dataTypeNodeId, "CloseSessionResponse", CloseSessionResponse);
// --------------------------------------------------------------------------------------------
const schemaComplexNumberType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ComplexNumberType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "real",
            fieldType: "Float",
        },
        {
            name: "imaginary",
            fieldType: "Float",
        },
    ]
});
class ComplexNumberType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.real = 0;
            this.imaginary = 0;
            return;
        }
        const schema = ComplexNumberType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.real = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.real);
        this.imaginary = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.imaginary);
    }
    static get schema() { return schemaComplexNumberType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeFloat)(this.real, stream);
        (0, node_opcua_basic_types_1.encodeFloat)(this.imaginary, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.real = (0, node_opcua_basic_types_1.decodeFloat)(stream, this.real);
        this.imaginary = (0, node_opcua_basic_types_1.decodeFloat)(stream, this.imaginary);
    }
    get schema() { return schemaComplexNumberType; }
}
exports.ComplexNumberType = ComplexNumberType;
ComplexNumberType.possibleFields = [
    "real",
    "imaginary"
];
ComplexNumberType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12171, 0);
ComplexNumberType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12181, 0);
ComplexNumberType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12173, 0);
ComplexNumberType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15377, 0);
ComplexNumberType.schema.dataTypeNodeId = ComplexNumberType.dataTypeNodeId;
ComplexNumberType.schema.encodingDefaultBinary = ComplexNumberType.encodingDefaultBinary;
ComplexNumberType.schema.encodingDefaultXml = ComplexNumberType.encodingDefaultXml;
ComplexNumberType.schema.encodingDefaultJson = ComplexNumberType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ComplexNumberType.dataTypeNodeId, "ComplexNumberType", ComplexNumberType);
// --------------------------------------------------------------------------------------------
const schemaConfigurationVersionDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ConfigurationVersionDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "majorVersion",
            fieldType: "UInt32",
        },
        {
            name: "minorVersion",
            fieldType: "UInt32",
        },
    ]
});
class ConfigurationVersionDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.majorVersion = 0;
            this.minorVersion = 0;
            return;
        }
        const schema = ConfigurationVersionDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.majorVersion = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.majorVersion);
        this.minorVersion = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.minorVersion);
    }
    static get schema() { return schemaConfigurationVersionDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.majorVersion, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.minorVersion, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.majorVersion = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.majorVersion);
        this.minorVersion = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.minorVersion);
    }
    get schema() { return schemaConfigurationVersionDataType; }
}
exports.ConfigurationVersionDataType = ConfigurationVersionDataType;
ConfigurationVersionDataType.possibleFields = [
    "majorVersion",
    "minorVersion"
];
ConfigurationVersionDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(14593, 0);
ConfigurationVersionDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(14847, 0);
ConfigurationVersionDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(14803, 0);
ConfigurationVersionDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15049, 0);
ConfigurationVersionDataType.schema.dataTypeNodeId = ConfigurationVersionDataType.dataTypeNodeId;
ConfigurationVersionDataType.schema.encodingDefaultBinary = ConfigurationVersionDataType.encodingDefaultBinary;
ConfigurationVersionDataType.schema.encodingDefaultXml = ConfigurationVersionDataType.encodingDefaultXml;
ConfigurationVersionDataType.schema.encodingDefaultJson = ConfigurationVersionDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ConfigurationVersionDataType.dataTypeNodeId, "ConfigurationVersionDataType", ConfigurationVersionDataType);
// --------------------------------------------------------------------------------------------
var FilterOperator;
(function (FilterOperator) {
    FilterOperator[FilterOperator["Equals"] = 0] = "Equals";
    FilterOperator[FilterOperator["IsNull"] = 1] = "IsNull";
    FilterOperator[FilterOperator["GreaterThan"] = 2] = "GreaterThan";
    FilterOperator[FilterOperator["LessThan"] = 3] = "LessThan";
    FilterOperator[FilterOperator["GreaterThanOrEqual"] = 4] = "GreaterThanOrEqual";
    FilterOperator[FilterOperator["LessThanOrEqual"] = 5] = "LessThanOrEqual";
    FilterOperator[FilterOperator["Like"] = 6] = "Like";
    FilterOperator[FilterOperator["Not"] = 7] = "Not";
    FilterOperator[FilterOperator["Between"] = 8] = "Between";
    FilterOperator[FilterOperator["InList"] = 9] = "InList";
    FilterOperator[FilterOperator["And"] = 10] = "And";
    FilterOperator[FilterOperator["Or"] = 11] = "Or";
    FilterOperator[FilterOperator["Cast"] = 12] = "Cast";
    FilterOperator[FilterOperator["InView"] = 13] = "InView";
    FilterOperator[FilterOperator["OfType"] = 14] = "OfType";
    FilterOperator[FilterOperator["RelatedTo"] = 15] = "RelatedTo";
    FilterOperator[FilterOperator["BitwiseAnd"] = 16] = "BitwiseAnd";
    FilterOperator[FilterOperator["BitwiseOr"] = 17] = "BitwiseOr";
    FilterOperator[FilterOperator["Invalid"] = 4294967295] = "Invalid";
})(FilterOperator = exports.FilterOperator || (exports.FilterOperator = {}));
const schemaFilterOperator = {
    enumValues: FilterOperator,
    flaggable: false,
    minValue: 0,
    maxValue: 17,
    name: "FilterOperator"
};
function decodeFilterOperator(stream, _value) {
    let value = stream.readUInt32();
    value = (value < schemaFilterOperator.minValue || value > schemaFilterOperator.maxValue) ? FilterOperator.Invalid : value;
    return value;
}
function encodeFilterOperator(value, stream) {
    stream.writeUInt32(value);
}
exports._enumerationFilterOperator = (0, node_opcua_factory_1.registerEnumeration)(schemaFilterOperator);
(0, node_opcua_assert_1.assert)(exports._enumerationFilterOperator.isFlaggable === false);
// --------------------------------------------------------------------------------------------
const schemaContentFilterElement = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ContentFilterElement",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "filterOperator",
            fieldType: "FilterOperator",
        },
        {
            name: "filterOperands",
            fieldType: "ExtensionObject",
            isArray: true
        },
    ]
});
class ContentFilterElement extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.filterOperator = 0;
            this.filterOperands = [];
            return;
        }
        const schema = ContentFilterElement.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.filterOperator = this.setFilterOperator((0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.filterOperator));
        this.filterOperands = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.filterOperands);
    }
    static get schema() { return schemaContentFilterElement; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        encodeFilterOperator(this.filterOperator, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.filterOperands, stream, node_opcua_extension_object_1.encodeExtensionObject);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.filterOperator = decodeFilterOperator(stream, this.filterOperator);
        this.filterOperands = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_extension_object_1.decodeExtensionObject);
    }
    // Define Enumeration setters
    setFilterOperator(value) {
        const coercedValue = exports._enumerationFilterOperator.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to FilterOperator :" + value);
        }
        this.filterOperator = coercedValue.value;
        return this.filterOperator;
    }
    get schema() { return schemaContentFilterElement; }
}
exports.ContentFilterElement = ContentFilterElement;
ContentFilterElement.possibleFields = [
    "filterOperator",
    "filterOperands"
];
ContentFilterElement.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(583, 0);
ContentFilterElement.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(585, 0);
ContentFilterElement.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(584, 0);
ContentFilterElement.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15204, 0);
ContentFilterElement.schema.dataTypeNodeId = ContentFilterElement.dataTypeNodeId;
ContentFilterElement.schema.encodingDefaultBinary = ContentFilterElement.encodingDefaultBinary;
ContentFilterElement.schema.encodingDefaultXml = ContentFilterElement.encodingDefaultXml;
ContentFilterElement.schema.encodingDefaultJson = ContentFilterElement.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ContentFilterElement.dataTypeNodeId, "ContentFilterElement", ContentFilterElement);
// --------------------------------------------------------------------------------------------
const schemaContentFilter = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ContentFilter",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "elements",
            fieldType: "ContentFilterElement",
            isArray: true
        },
    ]
});
class ContentFilter extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.elements = null; /* null array */
            return;
        }
        const schema = ContentFilter.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.elements = []; // should default
        if (options.elements) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.elements));
            this.elements = options.elements.map((e) => new ContentFilterElement(e));
        }
    }
    static get schema() { return schemaContentFilter; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.elements, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.elements = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new ContentFilterElement(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaContentFilter; }
}
exports.ContentFilter = ContentFilter;
ContentFilter.possibleFields = [
    "elements"
];
ContentFilter.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(586, 0);
ContentFilter.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(588, 0);
ContentFilter.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(587, 0);
ContentFilter.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15205, 0);
ContentFilter.schema.dataTypeNodeId = ContentFilter.dataTypeNodeId;
ContentFilter.schema.encodingDefaultBinary = ContentFilter.encodingDefaultBinary;
ContentFilter.schema.encodingDefaultXml = ContentFilter.encodingDefaultXml;
ContentFilter.schema.encodingDefaultJson = ContentFilter.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ContentFilter.dataTypeNodeId, "ContentFilter", ContentFilter);
// --------------------------------------------------------------------------------------------
const schemaContentFilterElementResult = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ContentFilterElementResult",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "statusCode",
            fieldType: "StatusCode",
        },
        {
            name: "operandStatusCodes",
            fieldType: "StatusCode",
            isArray: true
        },
        {
            name: "operandDiagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class ContentFilterElementResult extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.statusCode = node_opcua_status_code_1.StatusCodes.Good;
            this.operandStatusCodes = [];
            this.operandDiagnosticInfos = [];
            return;
        }
        const schema = ContentFilterElementResult.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.statusCode = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.statusCode);
        this.operandStatusCodes = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.operandStatusCodes);
        this.operandDiagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.operandDiagnosticInfos);
    }
    static get schema() { return schemaContentFilterElementResult; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_status_code_1.encodeStatusCode)(this.statusCode, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.operandStatusCodes, stream, node_opcua_status_code_1.encodeStatusCode);
        (0, node_opcua_basic_types_1.encodeArray)(this.operandDiagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.statusCode = (0, node_opcua_status_code_1.decodeStatusCode)(stream, this.statusCode);
        this.operandStatusCodes = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_status_code_1.decodeStatusCode);
        this.operandDiagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaContentFilterElementResult; }
}
exports.ContentFilterElementResult = ContentFilterElementResult;
ContentFilterElementResult.possibleFields = [
    "statusCode",
    "operandStatusCodes",
    "operandDiagnosticInfos"
];
ContentFilterElementResult.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(604, 0);
ContentFilterElementResult.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(606, 0);
ContentFilterElementResult.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(605, 0);
ContentFilterElementResult.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15211, 0);
ContentFilterElementResult.schema.dataTypeNodeId = ContentFilterElementResult.dataTypeNodeId;
ContentFilterElementResult.schema.encodingDefaultBinary = ContentFilterElementResult.encodingDefaultBinary;
ContentFilterElementResult.schema.encodingDefaultXml = ContentFilterElementResult.encodingDefaultXml;
ContentFilterElementResult.schema.encodingDefaultJson = ContentFilterElementResult.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ContentFilterElementResult.dataTypeNodeId, "ContentFilterElementResult", ContentFilterElementResult);
// --------------------------------------------------------------------------------------------
const schemaContentFilterResult = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ContentFilterResult",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "elementResults",
            fieldType: "ContentFilterElementResult",
            isArray: true
        },
        {
            name: "elementDiagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class ContentFilterResult extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.elementResults = null; /* null array */
            this.elementDiagnosticInfos = [];
            return;
        }
        const schema = ContentFilterResult.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.elementResults = []; // should default
        if (options.elementResults) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.elementResults));
            this.elementResults = options.elementResults.map((e) => new ContentFilterElementResult(e));
        }
        this.elementDiagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.elementDiagnosticInfos);
    }
    static get schema() { return schemaContentFilterResult; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.elementResults, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.elementDiagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.elementResults = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new ContentFilterElementResult(null);
            obj.decode(stream1);
            return obj;
        });
        this.elementDiagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaContentFilterResult; }
}
exports.ContentFilterResult = ContentFilterResult;
ContentFilterResult.possibleFields = [
    "elementResults",
    "elementDiagnosticInfos"
];
ContentFilterResult.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(607, 0);
ContentFilterResult.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(609, 0);
ContentFilterResult.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(608, 0);
ContentFilterResult.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15228, 0);
ContentFilterResult.schema.dataTypeNodeId = ContentFilterResult.dataTypeNodeId;
ContentFilterResult.schema.encodingDefaultBinary = ContentFilterResult.encodingDefaultBinary;
ContentFilterResult.schema.encodingDefaultXml = ContentFilterResult.encodingDefaultXml;
ContentFilterResult.schema.encodingDefaultJson = ContentFilterResult.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ContentFilterResult.dataTypeNodeId, "ContentFilterResult", ContentFilterResult);
// --------------------------------------------------------------------------------------------
const schemaReadValueId = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ReadValueId",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "nodeId",
            fieldType: "NodeId",
        },
        {
            name: "attributeId",
            fieldType: "UInt32",
        },
        {
            name: "indexRange",
            fieldType: "NumericRange",
        },
        {
            name: "dataEncoding",
            fieldType: "QualifiedName",
        },
    ]
});
class ReadValueId extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.nodeId = new node_opcua_nodeid_1.NodeId(null);
            this.attributeId = 0;
            this.indexRange = new node_opcua_numeric_range_1.NumericRange(null);
            this.dataEncoding = new node_opcua_data_model_1.QualifiedName(null);
            return;
        }
        const schema = ReadValueId.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.nodeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.nodeId);
        this.attributeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.attributeId);
        this.indexRange = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.indexRange);
        this.dataEncoding = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.dataEncoding);
    }
    static get schema() { return schemaReadValueId; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.nodeId, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.attributeId, stream);
        (0, node_opcua_numeric_range_1.encodeNumericRange)(this.indexRange, stream);
        (0, node_opcua_data_model_1.encodeQualifiedName)(this.dataEncoding, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.nodeId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.nodeId);
        this.attributeId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.attributeId);
        this.indexRange = (0, node_opcua_numeric_range_1.decodeNumericRange)(stream, this.indexRange);
        this.dataEncoding = (0, node_opcua_data_model_1.decodeQualifiedName)(stream, this.dataEncoding);
    }
    get schema() { return schemaReadValueId; }
}
exports.ReadValueId = ReadValueId;
ReadValueId.possibleFields = [
    "nodeId",
    "attributeId",
    "indexRange",
    "dataEncoding"
];
ReadValueId.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(626, 0);
ReadValueId.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(628, 0);
ReadValueId.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(627, 0);
ReadValueId.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15256, 0);
ReadValueId.schema.dataTypeNodeId = ReadValueId.dataTypeNodeId;
ReadValueId.schema.encodingDefaultBinary = ReadValueId.encodingDefaultBinary;
ReadValueId.schema.encodingDefaultXml = ReadValueId.encodingDefaultXml;
ReadValueId.schema.encodingDefaultJson = ReadValueId.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ReadValueId.dataTypeNodeId, "ReadValueId", ReadValueId);
// --------------------------------------------------------------------------------------------
var MonitoringMode;
(function (MonitoringMode) {
    MonitoringMode[MonitoringMode["Disabled"] = 0] = "Disabled";
    MonitoringMode[MonitoringMode["Sampling"] = 1] = "Sampling";
    MonitoringMode[MonitoringMode["Reporting"] = 2] = "Reporting";
    MonitoringMode[MonitoringMode["Invalid"] = 4294967295] = "Invalid";
})(MonitoringMode = exports.MonitoringMode || (exports.MonitoringMode = {}));
const schemaMonitoringMode = {
    enumValues: MonitoringMode,
    flaggable: false,
    minValue: 0,
    maxValue: 2,
    name: "MonitoringMode"
};
function decodeMonitoringMode(stream, _value) {
    let value = stream.readUInt32();
    value = (value < schemaMonitoringMode.minValue || value > schemaMonitoringMode.maxValue) ? MonitoringMode.Invalid : value;
    return value;
}
function encodeMonitoringMode(value, stream) {
    stream.writeUInt32(value);
}
exports._enumerationMonitoringMode = (0, node_opcua_factory_1.registerEnumeration)(schemaMonitoringMode);
(0, node_opcua_assert_1.assert)(exports._enumerationMonitoringMode.isFlaggable === false);
// --------------------------------------------------------------------------------------------
const schemaMonitoringParameters = (0, node_opcua_factory_1.buildStructuredType)({
    name: "MonitoringParameters",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "clientHandle",
            fieldType: "UInt32",
        },
        {
            name: "samplingInterval",
            fieldType: "Double",
        },
        {
            name: "filter",
            fieldType: "ExtensionObject",
        },
        {
            name: "queueSize",
            fieldType: "UInt32",
        },
        {
            name: "discardOldest",
            fieldType: "UABoolean",
        },
    ]
});
class MonitoringParameters extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.clientHandle = 0;
            this.samplingInterval = 0;
            this.filter = null;
            this.queueSize = 0;
            this.discardOldest = false;
            return;
        }
        const schema = MonitoringParameters.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.clientHandle = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.clientHandle);
        this.samplingInterval = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.samplingInterval);
        this.filter = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.filter);
        this.queueSize = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.queueSize);
        this.discardOldest = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.discardOldest);
    }
    static get schema() { return schemaMonitoringParameters; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.clientHandle, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.samplingInterval, stream);
        (0, node_opcua_extension_object_1.encodeExtensionObject)(this.filter, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.queueSize, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.discardOldest, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.clientHandle = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.clientHandle);
        this.samplingInterval = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.samplingInterval);
        this.filter = (0, node_opcua_extension_object_1.decodeExtensionObject)(stream, this.filter);
        this.queueSize = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.queueSize);
        this.discardOldest = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.discardOldest);
    }
    get schema() { return schemaMonitoringParameters; }
}
exports.MonitoringParameters = MonitoringParameters;
MonitoringParameters.possibleFields = [
    "clientHandle",
    "samplingInterval",
    "filter",
    "queueSize",
    "discardOldest"
];
MonitoringParameters.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(740, 0);
MonitoringParameters.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(742, 0);
MonitoringParameters.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(741, 0);
MonitoringParameters.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15320, 0);
MonitoringParameters.schema.dataTypeNodeId = MonitoringParameters.dataTypeNodeId;
MonitoringParameters.schema.encodingDefaultBinary = MonitoringParameters.encodingDefaultBinary;
MonitoringParameters.schema.encodingDefaultXml = MonitoringParameters.encodingDefaultXml;
MonitoringParameters.schema.encodingDefaultJson = MonitoringParameters.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(MonitoringParameters.dataTypeNodeId, "MonitoringParameters", MonitoringParameters);
// --------------------------------------------------------------------------------------------
const schemaMonitoredItemCreateRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "MonitoredItemCreateRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "itemToMonitor",
            fieldType: "ReadValueId",
        },
        {
            name: "monitoringMode",
            fieldType: "MonitoringMode",
        },
        {
            name: "requestedParameters",
            fieldType: "MonitoringParameters",
        },
    ]
});
class MonitoredItemCreateRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.itemToMonitor = new ReadValueId(null);
            this.monitoringMode = 0;
            this.requestedParameters = new MonitoringParameters(null);
            return;
        }
        const schema = MonitoredItemCreateRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.itemToMonitor = new ReadValueId(options.itemToMonitor);
        this.monitoringMode = this.setMonitoringMode((0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.monitoringMode));
        this.requestedParameters = new MonitoringParameters(options.requestedParameters);
    }
    static get schema() { return schemaMonitoredItemCreateRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.itemToMonitor.encode(stream);
        encodeMonitoringMode(this.monitoringMode, stream);
        this.requestedParameters.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.itemToMonitor.decode(stream);
        this.monitoringMode = decodeMonitoringMode(stream, this.monitoringMode);
        this.requestedParameters.decode(stream);
    }
    // Define Enumeration setters
    setMonitoringMode(value) {
        const coercedValue = exports._enumerationMonitoringMode.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to MonitoringMode :" + value);
        }
        this.monitoringMode = coercedValue.value;
        return this.monitoringMode;
    }
    get schema() { return schemaMonitoredItemCreateRequest; }
}
exports.MonitoredItemCreateRequest = MonitoredItemCreateRequest;
MonitoredItemCreateRequest.possibleFields = [
    "itemToMonitor",
    "monitoringMode",
    "requestedParameters"
];
MonitoredItemCreateRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(743, 0);
MonitoredItemCreateRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(745, 0);
MonitoredItemCreateRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(744, 0);
MonitoredItemCreateRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15321, 0);
MonitoredItemCreateRequest.schema.dataTypeNodeId = MonitoredItemCreateRequest.dataTypeNodeId;
MonitoredItemCreateRequest.schema.encodingDefaultBinary = MonitoredItemCreateRequest.encodingDefaultBinary;
MonitoredItemCreateRequest.schema.encodingDefaultXml = MonitoredItemCreateRequest.encodingDefaultXml;
MonitoredItemCreateRequest.schema.encodingDefaultJson = MonitoredItemCreateRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(MonitoredItemCreateRequest.dataTypeNodeId, "MonitoredItemCreateRequest", MonitoredItemCreateRequest);
// --------------------------------------------------------------------------------------------
const schemaCreateMonitoredItemsRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "CreateMonitoredItemsRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "subscriptionId",
            fieldType: "UInt32",
        },
        {
            name: "timestampsToReturn",
            fieldType: "TimestampsToReturn",
        },
        {
            name: "itemsToCreate",
            fieldType: "MonitoredItemCreateRequest",
            isArray: true
        },
    ]
});
class CreateMonitoredItemsRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.subscriptionId = 0;
            this.timestampsToReturn = 0;
            this.itemsToCreate = null; /* null array */
            return;
        }
        const schema = CreateMonitoredItemsRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.subscriptionId = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.subscriptionId);
        this.timestampsToReturn = this.setTimestampsToReturn((0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.timestampsToReturn));
        this.itemsToCreate = []; // should default
        if (options.itemsToCreate) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.itemsToCreate));
            this.itemsToCreate = options.itemsToCreate.map((e) => new MonitoredItemCreateRequest(e));
        }
    }
    static get schema() { return schemaCreateMonitoredItemsRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.subscriptionId, stream);
        (0, node_opcua_data_value_1.encodeTimestampsToReturn)(this.timestampsToReturn, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.itemsToCreate, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.subscriptionId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.subscriptionId);
        this.timestampsToReturn = (0, node_opcua_data_value_1.decodeTimestampsToReturn)(stream, this.timestampsToReturn);
        this.itemsToCreate = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new MonitoredItemCreateRequest(null);
            obj.decode(stream1);
            return obj;
        });
    }
    // Define Enumeration setters
    setTimestampsToReturn(value) {
        const coercedValue = node_opcua_data_value_1._enumerationTimestampsToReturn.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to TimestampsToReturn :" + value);
        }
        this.timestampsToReturn = coercedValue.value;
        return this.timestampsToReturn;
    }
    get schema() { return schemaCreateMonitoredItemsRequest; }
}
exports.CreateMonitoredItemsRequest = CreateMonitoredItemsRequest;
CreateMonitoredItemsRequest.possibleFields = [
    "requestHeader",
    "subscriptionId",
    "timestampsToReturn",
    "itemsToCreate"
];
CreateMonitoredItemsRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(749, 0);
CreateMonitoredItemsRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(751, 0);
CreateMonitoredItemsRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(750, 0);
CreateMonitoredItemsRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15323, 0);
CreateMonitoredItemsRequest.schema.dataTypeNodeId = CreateMonitoredItemsRequest.dataTypeNodeId;
CreateMonitoredItemsRequest.schema.encodingDefaultBinary = CreateMonitoredItemsRequest.encodingDefaultBinary;
CreateMonitoredItemsRequest.schema.encodingDefaultXml = CreateMonitoredItemsRequest.encodingDefaultXml;
CreateMonitoredItemsRequest.schema.encodingDefaultJson = CreateMonitoredItemsRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(CreateMonitoredItemsRequest.dataTypeNodeId, "CreateMonitoredItemsRequest", CreateMonitoredItemsRequest);
// --------------------------------------------------------------------------------------------
const schemaMonitoredItemCreateResult = (0, node_opcua_factory_1.buildStructuredType)({
    name: "MonitoredItemCreateResult",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "statusCode",
            fieldType: "StatusCode",
        },
        {
            name: "monitoredItemId",
            fieldType: "UInt32",
        },
        {
            name: "revisedSamplingInterval",
            fieldType: "Double",
        },
        {
            name: "revisedQueueSize",
            fieldType: "UInt32",
        },
        {
            name: "filterResult",
            fieldType: "ExtensionObject",
        },
    ]
});
class MonitoredItemCreateResult extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.statusCode = node_opcua_status_code_1.StatusCodes.Good;
            this.monitoredItemId = 0;
            this.revisedSamplingInterval = 0;
            this.revisedQueueSize = 0;
            this.filterResult = null;
            return;
        }
        const schema = MonitoredItemCreateResult.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.statusCode = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.statusCode);
        this.monitoredItemId = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.monitoredItemId);
        this.revisedSamplingInterval = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.revisedSamplingInterval);
        this.revisedQueueSize = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.revisedQueueSize);
        this.filterResult = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.filterResult);
    }
    static get schema() { return schemaMonitoredItemCreateResult; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_status_code_1.encodeStatusCode)(this.statusCode, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.monitoredItemId, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.revisedSamplingInterval, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.revisedQueueSize, stream);
        (0, node_opcua_extension_object_1.encodeExtensionObject)(this.filterResult, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.statusCode = (0, node_opcua_status_code_1.decodeStatusCode)(stream, this.statusCode);
        this.monitoredItemId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.monitoredItemId);
        this.revisedSamplingInterval = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.revisedSamplingInterval);
        this.revisedQueueSize = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.revisedQueueSize);
        this.filterResult = (0, node_opcua_extension_object_1.decodeExtensionObject)(stream, this.filterResult);
    }
    get schema() { return schemaMonitoredItemCreateResult; }
}
exports.MonitoredItemCreateResult = MonitoredItemCreateResult;
MonitoredItemCreateResult.possibleFields = [
    "statusCode",
    "monitoredItemId",
    "revisedSamplingInterval",
    "revisedQueueSize",
    "filterResult"
];
MonitoredItemCreateResult.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(746, 0);
MonitoredItemCreateResult.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(748, 0);
MonitoredItemCreateResult.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(747, 0);
MonitoredItemCreateResult.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15322, 0);
MonitoredItemCreateResult.schema.dataTypeNodeId = MonitoredItemCreateResult.dataTypeNodeId;
MonitoredItemCreateResult.schema.encodingDefaultBinary = MonitoredItemCreateResult.encodingDefaultBinary;
MonitoredItemCreateResult.schema.encodingDefaultXml = MonitoredItemCreateResult.encodingDefaultXml;
MonitoredItemCreateResult.schema.encodingDefaultJson = MonitoredItemCreateResult.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(MonitoredItemCreateResult.dataTypeNodeId, "MonitoredItemCreateResult", MonitoredItemCreateResult);
// --------------------------------------------------------------------------------------------
const schemaCreateMonitoredItemsResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "CreateMonitoredItemsResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "results",
            fieldType: "MonitoredItemCreateResult",
            isArray: true
        },
        {
            name: "diagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class CreateMonitoredItemsResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.results = null; /* null array */
            this.diagnosticInfos = [];
            return;
        }
        const schema = CreateMonitoredItemsResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.results = []; // should default
        if (options.results) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.results));
            this.results = options.results.map((e) => new MonitoredItemCreateResult(e));
        }
        this.diagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.diagnosticInfos);
    }
    static get schema() { return schemaCreateMonitoredItemsResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.results, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.diagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.results = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new MonitoredItemCreateResult(null);
            obj.decode(stream1);
            return obj;
        });
        this.diagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaCreateMonitoredItemsResponse; }
}
exports.CreateMonitoredItemsResponse = CreateMonitoredItemsResponse;
CreateMonitoredItemsResponse.possibleFields = [
    "responseHeader",
    "results",
    "diagnosticInfos"
];
CreateMonitoredItemsResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(752, 0);
CreateMonitoredItemsResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(754, 0);
CreateMonitoredItemsResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(753, 0);
CreateMonitoredItemsResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15324, 0);
CreateMonitoredItemsResponse.schema.dataTypeNodeId = CreateMonitoredItemsResponse.dataTypeNodeId;
CreateMonitoredItemsResponse.schema.encodingDefaultBinary = CreateMonitoredItemsResponse.encodingDefaultBinary;
CreateMonitoredItemsResponse.schema.encodingDefaultXml = CreateMonitoredItemsResponse.encodingDefaultXml;
CreateMonitoredItemsResponse.schema.encodingDefaultJson = CreateMonitoredItemsResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(CreateMonitoredItemsResponse.dataTypeNodeId, "CreateMonitoredItemsResponse", CreateMonitoredItemsResponse);
// --------------------------------------------------------------------------------------------
const schemaCreateSessionRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "CreateSessionRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "clientDescription",
            fieldType: "ApplicationDescription",
        },
        {
            name: "serverUri",
            fieldType: "UAString",
        },
        {
            name: "endpointUrl",
            fieldType: "UAString",
        },
        {
            name: "sessionName",
            fieldType: "UAString",
        },
        {
            name: "clientNonce",
            fieldType: "ByteString",
        },
        {
            name: "clientCertificate",
            fieldType: "ByteString",
        },
        {
            name: "requestedSessionTimeout",
            fieldType: "Double",
        },
        {
            name: "maxResponseMessageSize",
            fieldType: "UInt32",
        },
    ]
});
class CreateSessionRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.clientDescription = new ApplicationDescription(null);
            this.serverUri = null;
            this.endpointUrl = null;
            this.sessionName = null;
            this.clientNonce = Buffer.alloc(0);
            this.clientCertificate = Buffer.alloc(0);
            this.requestedSessionTimeout = 0;
            this.maxResponseMessageSize = 0;
            return;
        }
        const schema = CreateSessionRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.clientDescription = new ApplicationDescription(options.clientDescription);
        this.serverUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.serverUri);
        this.endpointUrl = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.endpointUrl);
        this.sessionName = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.sessionName);
        this.clientNonce = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.clientNonce);
        this.clientCertificate = (0, node_opcua_factory_1.initialize_field)(schema.fields[6], options === null || options === void 0 ? void 0 : options.clientCertificate);
        this.requestedSessionTimeout = (0, node_opcua_factory_1.initialize_field)(schema.fields[7], options === null || options === void 0 ? void 0 : options.requestedSessionTimeout);
        this.maxResponseMessageSize = (0, node_opcua_factory_1.initialize_field)(schema.fields[8], options === null || options === void 0 ? void 0 : options.maxResponseMessageSize);
    }
    static get schema() { return schemaCreateSessionRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        this.clientDescription.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.serverUri, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.endpointUrl, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.sessionName, stream);
        (0, node_opcua_basic_types_1.encodeByteString)(this.clientNonce, stream);
        (0, node_opcua_basic_types_1.encodeByteString)(this.clientCertificate, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.requestedSessionTimeout, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.maxResponseMessageSize, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.clientDescription.decode(stream);
        this.serverUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.serverUri);
        this.endpointUrl = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.endpointUrl);
        this.sessionName = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.sessionName);
        this.clientNonce = (0, node_opcua_basic_types_1.decodeByteString)(stream, this.clientNonce);
        this.clientCertificate = (0, node_opcua_basic_types_1.decodeByteString)(stream, this.clientCertificate);
        this.requestedSessionTimeout = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.requestedSessionTimeout);
        this.maxResponseMessageSize = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.maxResponseMessageSize);
    }
    get schema() { return schemaCreateSessionRequest; }
}
exports.CreateSessionRequest = CreateSessionRequest;
CreateSessionRequest.possibleFields = [
    "requestHeader",
    "clientDescription",
    "serverUri",
    "endpointUrl",
    "sessionName",
    "clientNonce",
    "clientCertificate",
    "requestedSessionTimeout",
    "maxResponseMessageSize"
];
CreateSessionRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(459, 0);
CreateSessionRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(461, 0);
CreateSessionRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(460, 0);
CreateSessionRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15138, 0);
CreateSessionRequest.schema.dataTypeNodeId = CreateSessionRequest.dataTypeNodeId;
CreateSessionRequest.schema.encodingDefaultBinary = CreateSessionRequest.encodingDefaultBinary;
CreateSessionRequest.schema.encodingDefaultXml = CreateSessionRequest.encodingDefaultXml;
CreateSessionRequest.schema.encodingDefaultJson = CreateSessionRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(CreateSessionRequest.dataTypeNodeId, "CreateSessionRequest", CreateSessionRequest);
// --------------------------------------------------------------------------------------------
var MessageSecurityMode;
(function (MessageSecurityMode) {
    MessageSecurityMode[MessageSecurityMode["Invalid"] = 0] = "Invalid";
    MessageSecurityMode[MessageSecurityMode["None"] = 1] = "None";
    MessageSecurityMode[MessageSecurityMode["Sign"] = 2] = "Sign";
    MessageSecurityMode[MessageSecurityMode["SignAndEncrypt"] = 3] = "SignAndEncrypt";
})(MessageSecurityMode = exports.MessageSecurityMode || (exports.MessageSecurityMode = {}));
const schemaMessageSecurityMode = {
    enumValues: MessageSecurityMode,
    flaggable: false,
    minValue: 0,
    maxValue: 3,
    name: "MessageSecurityMode"
};
function decodeMessageSecurityMode(stream, _value) {
    let value = stream.readUInt32();
    value = (value < schemaMessageSecurityMode.minValue || value > schemaMessageSecurityMode.maxValue) ? MessageSecurityMode.Invalid : value;
    return value;
}
function encodeMessageSecurityMode(value, stream) {
    stream.writeUInt32(value);
}
exports._enumerationMessageSecurityMode = (0, node_opcua_factory_1.registerEnumeration)(schemaMessageSecurityMode);
(0, node_opcua_assert_1.assert)(exports._enumerationMessageSecurityMode.isFlaggable === false);
// --------------------------------------------------------------------------------------------
var UserTokenType;
(function (UserTokenType) {
    UserTokenType[UserTokenType["Anonymous"] = 0] = "Anonymous";
    UserTokenType[UserTokenType["UserName"] = 1] = "UserName";
    UserTokenType[UserTokenType["Certificate"] = 2] = "Certificate";
    UserTokenType[UserTokenType["IssuedToken"] = 3] = "IssuedToken";
    UserTokenType[UserTokenType["Invalid"] = 4294967295] = "Invalid";
})(UserTokenType = exports.UserTokenType || (exports.UserTokenType = {}));
const schemaUserTokenType = {
    enumValues: UserTokenType,
    flaggable: false,
    minValue: 0,
    maxValue: 3,
    name: "UserTokenType"
};
function decodeUserTokenType(stream, _value) {
    let value = stream.readUInt32();
    value = (value < schemaUserTokenType.minValue || value > schemaUserTokenType.maxValue) ? UserTokenType.Invalid : value;
    return value;
}
function encodeUserTokenType(value, stream) {
    stream.writeUInt32(value);
}
exports._enumerationUserTokenType = (0, node_opcua_factory_1.registerEnumeration)(schemaUserTokenType);
(0, node_opcua_assert_1.assert)(exports._enumerationUserTokenType.isFlaggable === false);
// --------------------------------------------------------------------------------------------
const schemaUserTokenPolicy = (0, node_opcua_factory_1.buildStructuredType)({
    name: "UserTokenPolicy",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "policyId",
            fieldType: "UAString",
        },
        {
            name: "tokenType",
            fieldType: "UserTokenType",
        },
        {
            name: "issuedTokenType",
            fieldType: "UAString",
        },
        {
            name: "issuerEndpointUrl",
            fieldType: "UAString",
        },
        {
            name: "securityPolicyUri",
            fieldType: "UAString",
        },
    ]
});
class UserTokenPolicy extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.policyId = null;
            this.tokenType = 0;
            this.issuedTokenType = null;
            this.issuerEndpointUrl = null;
            this.securityPolicyUri = null;
            return;
        }
        const schema = UserTokenPolicy.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.policyId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.policyId);
        this.tokenType = this.setTokenType((0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.tokenType));
        this.issuedTokenType = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.issuedTokenType);
        this.issuerEndpointUrl = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.issuerEndpointUrl);
        this.securityPolicyUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.securityPolicyUri);
    }
    static get schema() { return schemaUserTokenPolicy; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.policyId, stream);
        encodeUserTokenType(this.tokenType, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.issuedTokenType, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.issuerEndpointUrl, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.securityPolicyUri, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.policyId = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.policyId);
        this.tokenType = decodeUserTokenType(stream, this.tokenType);
        this.issuedTokenType = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.issuedTokenType);
        this.issuerEndpointUrl = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.issuerEndpointUrl);
        this.securityPolicyUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.securityPolicyUri);
    }
    // Define Enumeration setters
    setTokenType(value) {
        const coercedValue = exports._enumerationUserTokenType.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to UserTokenType :" + value);
        }
        this.tokenType = coercedValue.value;
        return this.tokenType;
    }
    get schema() { return schemaUserTokenPolicy; }
}
exports.UserTokenPolicy = UserTokenPolicy;
UserTokenPolicy.possibleFields = [
    "policyId",
    "tokenType",
    "issuedTokenType",
    "issuerEndpointUrl",
    "securityPolicyUri"
];
UserTokenPolicy.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(304, 0);
UserTokenPolicy.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(306, 0);
UserTokenPolicy.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(305, 0);
UserTokenPolicy.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15098, 0);
UserTokenPolicy.schema.dataTypeNodeId = UserTokenPolicy.dataTypeNodeId;
UserTokenPolicy.schema.encodingDefaultBinary = UserTokenPolicy.encodingDefaultBinary;
UserTokenPolicy.schema.encodingDefaultXml = UserTokenPolicy.encodingDefaultXml;
UserTokenPolicy.schema.encodingDefaultJson = UserTokenPolicy.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(UserTokenPolicy.dataTypeNodeId, "UserTokenPolicy", UserTokenPolicy);
// --------------------------------------------------------------------------------------------
const schemaEndpointDescription = (0, node_opcua_factory_1.buildStructuredType)({
    name: "EndpointDescription",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "endpointUrl",
            fieldType: "UAString",
        },
        {
            name: "server",
            fieldType: "ApplicationDescription",
        },
        {
            name: "serverCertificate",
            fieldType: "ByteString",
        },
        {
            name: "securityMode",
            fieldType: "MessageSecurityMode",
        },
        {
            name: "securityPolicyUri",
            fieldType: "UAString",
        },
        {
            name: "userIdentityTokens",
            fieldType: "UserTokenPolicy",
            isArray: true
        },
        {
            name: "transportProfileUri",
            fieldType: "UAString",
        },
        {
            name: "securityLevel",
            fieldType: "Byte",
        },
    ]
});
class EndpointDescription extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.endpointUrl = null;
            this.server = new ApplicationDescription(null);
            this.serverCertificate = Buffer.alloc(0);
            this.securityMode = 0;
            this.securityPolicyUri = null;
            this.userIdentityTokens = null; /* null array */
            this.transportProfileUri = null;
            this.securityLevel = 0;
            return;
        }
        const schema = EndpointDescription.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.endpointUrl = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.endpointUrl);
        this.server = new ApplicationDescription(options.server);
        this.serverCertificate = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.serverCertificate);
        this.securityMode = this.setSecurityMode((0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.securityMode));
        this.securityPolicyUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.securityPolicyUri);
        this.userIdentityTokens = []; // should default
        if (options.userIdentityTokens) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.userIdentityTokens));
            this.userIdentityTokens = options.userIdentityTokens.map((e) => new UserTokenPolicy(e));
        }
        this.transportProfileUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[6], options === null || options === void 0 ? void 0 : options.transportProfileUri);
        this.securityLevel = (0, node_opcua_factory_1.initialize_field)(schema.fields[7], options === null || options === void 0 ? void 0 : options.securityLevel);
    }
    static get schema() { return schemaEndpointDescription; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.endpointUrl, stream);
        this.server.encode(stream);
        (0, node_opcua_basic_types_1.encodeByteString)(this.serverCertificate, stream);
        encodeMessageSecurityMode(this.securityMode, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.securityPolicyUri, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.userIdentityTokens, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeUAString)(this.transportProfileUri, stream);
        (0, node_opcua_basic_types_1.encodeByte)(this.securityLevel, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.endpointUrl = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.endpointUrl);
        this.server.decode(stream);
        this.serverCertificate = (0, node_opcua_basic_types_1.decodeByteString)(stream, this.serverCertificate);
        this.securityMode = decodeMessageSecurityMode(stream, this.securityMode);
        this.securityPolicyUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.securityPolicyUri);
        this.userIdentityTokens = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new UserTokenPolicy(null);
            obj.decode(stream1);
            return obj;
        });
        this.transportProfileUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.transportProfileUri);
        this.securityLevel = (0, node_opcua_basic_types_1.decodeByte)(stream, this.securityLevel);
    }
    // Define Enumeration setters
    setSecurityMode(value) {
        const coercedValue = exports._enumerationMessageSecurityMode.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to MessageSecurityMode :" + value);
        }
        this.securityMode = coercedValue.value;
        return this.securityMode;
    }
    get schema() { return schemaEndpointDescription; }
}
exports.EndpointDescription = EndpointDescription;
EndpointDescription.possibleFields = [
    "endpointUrl",
    "server",
    "serverCertificate",
    "securityMode",
    "securityPolicyUri",
    "userIdentityTokens",
    "transportProfileUri",
    "securityLevel"
];
EndpointDescription.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(312, 0);
EndpointDescription.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(314, 0);
EndpointDescription.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(313, 0);
EndpointDescription.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15099, 0);
EndpointDescription.schema.dataTypeNodeId = EndpointDescription.dataTypeNodeId;
EndpointDescription.schema.encodingDefaultBinary = EndpointDescription.encodingDefaultBinary;
EndpointDescription.schema.encodingDefaultXml = EndpointDescription.encodingDefaultXml;
EndpointDescription.schema.encodingDefaultJson = EndpointDescription.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(EndpointDescription.dataTypeNodeId, "EndpointDescription", EndpointDescription);
// --------------------------------------------------------------------------------------------
const schemaCreateSessionResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "CreateSessionResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "sessionId",
            fieldType: "NodeId",
        },
        {
            name: "authenticationToken",
            fieldType: "NodeId",
        },
        {
            name: "revisedSessionTimeout",
            fieldType: "Double",
        },
        {
            name: "serverNonce",
            fieldType: "ByteString",
        },
        {
            name: "serverCertificate",
            fieldType: "ByteString",
        },
        {
            name: "serverEndpoints",
            fieldType: "EndpointDescription",
            isArray: true
        },
        {
            name: "serverSoftwareCertificates",
            fieldType: "SignedSoftwareCertificate",
            isArray: true
        },
        {
            name: "serverSignature",
            fieldType: "SignatureData",
        },
        {
            name: "maxRequestMessageSize",
            fieldType: "UInt32",
        },
    ]
});
class CreateSessionResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.sessionId = new node_opcua_nodeid_1.NodeId(null);
            this.authenticationToken = new node_opcua_nodeid_1.NodeId(null);
            this.revisedSessionTimeout = 0;
            this.serverNonce = Buffer.alloc(0);
            this.serverCertificate = Buffer.alloc(0);
            this.serverEndpoints = null; /* null array */
            this.serverSoftwareCertificates = null; /* null array */
            this.serverSignature = new SignatureData(null);
            this.maxRequestMessageSize = 0;
            return;
        }
        const schema = CreateSessionResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.sessionId = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.sessionId);
        this.authenticationToken = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.authenticationToken);
        this.revisedSessionTimeout = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.revisedSessionTimeout);
        this.serverNonce = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.serverNonce);
        this.serverCertificate = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.serverCertificate);
        this.serverEndpoints = []; // should default
        if (options.serverEndpoints) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.serverEndpoints));
            this.serverEndpoints = options.serverEndpoints.map((e) => new EndpointDescription(e));
        }
        this.serverSoftwareCertificates = []; // should default
        if (options.serverSoftwareCertificates) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.serverSoftwareCertificates));
            this.serverSoftwareCertificates = options.serverSoftwareCertificates.map((e) => new SignedSoftwareCertificate(e));
        }
        this.serverSignature = new SignatureData(options.serverSignature);
        this.maxRequestMessageSize = (0, node_opcua_factory_1.initialize_field)(schema.fields[9], options === null || options === void 0 ? void 0 : options.maxRequestMessageSize);
    }
    static get schema() { return schemaCreateSessionResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.sessionId, stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.authenticationToken, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.revisedSessionTimeout, stream);
        (0, node_opcua_basic_types_1.encodeByteString)(this.serverNonce, stream);
        (0, node_opcua_basic_types_1.encodeByteString)(this.serverCertificate, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.serverEndpoints, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.serverSoftwareCertificates, stream, (obj, stream1) => { obj.encode(stream1); });
        this.serverSignature.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.maxRequestMessageSize, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.sessionId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.sessionId);
        this.authenticationToken = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.authenticationToken);
        this.revisedSessionTimeout = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.revisedSessionTimeout);
        this.serverNonce = (0, node_opcua_basic_types_1.decodeByteString)(stream, this.serverNonce);
        this.serverCertificate = (0, node_opcua_basic_types_1.decodeByteString)(stream, this.serverCertificate);
        this.serverEndpoints = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new EndpointDescription(null);
            obj.decode(stream1);
            return obj;
        });
        this.serverSoftwareCertificates = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new SignedSoftwareCertificate(null);
            obj.decode(stream1);
            return obj;
        });
        this.serverSignature.decode(stream);
        this.maxRequestMessageSize = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.maxRequestMessageSize);
    }
    get schema() { return schemaCreateSessionResponse; }
}
exports.CreateSessionResponse = CreateSessionResponse;
CreateSessionResponse.possibleFields = [
    "responseHeader",
    "sessionId",
    "authenticationToken",
    "revisedSessionTimeout",
    "serverNonce",
    "serverCertificate",
    "serverEndpoints",
    "serverSoftwareCertificates",
    "serverSignature",
    "maxRequestMessageSize"
];
CreateSessionResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(462, 0);
CreateSessionResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(464, 0);
CreateSessionResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(463, 0);
CreateSessionResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15139, 0);
CreateSessionResponse.schema.dataTypeNodeId = CreateSessionResponse.dataTypeNodeId;
CreateSessionResponse.schema.encodingDefaultBinary = CreateSessionResponse.encodingDefaultBinary;
CreateSessionResponse.schema.encodingDefaultXml = CreateSessionResponse.encodingDefaultXml;
CreateSessionResponse.schema.encodingDefaultJson = CreateSessionResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(CreateSessionResponse.dataTypeNodeId, "CreateSessionResponse", CreateSessionResponse);
// --------------------------------------------------------------------------------------------
const schemaCreateSubscriptionRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "CreateSubscriptionRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "requestedPublishingInterval",
            fieldType: "Double",
        },
        {
            name: "requestedLifetimeCount",
            fieldType: "UInt32",
        },
        {
            name: "requestedMaxKeepAliveCount",
            fieldType: "UInt32",
        },
        {
            name: "maxNotificationsPerPublish",
            fieldType: "UInt32",
        },
        {
            name: "publishingEnabled",
            fieldType: "UABoolean",
        },
        {
            name: "priority",
            fieldType: "Byte",
        },
    ]
});
class CreateSubscriptionRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.requestedPublishingInterval = 0;
            this.requestedLifetimeCount = 0;
            this.requestedMaxKeepAliveCount = 0;
            this.maxNotificationsPerPublish = 0;
            this.publishingEnabled = false;
            this.priority = 0;
            return;
        }
        const schema = CreateSubscriptionRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.requestedPublishingInterval = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.requestedPublishingInterval);
        this.requestedLifetimeCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.requestedLifetimeCount);
        this.requestedMaxKeepAliveCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.requestedMaxKeepAliveCount);
        this.maxNotificationsPerPublish = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.maxNotificationsPerPublish);
        this.publishingEnabled = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.publishingEnabled);
        this.priority = (0, node_opcua_factory_1.initialize_field)(schema.fields[6], options === null || options === void 0 ? void 0 : options.priority);
    }
    static get schema() { return schemaCreateSubscriptionRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.requestedPublishingInterval, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.requestedLifetimeCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.requestedMaxKeepAliveCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.maxNotificationsPerPublish, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.publishingEnabled, stream);
        (0, node_opcua_basic_types_1.encodeByte)(this.priority, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.requestedPublishingInterval = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.requestedPublishingInterval);
        this.requestedLifetimeCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.requestedLifetimeCount);
        this.requestedMaxKeepAliveCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.requestedMaxKeepAliveCount);
        this.maxNotificationsPerPublish = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.maxNotificationsPerPublish);
        this.publishingEnabled = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.publishingEnabled);
        this.priority = (0, node_opcua_basic_types_1.decodeByte)(stream, this.priority);
    }
    get schema() { return schemaCreateSubscriptionRequest; }
}
exports.CreateSubscriptionRequest = CreateSubscriptionRequest;
CreateSubscriptionRequest.possibleFields = [
    "requestHeader",
    "requestedPublishingInterval",
    "requestedLifetimeCount",
    "requestedMaxKeepAliveCount",
    "maxNotificationsPerPublish",
    "publishingEnabled",
    "priority"
];
CreateSubscriptionRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(785, 0);
CreateSubscriptionRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(787, 0);
CreateSubscriptionRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(786, 0);
CreateSubscriptionRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15337, 0);
CreateSubscriptionRequest.schema.dataTypeNodeId = CreateSubscriptionRequest.dataTypeNodeId;
CreateSubscriptionRequest.schema.encodingDefaultBinary = CreateSubscriptionRequest.encodingDefaultBinary;
CreateSubscriptionRequest.schema.encodingDefaultXml = CreateSubscriptionRequest.encodingDefaultXml;
CreateSubscriptionRequest.schema.encodingDefaultJson = CreateSubscriptionRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(CreateSubscriptionRequest.dataTypeNodeId, "CreateSubscriptionRequest", CreateSubscriptionRequest);
// --------------------------------------------------------------------------------------------
const schemaCreateSubscriptionResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "CreateSubscriptionResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "subscriptionId",
            fieldType: "UInt32",
        },
        {
            name: "revisedPublishingInterval",
            fieldType: "Double",
        },
        {
            name: "revisedLifetimeCount",
            fieldType: "UInt32",
        },
        {
            name: "revisedMaxKeepAliveCount",
            fieldType: "UInt32",
        },
    ]
});
class CreateSubscriptionResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.subscriptionId = 0;
            this.revisedPublishingInterval = 0;
            this.revisedLifetimeCount = 0;
            this.revisedMaxKeepAliveCount = 0;
            return;
        }
        const schema = CreateSubscriptionResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.subscriptionId = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.subscriptionId);
        this.revisedPublishingInterval = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.revisedPublishingInterval);
        this.revisedLifetimeCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.revisedLifetimeCount);
        this.revisedMaxKeepAliveCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.revisedMaxKeepAliveCount);
    }
    static get schema() { return schemaCreateSubscriptionResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.subscriptionId, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.revisedPublishingInterval, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.revisedLifetimeCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.revisedMaxKeepAliveCount, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.subscriptionId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.subscriptionId);
        this.revisedPublishingInterval = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.revisedPublishingInterval);
        this.revisedLifetimeCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.revisedLifetimeCount);
        this.revisedMaxKeepAliveCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.revisedMaxKeepAliveCount);
    }
    get schema() { return schemaCreateSubscriptionResponse; }
}
exports.CreateSubscriptionResponse = CreateSubscriptionResponse;
CreateSubscriptionResponse.possibleFields = [
    "responseHeader",
    "subscriptionId",
    "revisedPublishingInterval",
    "revisedLifetimeCount",
    "revisedMaxKeepAliveCount"
];
CreateSubscriptionResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(788, 0);
CreateSubscriptionResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(790, 0);
CreateSubscriptionResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(789, 0);
CreateSubscriptionResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15338, 0);
CreateSubscriptionResponse.schema.dataTypeNodeId = CreateSubscriptionResponse.dataTypeNodeId;
CreateSubscriptionResponse.schema.encodingDefaultBinary = CreateSubscriptionResponse.encodingDefaultBinary;
CreateSubscriptionResponse.schema.encodingDefaultXml = CreateSubscriptionResponse.encodingDefaultXml;
CreateSubscriptionResponse.schema.encodingDefaultJson = CreateSubscriptionResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(CreateSubscriptionResponse.dataTypeNodeId, "CreateSubscriptionResponse", CreateSubscriptionResponse);
// --------------------------------------------------------------------------------------------
const schemaCurrencyUnitType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "CurrencyUnitType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "numericCode",
            fieldType: "Int16",
        },
        {
            name: "exponent",
            fieldType: "SByte",
        },
        {
            name: "alphabeticCode",
            fieldType: "UAString",
        },
        {
            name: "currency",
            fieldType: "LocalizedText",
        },
    ]
});
class CurrencyUnitType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.numericCode = 0;
            this.exponent = 0;
            this.alphabeticCode = null;
            this.currency = new node_opcua_data_model_1.LocalizedText(null);
            return;
        }
        const schema = CurrencyUnitType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.numericCode = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.numericCode);
        this.exponent = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.exponent);
        this.alphabeticCode = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.alphabeticCode);
        this.currency = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.currency);
    }
    static get schema() { return schemaCurrencyUnitType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeInt16)(this.numericCode, stream);
        (0, node_opcua_basic_types_1.encodeSByte)(this.exponent, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.alphabeticCode, stream);
        (0, node_opcua_data_model_1.encodeLocalizedText)(this.currency, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.numericCode = (0, node_opcua_basic_types_1.decodeInt16)(stream, this.numericCode);
        this.exponent = (0, node_opcua_basic_types_1.decodeSByte)(stream, this.exponent);
        this.alphabeticCode = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.alphabeticCode);
        this.currency = (0, node_opcua_data_model_1.decodeLocalizedText)(stream, this.currency);
    }
    get schema() { return schemaCurrencyUnitType; }
}
exports.CurrencyUnitType = CurrencyUnitType;
CurrencyUnitType.possibleFields = [
    "numericCode",
    "exponent",
    "alphabeticCode",
    "currency"
];
CurrencyUnitType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(23498, 0);
CurrencyUnitType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(23507, 0);
CurrencyUnitType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(23520, 0);
CurrencyUnitType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(23528, 0);
CurrencyUnitType.schema.dataTypeNodeId = CurrencyUnitType.dataTypeNodeId;
CurrencyUnitType.schema.encodingDefaultBinary = CurrencyUnitType.encodingDefaultBinary;
CurrencyUnitType.schema.encodingDefaultXml = CurrencyUnitType.encodingDefaultXml;
CurrencyUnitType.schema.encodingDefaultJson = CurrencyUnitType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(CurrencyUnitType.dataTypeNodeId, "CurrencyUnitType", CurrencyUnitType);
// --------------------------------------------------------------------------------------------
var DataChangeTrigger;
(function (DataChangeTrigger) {
    DataChangeTrigger[DataChangeTrigger["Status"] = 0] = "Status";
    DataChangeTrigger[DataChangeTrigger["StatusValue"] = 1] = "StatusValue";
    DataChangeTrigger[DataChangeTrigger["StatusValueTimestamp"] = 2] = "StatusValueTimestamp";
    DataChangeTrigger[DataChangeTrigger["Invalid"] = 4294967295] = "Invalid";
})(DataChangeTrigger = exports.DataChangeTrigger || (exports.DataChangeTrigger = {}));
const schemaDataChangeTrigger = {
    enumValues: DataChangeTrigger,
    flaggable: false,
    minValue: 0,
    maxValue: 2,
    name: "DataChangeTrigger"
};
function decodeDataChangeTrigger(stream, _value) {
    let value = stream.readUInt32();
    value = (value < schemaDataChangeTrigger.minValue || value > schemaDataChangeTrigger.maxValue) ? DataChangeTrigger.Invalid : value;
    return value;
}
function encodeDataChangeTrigger(value, stream) {
    stream.writeUInt32(value);
}
exports._enumerationDataChangeTrigger = (0, node_opcua_factory_1.registerEnumeration)(schemaDataChangeTrigger);
(0, node_opcua_assert_1.assert)(exports._enumerationDataChangeTrigger.isFlaggable === false);
// --------------------------------------------------------------------------------------------
const schemaDataChangeFilter = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DataChangeFilter",
    baseType: "MonitoringFilter",
    fields: [
        {
            name: "trigger",
            fieldType: "DataChangeTrigger",
        },
        {
            name: "deadbandType",
            fieldType: "UInt32",
        },
        {
            name: "deadbandValue",
            fieldType: "Double",
        },
    ]
});
class DataChangeFilter extends MonitoringFilter {
    constructor(options) {
        super(options);
        if (options === null) {
            this.trigger = 0;
            this.deadbandType = 0;
            this.deadbandValue = 0;
            return;
        }
        const schema = DataChangeFilter.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.trigger = this.setTrigger((0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.trigger));
        this.deadbandType = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.deadbandType);
        this.deadbandValue = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.deadbandValue);
    }
    static get schema() { return schemaDataChangeFilter; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        encodeDataChangeTrigger(this.trigger, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.deadbandType, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.deadbandValue, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.trigger = decodeDataChangeTrigger(stream, this.trigger);
        this.deadbandType = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.deadbandType);
        this.deadbandValue = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.deadbandValue);
    }
    // Define Enumeration setters
    setTrigger(value) {
        const coercedValue = exports._enumerationDataChangeTrigger.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to DataChangeTrigger :" + value);
        }
        this.trigger = coercedValue.value;
        return this.trigger;
    }
    get schema() { return schemaDataChangeFilter; }
}
exports.DataChangeFilter = DataChangeFilter;
DataChangeFilter.possibleFields = [
    "trigger",
    "deadbandType",
    "deadbandValue"
];
DataChangeFilter.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(722, 0);
DataChangeFilter.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(724, 0);
DataChangeFilter.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(723, 0);
DataChangeFilter.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15294, 0);
DataChangeFilter.schema.dataTypeNodeId = DataChangeFilter.dataTypeNodeId;
DataChangeFilter.schema.encodingDefaultBinary = DataChangeFilter.encodingDefaultBinary;
DataChangeFilter.schema.encodingDefaultXml = DataChangeFilter.encodingDefaultXml;
DataChangeFilter.schema.encodingDefaultJson = DataChangeFilter.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DataChangeFilter.dataTypeNodeId, "DataChangeFilter", DataChangeFilter);
// --------------------------------------------------------------------------------------------
const schemaNotificationData = (0, node_opcua_factory_1.buildStructuredType)({
    name: "NotificationData",
    baseType: "ExtensionObject",
    fields: []
});
class NotificationData extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            return;
        }
        const schema = NotificationData.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
    }
    static get schema() { return schemaNotificationData; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
    }
    get schema() { return schemaNotificationData; }
}
exports.NotificationData = NotificationData;
NotificationData.possibleFields = [];
NotificationData.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(945, 0);
NotificationData.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(947, 0);
NotificationData.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(946, 0);
NotificationData.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15344, 0);
NotificationData.schema.dataTypeNodeId = NotificationData.dataTypeNodeId;
NotificationData.schema.encodingDefaultBinary = NotificationData.encodingDefaultBinary;
NotificationData.schema.encodingDefaultXml = NotificationData.encodingDefaultXml;
NotificationData.schema.encodingDefaultJson = NotificationData.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(NotificationData.dataTypeNodeId, "NotificationData", NotificationData);
// --------------------------------------------------------------------------------------------
const schemaMonitoredItemNotification = (0, node_opcua_factory_1.buildStructuredType)({
    name: "MonitoredItemNotification",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "clientHandle",
            fieldType: "UInt32",
        },
        {
            name: "value",
            fieldType: "DataValue",
        },
    ]
});
class MonitoredItemNotification extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.clientHandle = 0;
            this.value = new node_opcua_data_value_1.DataValue(null);
            return;
        }
        const schema = MonitoredItemNotification.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.clientHandle = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.clientHandle);
        this.value = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.value);
    }
    static get schema() { return schemaMonitoredItemNotification; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.clientHandle, stream);
        (0, node_opcua_data_value_1.encodeDataValue)(this.value, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.clientHandle = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.clientHandle);
        this.value = (0, node_opcua_data_value_1.decodeDataValue)(stream, this.value);
    }
    get schema() { return schemaMonitoredItemNotification; }
}
exports.MonitoredItemNotification = MonitoredItemNotification;
MonitoredItemNotification.possibleFields = [
    "clientHandle",
    "value"
];
MonitoredItemNotification.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(806, 0);
MonitoredItemNotification.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(808, 0);
MonitoredItemNotification.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(807, 0);
MonitoredItemNotification.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15346, 0);
MonitoredItemNotification.schema.dataTypeNodeId = MonitoredItemNotification.dataTypeNodeId;
MonitoredItemNotification.schema.encodingDefaultBinary = MonitoredItemNotification.encodingDefaultBinary;
MonitoredItemNotification.schema.encodingDefaultXml = MonitoredItemNotification.encodingDefaultXml;
MonitoredItemNotification.schema.encodingDefaultJson = MonitoredItemNotification.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(MonitoredItemNotification.dataTypeNodeId, "MonitoredItemNotification", MonitoredItemNotification);
// --------------------------------------------------------------------------------------------
const schemaDataChangeNotification = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DataChangeNotification",
    baseType: "NotificationData",
    fields: [
        {
            name: "monitoredItems",
            fieldType: "MonitoredItemNotification",
            isArray: true
        },
        {
            name: "diagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class DataChangeNotification extends NotificationData {
    constructor(options) {
        super(options);
        if (options === null) {
            this.monitoredItems = null; /* null array */
            this.diagnosticInfos = [];
            return;
        }
        const schema = DataChangeNotification.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.monitoredItems = []; // should default
        if (options.monitoredItems) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.monitoredItems));
            this.monitoredItems = options.monitoredItems.map((e) => new MonitoredItemNotification(e));
        }
        this.diagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.diagnosticInfos);
    }
    static get schema() { return schemaDataChangeNotification; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.monitoredItems, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.diagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.monitoredItems = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new MonitoredItemNotification(null);
            obj.decode(stream1);
            return obj;
        });
        this.diagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaDataChangeNotification; }
}
exports.DataChangeNotification = DataChangeNotification;
DataChangeNotification.possibleFields = [
    "monitoredItems",
    "diagnosticInfos"
];
DataChangeNotification.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(809, 0);
DataChangeNotification.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(811, 0);
DataChangeNotification.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(810, 0);
DataChangeNotification.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15345, 0);
DataChangeNotification.schema.dataTypeNodeId = DataChangeNotification.dataTypeNodeId;
DataChangeNotification.schema.encodingDefaultBinary = DataChangeNotification.encodingDefaultBinary;
DataChangeNotification.schema.encodingDefaultXml = DataChangeNotification.encodingDefaultXml;
DataChangeNotification.schema.encodingDefaultJson = DataChangeNotification.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DataChangeNotification.dataTypeNodeId, "DataChangeNotification", DataChangeNotification);
// --------------------------------------------------------------------------------------------
const schemaDataTypeDescription = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DataTypeDescription",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "dataTypeId",
            fieldType: "NodeId",
        },
        {
            name: "name",
            fieldType: "QualifiedName",
        },
    ]
});
class DataTypeDescription extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.dataTypeId = new node_opcua_nodeid_1.NodeId(null);
            this.name = new node_opcua_data_model_1.QualifiedName(null);
            return;
        }
        const schema = DataTypeDescription.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.dataTypeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.dataTypeId);
        this.name = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.name);
    }
    static get schema() { return schemaDataTypeDescription; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.dataTypeId, stream);
        (0, node_opcua_data_model_1.encodeQualifiedName)(this.name, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.dataTypeId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.dataTypeId);
        this.name = (0, node_opcua_data_model_1.decodeQualifiedName)(stream, this.name);
    }
    get schema() { return schemaDataTypeDescription; }
}
exports.DataTypeDescription = DataTypeDescription;
DataTypeDescription.possibleFields = [
    "dataTypeId",
    "name"
];
DataTypeDescription.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(14525, 0);
DataTypeDescription.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(125, 0);
DataTypeDescription.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(14796, 0);
DataTypeDescription.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15057, 0);
DataTypeDescription.schema.dataTypeNodeId = DataTypeDescription.dataTypeNodeId;
DataTypeDescription.schema.encodingDefaultBinary = DataTypeDescription.encodingDefaultBinary;
DataTypeDescription.schema.encodingDefaultXml = DataTypeDescription.encodingDefaultXml;
DataTypeDescription.schema.encodingDefaultJson = DataTypeDescription.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DataTypeDescription.dataTypeNodeId, "DataTypeDescription", DataTypeDescription);
// --------------------------------------------------------------------------------------------
var StructureType;
(function (StructureType) {
    StructureType[StructureType["Structure"] = 0] = "Structure";
    StructureType[StructureType["StructureWithOptionalFields"] = 1] = "StructureWithOptionalFields";
    StructureType[StructureType["Union"] = 2] = "Union";
    StructureType[StructureType["Invalid"] = 4294967295] = "Invalid";
})(StructureType = exports.StructureType || (exports.StructureType = {}));
const schemaStructureType = {
    enumValues: StructureType,
    flaggable: false,
    minValue: 0,
    maxValue: 2,
    name: "StructureType"
};
function decodeStructureType(stream, _value) {
    let value = stream.readUInt32();
    value = (value < schemaStructureType.minValue || value > schemaStructureType.maxValue) ? StructureType.Invalid : value;
    return value;
}
function encodeStructureType(value, stream) {
    stream.writeUInt32(value);
}
exports._enumerationStructureType = (0, node_opcua_factory_1.registerEnumeration)(schemaStructureType);
(0, node_opcua_assert_1.assert)(exports._enumerationStructureType.isFlaggable === false);
// --------------------------------------------------------------------------------------------
const schemaStructureField = (0, node_opcua_factory_1.buildStructuredType)({
    name: "StructureField",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "name",
            fieldType: "UAString",
        },
        {
            name: "description",
            fieldType: "LocalizedText",
        },
        {
            name: "dataType",
            fieldType: "NodeId",
        },
        {
            name: "valueRank",
            fieldType: "Int32",
        },
        {
            name: "arrayDimensions",
            fieldType: "UInt32",
            isArray: true
        },
        {
            name: "maxStringLength",
            fieldType: "UInt32",
        },
        {
            name: "isOptional",
            fieldType: "UABoolean",
        },
    ]
});
class StructureField extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.name = null;
            this.description = new node_opcua_data_model_1.LocalizedText(null);
            this.dataType = new node_opcua_nodeid_1.NodeId(null);
            this.valueRank = 0;
            this.arrayDimensions = [];
            this.maxStringLength = 0;
            this.isOptional = false;
            return;
        }
        const schema = StructureField.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.name = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.name);
        this.description = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.description);
        this.dataType = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.dataType);
        this.valueRank = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.valueRank);
        this.arrayDimensions = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[4], options === null || options === void 0 ? void 0 : options.arrayDimensions);
        this.maxStringLength = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.maxStringLength);
        this.isOptional = (0, node_opcua_factory_1.initialize_field)(schema.fields[6], options === null || options === void 0 ? void 0 : options.isOptional);
    }
    static get schema() { return schemaStructureField; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.name, stream);
        (0, node_opcua_data_model_1.encodeLocalizedText)(this.description, stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.dataType, stream);
        (0, node_opcua_basic_types_1.encodeInt32)(this.valueRank, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.arrayDimensions, stream, node_opcua_basic_types_1.encodeUInt32);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.maxStringLength, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.isOptional, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.name = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.name);
        this.description = (0, node_opcua_data_model_1.decodeLocalizedText)(stream, this.description);
        this.dataType = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.dataType);
        this.valueRank = (0, node_opcua_basic_types_1.decodeInt32)(stream, this.valueRank);
        this.arrayDimensions = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUInt32);
        this.maxStringLength = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.maxStringLength);
        this.isOptional = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.isOptional);
    }
    get schema() { return schemaStructureField; }
}
exports.StructureField = StructureField;
StructureField.possibleFields = [
    "name",
    "description",
    "dataType",
    "valueRank",
    "arrayDimensions",
    "maxStringLength",
    "isOptional"
];
StructureField.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(101, 0);
StructureField.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(14844, 0);
StructureField.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(14800, 0);
StructureField.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15065, 0);
StructureField.schema.dataTypeNodeId = StructureField.dataTypeNodeId;
StructureField.schema.encodingDefaultBinary = StructureField.encodingDefaultBinary;
StructureField.schema.encodingDefaultXml = StructureField.encodingDefaultXml;
StructureField.schema.encodingDefaultJson = StructureField.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(StructureField.dataTypeNodeId, "StructureField", StructureField);
// --------------------------------------------------------------------------------------------
const schemaStructureDefinition = (0, node_opcua_factory_1.buildStructuredType)({
    name: "StructureDefinition",
    baseType: "DataTypeDefinition",
    fields: [
        {
            name: "defaultEncodingId",
            fieldType: "NodeId",
        },
        {
            name: "baseDataType",
            fieldType: "NodeId",
        },
        {
            name: "structureType",
            fieldType: "StructureType",
        },
        {
            name: "fields",
            fieldType: "StructureField",
            isArray: true
        },
    ]
});
class StructureDefinition extends DataTypeDefinition {
    constructor(options) {
        super(options);
        if (options === null) {
            this.defaultEncodingId = new node_opcua_nodeid_1.NodeId(null);
            this.baseDataType = new node_opcua_nodeid_1.NodeId(null);
            this.structureType = 0;
            this.fields = null; /* null array */
            return;
        }
        const schema = StructureDefinition.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.defaultEncodingId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.defaultEncodingId);
        this.baseDataType = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.baseDataType);
        this.structureType = this.setStructureType((0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.structureType));
        this.fields = []; // should default
        if (options.fields) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.fields));
            this.fields = options.fields.map((e) => new StructureField(e));
        }
    }
    static get schema() { return schemaStructureDefinition; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.defaultEncodingId, stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.baseDataType, stream);
        encodeStructureType(this.structureType, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.fields, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.defaultEncodingId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.defaultEncodingId);
        this.baseDataType = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.baseDataType);
        this.structureType = decodeStructureType(stream, this.structureType);
        this.fields = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new StructureField(null);
            obj.decode(stream1);
            return obj;
        });
    }
    // Define Enumeration setters
    setStructureType(value) {
        const coercedValue = exports._enumerationStructureType.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to StructureType :" + value);
        }
        this.structureType = coercedValue.value;
        return this.structureType;
    }
    get schema() { return schemaStructureDefinition; }
}
exports.StructureDefinition = StructureDefinition;
StructureDefinition.possibleFields = [
    "defaultEncodingId",
    "baseDataType",
    "structureType",
    "fields"
];
StructureDefinition.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(99, 0);
StructureDefinition.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(122, 0);
StructureDefinition.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(14798, 0);
StructureDefinition.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15066, 0);
StructureDefinition.schema.dataTypeNodeId = StructureDefinition.dataTypeNodeId;
StructureDefinition.schema.encodingDefaultBinary = StructureDefinition.encodingDefaultBinary;
StructureDefinition.schema.encodingDefaultXml = StructureDefinition.encodingDefaultXml;
StructureDefinition.schema.encodingDefaultJson = StructureDefinition.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(StructureDefinition.dataTypeNodeId, "StructureDefinition", StructureDefinition);
// --------------------------------------------------------------------------------------------
const schemaStructureDescription = (0, node_opcua_factory_1.buildStructuredType)({
    name: "StructureDescription",
    baseType: "DataTypeDescription",
    fields: [
        {
            name: "structureDefinition",
            fieldType: "StructureDefinition",
        },
    ]
});
class StructureDescription extends DataTypeDescription {
    constructor(options) {
        super(options);
        if (options === null) {
            this.structureDefinition = new StructureDefinition(null);
            return;
        }
        const schema = StructureDescription.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.structureDefinition = new StructureDefinition(options.structureDefinition);
    }
    static get schema() { return schemaStructureDescription; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.structureDefinition.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.structureDefinition.decode(stream);
    }
    get schema() { return schemaStructureDescription; }
}
exports.StructureDescription = StructureDescription;
StructureDescription.possibleFields = [
    "structureDefinition"
];
StructureDescription.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15487, 0);
StructureDescription.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(126, 0);
StructureDescription.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15589, 0);
StructureDescription.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15058, 0);
StructureDescription.schema.dataTypeNodeId = StructureDescription.dataTypeNodeId;
StructureDescription.schema.encodingDefaultBinary = StructureDescription.encodingDefaultBinary;
StructureDescription.schema.encodingDefaultXml = StructureDescription.encodingDefaultXml;
StructureDescription.schema.encodingDefaultJson = StructureDescription.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(StructureDescription.dataTypeNodeId, "StructureDescription", StructureDescription);
// --------------------------------------------------------------------------------------------
const schemaEnumValueType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "EnumValueType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "value",
            fieldType: "Int64",
        },
        {
            name: "displayName",
            fieldType: "LocalizedText",
        },
        {
            name: "description",
            fieldType: "LocalizedText",
        },
    ]
});
class EnumValueType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.value = [];
            this.displayName = new node_opcua_data_model_1.LocalizedText(null);
            this.description = new node_opcua_data_model_1.LocalizedText(null);
            return;
        }
        const schema = EnumValueType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.value = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.value);
        this.displayName = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.displayName);
        this.description = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.description);
    }
    static get schema() { return schemaEnumValueType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeInt64)(this.value, stream);
        (0, node_opcua_data_model_1.encodeLocalizedText)(this.displayName, stream);
        (0, node_opcua_data_model_1.encodeLocalizedText)(this.description, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.value = (0, node_opcua_basic_types_1.decodeInt64)(stream, this.value);
        this.displayName = (0, node_opcua_data_model_1.decodeLocalizedText)(stream, this.displayName);
        this.description = (0, node_opcua_data_model_1.decodeLocalizedText)(stream, this.description);
    }
    get schema() { return schemaEnumValueType; }
}
exports.EnumValueType = EnumValueType;
EnumValueType.possibleFields = [
    "value",
    "displayName",
    "description"
];
EnumValueType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(7594, 0);
EnumValueType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(8251, 0);
EnumValueType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(7616, 0);
EnumValueType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15082, 0);
EnumValueType.schema.dataTypeNodeId = EnumValueType.dataTypeNodeId;
EnumValueType.schema.encodingDefaultBinary = EnumValueType.encodingDefaultBinary;
EnumValueType.schema.encodingDefaultXml = EnumValueType.encodingDefaultXml;
EnumValueType.schema.encodingDefaultJson = EnumValueType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(EnumValueType.dataTypeNodeId, "EnumValueType", EnumValueType);
// --------------------------------------------------------------------------------------------
const schemaEnumField = (0, node_opcua_factory_1.buildStructuredType)({
    name: "EnumField",
    baseType: "EnumValueType",
    fields: [
        {
            name: "name",
            fieldType: "UAString",
        },
    ]
});
class EnumField extends EnumValueType {
    constructor(options) {
        super(options);
        if (options === null) {
            this.name = null;
            return;
        }
        const schema = EnumField.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.name = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.name);
    }
    static get schema() { return schemaEnumField; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.name, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.name = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.name);
    }
    get schema() { return schemaEnumField; }
}
exports.EnumField = EnumField;
EnumField.possibleFields = [
    "name"
];
EnumField.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(102, 0);
EnumField.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(14845, 0);
EnumField.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(14801, 0);
EnumField.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15083, 0);
EnumField.schema.dataTypeNodeId = EnumField.dataTypeNodeId;
EnumField.schema.encodingDefaultBinary = EnumField.encodingDefaultBinary;
EnumField.schema.encodingDefaultXml = EnumField.encodingDefaultXml;
EnumField.schema.encodingDefaultJson = EnumField.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(EnumField.dataTypeNodeId, "EnumField", EnumField);
// --------------------------------------------------------------------------------------------
const schemaEnumDefinition = (0, node_opcua_factory_1.buildStructuredType)({
    name: "EnumDefinition",
    baseType: "DataTypeDefinition",
    fields: [
        {
            name: "fields",
            fieldType: "EnumField",
            isArray: true
        },
    ]
});
class EnumDefinition extends DataTypeDefinition {
    constructor(options) {
        super(options);
        if (options === null) {
            this.fields = null; /* null array */
            return;
        }
        const schema = EnumDefinition.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.fields = []; // should default
        if (options.fields) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.fields));
            this.fields = options.fields.map((e) => new EnumField(e));
        }
    }
    static get schema() { return schemaEnumDefinition; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.fields, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.fields = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new EnumField(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaEnumDefinition; }
}
exports.EnumDefinition = EnumDefinition;
EnumDefinition.possibleFields = [
    "fields"
];
EnumDefinition.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(100, 0);
EnumDefinition.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(123, 0);
EnumDefinition.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(14799, 0);
EnumDefinition.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15067, 0);
EnumDefinition.schema.dataTypeNodeId = EnumDefinition.dataTypeNodeId;
EnumDefinition.schema.encodingDefaultBinary = EnumDefinition.encodingDefaultBinary;
EnumDefinition.schema.encodingDefaultXml = EnumDefinition.encodingDefaultXml;
EnumDefinition.schema.encodingDefaultJson = EnumDefinition.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(EnumDefinition.dataTypeNodeId, "EnumDefinition", EnumDefinition);
// --------------------------------------------------------------------------------------------
const schemaEnumDescription = (0, node_opcua_factory_1.buildStructuredType)({
    name: "EnumDescription",
    baseType: "DataTypeDescription",
    fields: [
        {
            name: "enumDefinition",
            fieldType: "EnumDefinition",
        },
        {
            name: "builtInType",
            fieldType: "Byte",
        },
    ]
});
class EnumDescription extends DataTypeDescription {
    constructor(options) {
        super(options);
        if (options === null) {
            this.enumDefinition = new EnumDefinition(null);
            this.builtInType = 0;
            return;
        }
        const schema = EnumDescription.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.enumDefinition = new EnumDefinition(options.enumDefinition);
        this.builtInType = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.builtInType);
    }
    static get schema() { return schemaEnumDescription; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.enumDefinition.encode(stream);
        (0, node_opcua_basic_types_1.encodeByte)(this.builtInType, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.enumDefinition.decode(stream);
        this.builtInType = (0, node_opcua_basic_types_1.decodeByte)(stream, this.builtInType);
    }
    get schema() { return schemaEnumDescription; }
}
exports.EnumDescription = EnumDescription;
EnumDescription.possibleFields = [
    "enumDefinition",
    "builtInType"
];
EnumDescription.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15488, 0);
EnumDescription.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(127, 0);
EnumDescription.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15590, 0);
EnumDescription.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15059, 0);
EnumDescription.schema.dataTypeNodeId = EnumDescription.dataTypeNodeId;
EnumDescription.schema.encodingDefaultBinary = EnumDescription.encodingDefaultBinary;
EnumDescription.schema.encodingDefaultXml = EnumDescription.encodingDefaultXml;
EnumDescription.schema.encodingDefaultJson = EnumDescription.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(EnumDescription.dataTypeNodeId, "EnumDescription", EnumDescription);
// --------------------------------------------------------------------------------------------
const schemaSimpleTypeDescription = (0, node_opcua_factory_1.buildStructuredType)({
    name: "SimpleTypeDescription",
    baseType: "DataTypeDescription",
    fields: [
        {
            name: "baseDataType",
            fieldType: "NodeId",
        },
        {
            name: "builtInType",
            fieldType: "Byte",
        },
    ]
});
class SimpleTypeDescription extends DataTypeDescription {
    constructor(options) {
        super(options);
        if (options === null) {
            this.baseDataType = new node_opcua_nodeid_1.NodeId(null);
            this.builtInType = 0;
            return;
        }
        const schema = SimpleTypeDescription.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.baseDataType = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.baseDataType);
        this.builtInType = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.builtInType);
    }
    static get schema() { return schemaSimpleTypeDescription; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.baseDataType, stream);
        (0, node_opcua_basic_types_1.encodeByte)(this.builtInType, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.baseDataType = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.baseDataType);
        this.builtInType = (0, node_opcua_basic_types_1.decodeByte)(stream, this.builtInType);
    }
    get schema() { return schemaSimpleTypeDescription; }
}
exports.SimpleTypeDescription = SimpleTypeDescription;
SimpleTypeDescription.possibleFields = [
    "baseDataType",
    "builtInType"
];
SimpleTypeDescription.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15005, 0);
SimpleTypeDescription.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15421, 0);
SimpleTypeDescription.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15529, 0);
SimpleTypeDescription.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15700, 0);
SimpleTypeDescription.schema.dataTypeNodeId = SimpleTypeDescription.dataTypeNodeId;
SimpleTypeDescription.schema.encodingDefaultBinary = SimpleTypeDescription.encodingDefaultBinary;
SimpleTypeDescription.schema.encodingDefaultXml = SimpleTypeDescription.encodingDefaultXml;
SimpleTypeDescription.schema.encodingDefaultJson = SimpleTypeDescription.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(SimpleTypeDescription.dataTypeNodeId, "SimpleTypeDescription", SimpleTypeDescription);
// --------------------------------------------------------------------------------------------
const schemaDataTypeSchemaHeader = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DataTypeSchemaHeader",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "namespaces",
            fieldType: "UAString",
            isArray: true
        },
        {
            name: "structureDataTypes",
            fieldType: "StructureDescription",
            isArray: true
        },
        {
            name: "enumDataTypes",
            fieldType: "EnumDescription",
            isArray: true
        },
        {
            name: "simpleDataTypes",
            fieldType: "SimpleTypeDescription",
            isArray: true
        },
    ]
});
class DataTypeSchemaHeader extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.namespaces = [];
            this.structureDataTypes = null; /* null array */
            this.enumDataTypes = null; /* null array */
            this.simpleDataTypes = null; /* null array */
            return;
        }
        const schema = DataTypeSchemaHeader.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.namespaces = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[0], options === null || options === void 0 ? void 0 : options.namespaces);
        this.structureDataTypes = []; // should default
        if (options.structureDataTypes) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.structureDataTypes));
            this.structureDataTypes = options.structureDataTypes.map((e) => new StructureDescription(e));
        }
        this.enumDataTypes = []; // should default
        if (options.enumDataTypes) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.enumDataTypes));
            this.enumDataTypes = options.enumDataTypes.map((e) => new EnumDescription(e));
        }
        this.simpleDataTypes = []; // should default
        if (options.simpleDataTypes) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.simpleDataTypes));
            this.simpleDataTypes = options.simpleDataTypes.map((e) => new SimpleTypeDescription(e));
        }
    }
    static get schema() { return schemaDataTypeSchemaHeader; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.namespaces, stream, node_opcua_basic_types_1.encodeUAString);
        (0, node_opcua_basic_types_1.encodeArray)(this.structureDataTypes, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.enumDataTypes, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.simpleDataTypes, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.namespaces = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUAString);
        this.structureDataTypes = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new StructureDescription(null);
            obj.decode(stream1);
            return obj;
        });
        this.enumDataTypes = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new EnumDescription(null);
            obj.decode(stream1);
            return obj;
        });
        this.simpleDataTypes = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new SimpleTypeDescription(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaDataTypeSchemaHeader; }
}
exports.DataTypeSchemaHeader = DataTypeSchemaHeader;
DataTypeSchemaHeader.possibleFields = [
    "namespaces",
    "structureDataTypes",
    "enumDataTypes",
    "simpleDataTypes"
];
DataTypeSchemaHeader.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15534, 0);
DataTypeSchemaHeader.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15676, 0);
DataTypeSchemaHeader.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15950, 0);
DataTypeSchemaHeader.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16151, 0);
DataTypeSchemaHeader.schema.dataTypeNodeId = DataTypeSchemaHeader.dataTypeNodeId;
DataTypeSchemaHeader.schema.encodingDefaultBinary = DataTypeSchemaHeader.encodingDefaultBinary;
DataTypeSchemaHeader.schema.encodingDefaultXml = DataTypeSchemaHeader.encodingDefaultXml;
DataTypeSchemaHeader.schema.encodingDefaultJson = DataTypeSchemaHeader.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DataTypeSchemaHeader.dataTypeNodeId, "DataTypeSchemaHeader", DataTypeSchemaHeader);
// --------------------------------------------------------------------------------------------
var DataSetFieldFlags;
(function (DataSetFieldFlags) {
    DataSetFieldFlags[DataSetFieldFlags["None"] = 0] = "None";
    DataSetFieldFlags[DataSetFieldFlags["PromotedField"] = 1] = "PromotedField";
    DataSetFieldFlags[DataSetFieldFlags["Invalid"] = 4294967295] = "Invalid";
})(DataSetFieldFlags = exports.DataSetFieldFlags || (exports.DataSetFieldFlags = {}));
const schemaDataSetFieldFlags = {
    enumValues: DataSetFieldFlags,
    flaggable: false,
    minValue: 0,
    maxValue: 1,
    name: "DataSetFieldFlags"
};
function decodeDataSetFieldFlags(stream, _value) {
    let value = stream.readUInt16();
    value = (value < schemaDataSetFieldFlags.minValue || value > schemaDataSetFieldFlags.maxValue) ? DataSetFieldFlags.Invalid : value;
    return value;
}
function encodeDataSetFieldFlags(value, stream) {
    stream.writeUInt16(value);
}
exports._enumerationDataSetFieldFlags = (0, node_opcua_factory_1.registerEnumeration)(schemaDataSetFieldFlags);
(0, node_opcua_assert_1.assert)(exports._enumerationDataSetFieldFlags.isFlaggable === false);
// --------------------------------------------------------------------------------------------
const schemaFieldMetaData = (0, node_opcua_factory_1.buildStructuredType)({
    name: "FieldMetaData",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "name",
            fieldType: "UAString",
        },
        {
            name: "description",
            fieldType: "LocalizedText",
        },
        {
            name: "fieldFlags",
            fieldType: "DataSetFieldFlags",
        },
        {
            name: "builtInType",
            fieldType: "Byte",
        },
        {
            name: "dataType",
            fieldType: "NodeId",
        },
        {
            name: "valueRank",
            fieldType: "Int32",
        },
        {
            name: "arrayDimensions",
            fieldType: "UInt32",
            isArray: true
        },
        {
            name: "maxStringLength",
            fieldType: "UInt32",
        },
        {
            name: "dataSetFieldId",
            fieldType: "Guid",
        },
        {
            name: "properties",
            fieldType: "KeyValuePair",
            isArray: true
        },
    ]
});
class FieldMetaData extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.name = null;
            this.description = new node_opcua_data_model_1.LocalizedText(null);
            this.fieldFlags = 0;
            this.builtInType = 0;
            this.dataType = new node_opcua_nodeid_1.NodeId(null);
            this.valueRank = 0;
            this.arrayDimensions = [];
            this.maxStringLength = 0;
            this.dataSetFieldId = "";
            this.properties = null; /* null array */
            return;
        }
        const schema = FieldMetaData.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.name = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.name);
        this.description = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.description);
        this.fieldFlags = this.setFieldFlags((0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.fieldFlags));
        this.builtInType = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.builtInType);
        this.dataType = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.dataType);
        this.valueRank = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.valueRank);
        this.arrayDimensions = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[6], options === null || options === void 0 ? void 0 : options.arrayDimensions);
        this.maxStringLength = (0, node_opcua_factory_1.initialize_field)(schema.fields[7], options === null || options === void 0 ? void 0 : options.maxStringLength);
        this.dataSetFieldId = (0, node_opcua_factory_1.initialize_field)(schema.fields[8], options === null || options === void 0 ? void 0 : options.dataSetFieldId);
        this.properties = []; // should default
        if (options.properties) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.properties));
            this.properties = options.properties.map((e) => new KeyValuePair(e));
        }
    }
    static get schema() { return schemaFieldMetaData; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.name, stream);
        (0, node_opcua_data_model_1.encodeLocalizedText)(this.description, stream);
        encodeDataSetFieldFlags(this.fieldFlags, stream);
        (0, node_opcua_basic_types_1.encodeByte)(this.builtInType, stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.dataType, stream);
        (0, node_opcua_basic_types_1.encodeInt32)(this.valueRank, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.arrayDimensions, stream, node_opcua_basic_types_1.encodeUInt32);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.maxStringLength, stream);
        (0, node_opcua_basic_types_1.encodeGuid)(this.dataSetFieldId, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.properties, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.name = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.name);
        this.description = (0, node_opcua_data_model_1.decodeLocalizedText)(stream, this.description);
        this.fieldFlags = decodeDataSetFieldFlags(stream, this.fieldFlags);
        this.builtInType = (0, node_opcua_basic_types_1.decodeByte)(stream, this.builtInType);
        this.dataType = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.dataType);
        this.valueRank = (0, node_opcua_basic_types_1.decodeInt32)(stream, this.valueRank);
        this.arrayDimensions = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUInt32);
        this.maxStringLength = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.maxStringLength);
        this.dataSetFieldId = (0, node_opcua_basic_types_1.decodeGuid)(stream, this.dataSetFieldId);
        this.properties = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new KeyValuePair(null);
            obj.decode(stream1);
            return obj;
        });
    }
    // Define Enumeration setters
    setFieldFlags(value) {
        const coercedValue = exports._enumerationDataSetFieldFlags.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to DataSetFieldFlags :" + value);
        }
        this.fieldFlags = coercedValue.value;
        return this.fieldFlags;
    }
    get schema() { return schemaFieldMetaData; }
}
exports.FieldMetaData = FieldMetaData;
FieldMetaData.possibleFields = [
    "name",
    "description",
    "fieldFlags",
    "builtInType",
    "dataType",
    "valueRank",
    "arrayDimensions",
    "maxStringLength",
    "dataSetFieldId",
    "properties"
];
FieldMetaData.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(14524, 0);
FieldMetaData.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(14839, 0);
FieldMetaData.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(14795, 0);
FieldMetaData.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15051, 0);
FieldMetaData.schema.dataTypeNodeId = FieldMetaData.dataTypeNodeId;
FieldMetaData.schema.encodingDefaultBinary = FieldMetaData.encodingDefaultBinary;
FieldMetaData.schema.encodingDefaultXml = FieldMetaData.encodingDefaultXml;
FieldMetaData.schema.encodingDefaultJson = FieldMetaData.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(FieldMetaData.dataTypeNodeId, "FieldMetaData", FieldMetaData);
// --------------------------------------------------------------------------------------------
const schemaDataSetMetaDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DataSetMetaDataType",
    baseType: "DataTypeSchemaHeader",
    fields: [
        {
            name: "name",
            fieldType: "UAString",
        },
        {
            name: "description",
            fieldType: "LocalizedText",
        },
        {
            name: "fields",
            fieldType: "FieldMetaData",
            isArray: true
        },
        {
            name: "dataSetClassId",
            fieldType: "Guid",
        },
        {
            name: "configurationVersion",
            fieldType: "ConfigurationVersionDataType",
        },
    ]
});
class DataSetMetaDataType extends DataTypeSchemaHeader {
    constructor(options) {
        super(options);
        if (options === null) {
            this.name = null;
            this.description = new node_opcua_data_model_1.LocalizedText(null);
            this.fields = null; /* null array */
            this.dataSetClassId = "";
            this.configurationVersion = new ConfigurationVersionDataType(null);
            return;
        }
        const schema = DataSetMetaDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.name = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.name);
        this.description = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.description);
        this.fields = []; // should default
        if (options.fields) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.fields));
            this.fields = options.fields.map((e) => new FieldMetaData(e));
        }
        this.dataSetClassId = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.dataSetClassId);
        this.configurationVersion = new ConfigurationVersionDataType(options.configurationVersion);
    }
    static get schema() { return schemaDataSetMetaDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.name, stream);
        (0, node_opcua_data_model_1.encodeLocalizedText)(this.description, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.fields, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeGuid)(this.dataSetClassId, stream);
        this.configurationVersion.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.name = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.name);
        this.description = (0, node_opcua_data_model_1.decodeLocalizedText)(stream, this.description);
        this.fields = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new FieldMetaData(null);
            obj.decode(stream1);
            return obj;
        });
        this.dataSetClassId = (0, node_opcua_basic_types_1.decodeGuid)(stream, this.dataSetClassId);
        this.configurationVersion.decode(stream);
    }
    get schema() { return schemaDataSetMetaDataType; }
}
exports.DataSetMetaDataType = DataSetMetaDataType;
DataSetMetaDataType.possibleFields = [
    "name",
    "description",
    "fields",
    "dataSetClassId",
    "configurationVersion"
];
DataSetMetaDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(14523, 0);
DataSetMetaDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(124, 0);
DataSetMetaDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(14794, 0);
DataSetMetaDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15050, 0);
DataSetMetaDataType.schema.dataTypeNodeId = DataSetMetaDataType.dataTypeNodeId;
DataSetMetaDataType.schema.encodingDefaultBinary = DataSetMetaDataType.encodingDefaultBinary;
DataSetMetaDataType.schema.encodingDefaultXml = DataSetMetaDataType.encodingDefaultXml;
DataSetMetaDataType.schema.encodingDefaultJson = DataSetMetaDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DataSetMetaDataType.dataTypeNodeId, "DataSetMetaDataType", DataSetMetaDataType);
// --------------------------------------------------------------------------------------------
var DataSetFieldContentMask;
(function (DataSetFieldContentMask) {
    DataSetFieldContentMask[DataSetFieldContentMask["None"] = 0] = "None";
    DataSetFieldContentMask[DataSetFieldContentMask["StatusCode"] = 1] = "StatusCode";
    DataSetFieldContentMask[DataSetFieldContentMask["SourceTimestamp"] = 2] = "SourceTimestamp";
    DataSetFieldContentMask[DataSetFieldContentMask["ServerTimestamp"] = 4] = "ServerTimestamp";
    DataSetFieldContentMask[DataSetFieldContentMask["SourcePicoSeconds"] = 8] = "SourcePicoSeconds";
    DataSetFieldContentMask[DataSetFieldContentMask["ServerPicoSeconds"] = 16] = "ServerPicoSeconds";
    DataSetFieldContentMask[DataSetFieldContentMask["RawData"] = 32] = "RawData";
})(DataSetFieldContentMask = exports.DataSetFieldContentMask || (exports.DataSetFieldContentMask = {}));
const schemaDataSetFieldContentMask = {
    enumValues: DataSetFieldContentMask,
    flaggable: true,
    name: "DataSetFieldContentMask"
};
function decodeDataSetFieldContentMask(stream, _value) {
    return stream.readUInt32();
}
function encodeDataSetFieldContentMask(value, stream) {
    stream.writeUInt32(value);
}
exports._enumerationDataSetFieldContentMask = (0, node_opcua_factory_1.registerEnumeration)(schemaDataSetFieldContentMask);
(0, node_opcua_assert_1.assert)(exports._enumerationDataSetFieldContentMask.isFlaggable === true);
// --------------------------------------------------------------------------------------------
const schemaDataSetReaderDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DataSetReaderDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "name",
            fieldType: "UAString",
        },
        {
            name: "enabled",
            fieldType: "UABoolean",
        },
        {
            name: "publisherId",
            fieldType: "Variant",
        },
        {
            name: "writerGroupId",
            fieldType: "UInt16",
        },
        {
            name: "dataSetWriterId",
            fieldType: "UInt16",
        },
        {
            name: "dataSetMetaData",
            fieldType: "DataSetMetaDataType",
        },
        {
            name: "dataSetFieldContentMask",
            fieldType: "DataSetFieldContentMask",
        },
        {
            name: "messageReceiveTimeout",
            fieldType: "Double",
        },
        {
            name: "keyFrameCount",
            fieldType: "UInt32",
        },
        {
            name: "headerLayoutUri",
            fieldType: "UAString",
        },
        {
            name: "securityMode",
            fieldType: "MessageSecurityMode",
        },
        {
            name: "securityGroupId",
            fieldType: "UAString",
        },
        {
            name: "securityKeyServices",
            fieldType: "EndpointDescription",
            isArray: true
        },
        {
            name: "dataSetReaderProperties",
            fieldType: "KeyValuePair",
            isArray: true
        },
        {
            name: "transportSettings",
            fieldType: "ExtensionObject",
        },
        {
            name: "messageSettings",
            fieldType: "ExtensionObject",
        },
        {
            name: "subscribedDataSet",
            fieldType: "ExtensionObject",
        },
    ]
});
class DataSetReaderDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.name = null;
            this.enabled = false;
            this.publisherId = new node_opcua_variant_1.Variant(null);
            this.writerGroupId = 0;
            this.dataSetWriterId = 0;
            this.dataSetMetaData = new DataSetMetaDataType(null);
            this.dataSetFieldContentMask = 0;
            this.messageReceiveTimeout = 0;
            this.keyFrameCount = 0;
            this.headerLayoutUri = null;
            this.securityMode = 0;
            this.securityGroupId = null;
            this.securityKeyServices = null; /* null array */
            this.dataSetReaderProperties = null; /* null array */
            this.transportSettings = null;
            this.messageSettings = null;
            this.subscribedDataSet = null;
            return;
        }
        const schema = DataSetReaderDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.name = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.name);
        this.enabled = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.enabled);
        this.publisherId = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.publisherId);
        this.writerGroupId = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.writerGroupId);
        this.dataSetWriterId = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.dataSetWriterId);
        this.dataSetMetaData = new DataSetMetaDataType(options.dataSetMetaData);
        this.dataSetFieldContentMask = this.setDataSetFieldContentMask((0, node_opcua_factory_1.initialize_field)(schema.fields[6], options === null || options === void 0 ? void 0 : options.dataSetFieldContentMask));
        this.messageReceiveTimeout = (0, node_opcua_factory_1.initialize_field)(schema.fields[7], options === null || options === void 0 ? void 0 : options.messageReceiveTimeout);
        this.keyFrameCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[8], options === null || options === void 0 ? void 0 : options.keyFrameCount);
        this.headerLayoutUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[9], options === null || options === void 0 ? void 0 : options.headerLayoutUri);
        this.securityMode = this.setSecurityMode((0, node_opcua_factory_1.initialize_field)(schema.fields[10], options === null || options === void 0 ? void 0 : options.securityMode));
        this.securityGroupId = (0, node_opcua_factory_1.initialize_field)(schema.fields[11], options === null || options === void 0 ? void 0 : options.securityGroupId);
        this.securityKeyServices = []; // should default
        if (options.securityKeyServices) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.securityKeyServices));
            this.securityKeyServices = options.securityKeyServices.map((e) => new EndpointDescription(e));
        }
        this.dataSetReaderProperties = []; // should default
        if (options.dataSetReaderProperties) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.dataSetReaderProperties));
            this.dataSetReaderProperties = options.dataSetReaderProperties.map((e) => new KeyValuePair(e));
        }
        this.transportSettings = (0, node_opcua_factory_1.initialize_field)(schema.fields[14], options === null || options === void 0 ? void 0 : options.transportSettings);
        this.messageSettings = (0, node_opcua_factory_1.initialize_field)(schema.fields[15], options === null || options === void 0 ? void 0 : options.messageSettings);
        this.subscribedDataSet = (0, node_opcua_factory_1.initialize_field)(schema.fields[16], options === null || options === void 0 ? void 0 : options.subscribedDataSet);
    }
    static get schema() { return schemaDataSetReaderDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.name, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.enabled, stream);
        (0, node_opcua_variant_1.encodeVariant)(this.publisherId, stream);
        (0, node_opcua_basic_types_1.encodeUInt16)(this.writerGroupId, stream);
        (0, node_opcua_basic_types_1.encodeUInt16)(this.dataSetWriterId, stream);
        this.dataSetMetaData.encode(stream);
        encodeDataSetFieldContentMask(this.dataSetFieldContentMask, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.messageReceiveTimeout, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.keyFrameCount, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.headerLayoutUri, stream);
        encodeMessageSecurityMode(this.securityMode, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.securityGroupId, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.securityKeyServices, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.dataSetReaderProperties, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_extension_object_1.encodeExtensionObject)(this.transportSettings, stream);
        (0, node_opcua_extension_object_1.encodeExtensionObject)(this.messageSettings, stream);
        (0, node_opcua_extension_object_1.encodeExtensionObject)(this.subscribedDataSet, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.name = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.name);
        this.enabled = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.enabled);
        this.publisherId = (0, node_opcua_variant_1.decodeVariant)(stream, this.publisherId);
        this.writerGroupId = (0, node_opcua_basic_types_1.decodeUInt16)(stream, this.writerGroupId);
        this.dataSetWriterId = (0, node_opcua_basic_types_1.decodeUInt16)(stream, this.dataSetWriterId);
        this.dataSetMetaData.decode(stream);
        this.dataSetFieldContentMask = decodeDataSetFieldContentMask(stream, this.dataSetFieldContentMask);
        this.messageReceiveTimeout = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.messageReceiveTimeout);
        this.keyFrameCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.keyFrameCount);
        this.headerLayoutUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.headerLayoutUri);
        this.securityMode = decodeMessageSecurityMode(stream, this.securityMode);
        this.securityGroupId = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.securityGroupId);
        this.securityKeyServices = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new EndpointDescription(null);
            obj.decode(stream1);
            return obj;
        });
        this.dataSetReaderProperties = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new KeyValuePair(null);
            obj.decode(stream1);
            return obj;
        });
        this.transportSettings = (0, node_opcua_extension_object_1.decodeExtensionObject)(stream, this.transportSettings);
        this.messageSettings = (0, node_opcua_extension_object_1.decodeExtensionObject)(stream, this.messageSettings);
        this.subscribedDataSet = (0, node_opcua_extension_object_1.decodeExtensionObject)(stream, this.subscribedDataSet);
    }
    // Define Enumeration setters
    setDataSetFieldContentMask(value) {
        const coercedValue = exports._enumerationDataSetFieldContentMask.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to DataSetFieldContentMask :" + value);
        }
        this.dataSetFieldContentMask = coercedValue.value;
        return this.dataSetFieldContentMask;
    }
    setSecurityMode(value) {
        const coercedValue = exports._enumerationMessageSecurityMode.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to MessageSecurityMode :" + value);
        }
        this.securityMode = coercedValue.value;
        return this.securityMode;
    }
    get schema() { return schemaDataSetReaderDataType; }
}
exports.DataSetReaderDataType = DataSetReaderDataType;
DataSetReaderDataType.possibleFields = [
    "name",
    "enabled",
    "publisherId",
    "writerGroupId",
    "dataSetWriterId",
    "dataSetMetaData",
    "dataSetFieldContentMask",
    "messageReceiveTimeout",
    "keyFrameCount",
    "headerLayoutUri",
    "securityMode",
    "securityGroupId",
    "securityKeyServices",
    "dataSetReaderProperties",
    "transportSettings",
    "messageSettings",
    "subscribedDataSet"
];
DataSetReaderDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15623, 0);
DataSetReaderDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15703, 0);
DataSetReaderDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16007, 0);
DataSetReaderDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16286, 0);
DataSetReaderDataType.schema.dataTypeNodeId = DataSetReaderDataType.dataTypeNodeId;
DataSetReaderDataType.schema.encodingDefaultBinary = DataSetReaderDataType.encodingDefaultBinary;
DataSetReaderDataType.schema.encodingDefaultXml = DataSetReaderDataType.encodingDefaultXml;
DataSetReaderDataType.schema.encodingDefaultJson = DataSetReaderDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DataSetReaderDataType.dataTypeNodeId, "DataSetReaderDataType", DataSetReaderDataType);
// --------------------------------------------------------------------------------------------
const schemaDataSetReaderMessageDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DataSetReaderMessageDataType",
    baseType: "ExtensionObject",
    fields: []
});
class DataSetReaderMessageDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            return;
        }
        const schema = DataSetReaderMessageDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
    }
    static get schema() { return schemaDataSetReaderMessageDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
    }
    get schema() { return schemaDataSetReaderMessageDataType; }
}
exports.DataSetReaderMessageDataType = DataSetReaderMessageDataType;
DataSetReaderMessageDataType.possibleFields = [];
DataSetReaderMessageDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15629, 0);
DataSetReaderMessageDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15706, 0);
DataSetReaderMessageDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16009, 0);
DataSetReaderMessageDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16288, 0);
DataSetReaderMessageDataType.schema.dataTypeNodeId = DataSetReaderMessageDataType.dataTypeNodeId;
DataSetReaderMessageDataType.schema.encodingDefaultBinary = DataSetReaderMessageDataType.encodingDefaultBinary;
DataSetReaderMessageDataType.schema.encodingDefaultXml = DataSetReaderMessageDataType.encodingDefaultXml;
DataSetReaderMessageDataType.schema.encodingDefaultJson = DataSetReaderMessageDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DataSetReaderMessageDataType.dataTypeNodeId, "DataSetReaderMessageDataType", DataSetReaderMessageDataType);
// --------------------------------------------------------------------------------------------
const schemaDataSetWriterDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DataSetWriterDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "name",
            fieldType: "UAString",
        },
        {
            name: "enabled",
            fieldType: "UABoolean",
        },
        {
            name: "dataSetWriterId",
            fieldType: "UInt16",
        },
        {
            name: "dataSetFieldContentMask",
            fieldType: "DataSetFieldContentMask",
        },
        {
            name: "keyFrameCount",
            fieldType: "UInt32",
        },
        {
            name: "dataSetName",
            fieldType: "UAString",
        },
        {
            name: "dataSetWriterProperties",
            fieldType: "KeyValuePair",
            isArray: true
        },
        {
            name: "transportSettings",
            fieldType: "ExtensionObject",
        },
        {
            name: "messageSettings",
            fieldType: "ExtensionObject",
        },
    ]
});
class DataSetWriterDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.name = null;
            this.enabled = false;
            this.dataSetWriterId = 0;
            this.dataSetFieldContentMask = 0;
            this.keyFrameCount = 0;
            this.dataSetName = null;
            this.dataSetWriterProperties = null; /* null array */
            this.transportSettings = null;
            this.messageSettings = null;
            return;
        }
        const schema = DataSetWriterDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.name = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.name);
        this.enabled = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.enabled);
        this.dataSetWriterId = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.dataSetWriterId);
        this.dataSetFieldContentMask = this.setDataSetFieldContentMask((0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.dataSetFieldContentMask));
        this.keyFrameCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.keyFrameCount);
        this.dataSetName = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.dataSetName);
        this.dataSetWriterProperties = []; // should default
        if (options.dataSetWriterProperties) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.dataSetWriterProperties));
            this.dataSetWriterProperties = options.dataSetWriterProperties.map((e) => new KeyValuePair(e));
        }
        this.transportSettings = (0, node_opcua_factory_1.initialize_field)(schema.fields[7], options === null || options === void 0 ? void 0 : options.transportSettings);
        this.messageSettings = (0, node_opcua_factory_1.initialize_field)(schema.fields[8], options === null || options === void 0 ? void 0 : options.messageSettings);
    }
    static get schema() { return schemaDataSetWriterDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.name, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.enabled, stream);
        (0, node_opcua_basic_types_1.encodeUInt16)(this.dataSetWriterId, stream);
        encodeDataSetFieldContentMask(this.dataSetFieldContentMask, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.keyFrameCount, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.dataSetName, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.dataSetWriterProperties, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_extension_object_1.encodeExtensionObject)(this.transportSettings, stream);
        (0, node_opcua_extension_object_1.encodeExtensionObject)(this.messageSettings, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.name = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.name);
        this.enabled = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.enabled);
        this.dataSetWriterId = (0, node_opcua_basic_types_1.decodeUInt16)(stream, this.dataSetWriterId);
        this.dataSetFieldContentMask = decodeDataSetFieldContentMask(stream, this.dataSetFieldContentMask);
        this.keyFrameCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.keyFrameCount);
        this.dataSetName = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.dataSetName);
        this.dataSetWriterProperties = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new KeyValuePair(null);
            obj.decode(stream1);
            return obj;
        });
        this.transportSettings = (0, node_opcua_extension_object_1.decodeExtensionObject)(stream, this.transportSettings);
        this.messageSettings = (0, node_opcua_extension_object_1.decodeExtensionObject)(stream, this.messageSettings);
    }
    // Define Enumeration setters
    setDataSetFieldContentMask(value) {
        const coercedValue = exports._enumerationDataSetFieldContentMask.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to DataSetFieldContentMask :" + value);
        }
        this.dataSetFieldContentMask = coercedValue.value;
        return this.dataSetFieldContentMask;
    }
    get schema() { return schemaDataSetWriterDataType; }
}
exports.DataSetWriterDataType = DataSetWriterDataType;
DataSetWriterDataType.possibleFields = [
    "name",
    "enabled",
    "dataSetWriterId",
    "dataSetFieldContentMask",
    "keyFrameCount",
    "dataSetName",
    "dataSetWriterProperties",
    "transportSettings",
    "messageSettings"
];
DataSetWriterDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15597, 0);
DataSetWriterDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15682, 0);
DataSetWriterDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15955, 0);
DataSetWriterDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16156, 0);
DataSetWriterDataType.schema.dataTypeNodeId = DataSetWriterDataType.dataTypeNodeId;
DataSetWriterDataType.schema.encodingDefaultBinary = DataSetWriterDataType.encodingDefaultBinary;
DataSetWriterDataType.schema.encodingDefaultXml = DataSetWriterDataType.encodingDefaultXml;
DataSetWriterDataType.schema.encodingDefaultJson = DataSetWriterDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DataSetWriterDataType.dataTypeNodeId, "DataSetWriterDataType", DataSetWriterDataType);
// --------------------------------------------------------------------------------------------
const schemaDataSetWriterMessageDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DataSetWriterMessageDataType",
    baseType: "ExtensionObject",
    fields: []
});
class DataSetWriterMessageDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            return;
        }
        const schema = DataSetWriterMessageDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
    }
    static get schema() { return schemaDataSetWriterMessageDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
    }
    get schema() { return schemaDataSetWriterMessageDataType; }
}
exports.DataSetWriterMessageDataType = DataSetWriterMessageDataType;
DataSetWriterMessageDataType.possibleFields = [];
DataSetWriterMessageDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15605, 0);
DataSetWriterMessageDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15688, 0);
DataSetWriterMessageDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15987, 0);
DataSetWriterMessageDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16158, 0);
DataSetWriterMessageDataType.schema.dataTypeNodeId = DataSetWriterMessageDataType.dataTypeNodeId;
DataSetWriterMessageDataType.schema.encodingDefaultBinary = DataSetWriterMessageDataType.encodingDefaultBinary;
DataSetWriterMessageDataType.schema.encodingDefaultXml = DataSetWriterMessageDataType.encodingDefaultXml;
DataSetWriterMessageDataType.schema.encodingDefaultJson = DataSetWriterMessageDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DataSetWriterMessageDataType.dataTypeNodeId, "DataSetWriterMessageDataType", DataSetWriterMessageDataType);
// --------------------------------------------------------------------------------------------
const schemaNodeAttributes = (0, node_opcua_factory_1.buildStructuredType)({
    name: "NodeAttributes",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "specifiedAttributes",
            fieldType: "UInt32",
        },
        {
            name: "displayName",
            fieldType: "LocalizedText",
        },
        {
            name: "description",
            fieldType: "LocalizedText",
        },
        {
            name: "writeMask",
            fieldType: "UInt32",
        },
        {
            name: "userWriteMask",
            fieldType: "UInt32",
        },
    ]
});
class NodeAttributes extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.specifiedAttributes = 0;
            this.displayName = new node_opcua_data_model_1.LocalizedText(null);
            this.description = new node_opcua_data_model_1.LocalizedText(null);
            this.writeMask = 0;
            this.userWriteMask = 0;
            return;
        }
        const schema = NodeAttributes.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.specifiedAttributes = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.specifiedAttributes);
        this.displayName = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.displayName);
        this.description = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.description);
        this.writeMask = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.writeMask);
        this.userWriteMask = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.userWriteMask);
    }
    static get schema() { return schemaNodeAttributes; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.specifiedAttributes, stream);
        (0, node_opcua_data_model_1.encodeLocalizedText)(this.displayName, stream);
        (0, node_opcua_data_model_1.encodeLocalizedText)(this.description, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.writeMask, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.userWriteMask, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.specifiedAttributes = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.specifiedAttributes);
        this.displayName = (0, node_opcua_data_model_1.decodeLocalizedText)(stream, this.displayName);
        this.description = (0, node_opcua_data_model_1.decodeLocalizedText)(stream, this.description);
        this.writeMask = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.writeMask);
        this.userWriteMask = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.userWriteMask);
    }
    get schema() { return schemaNodeAttributes; }
}
exports.NodeAttributes = NodeAttributes;
NodeAttributes.possibleFields = [
    "specifiedAttributes",
    "displayName",
    "description",
    "writeMask",
    "userWriteMask"
];
NodeAttributes.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(349, 0);
NodeAttributes.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(351, 0);
NodeAttributes.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(350, 0);
NodeAttributes.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15151, 0);
NodeAttributes.schema.dataTypeNodeId = NodeAttributes.dataTypeNodeId;
NodeAttributes.schema.encodingDefaultBinary = NodeAttributes.encodingDefaultBinary;
NodeAttributes.schema.encodingDefaultXml = NodeAttributes.encodingDefaultXml;
NodeAttributes.schema.encodingDefaultJson = NodeAttributes.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(NodeAttributes.dataTypeNodeId, "NodeAttributes", NodeAttributes);
// --------------------------------------------------------------------------------------------
const schemaDataTypeAttributes = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DataTypeAttributes",
    baseType: "NodeAttributes",
    fields: [
        {
            name: "isAbstract",
            fieldType: "UABoolean",
        },
    ]
});
class DataTypeAttributes extends NodeAttributes {
    constructor(options) {
        super(options);
        if (options === null) {
            this.isAbstract = false;
            return;
        }
        const schema = DataTypeAttributes.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.isAbstract = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.isAbstract);
    }
    static get schema() { return schemaDataTypeAttributes; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.isAbstract, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.isAbstract = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.isAbstract);
    }
    get schema() { return schemaDataTypeAttributes; }
}
exports.DataTypeAttributes = DataTypeAttributes;
DataTypeAttributes.possibleFields = [
    "isAbstract"
];
DataTypeAttributes.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(370, 0);
DataTypeAttributes.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(372, 0);
DataTypeAttributes.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(371, 0);
DataTypeAttributes.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15161, 0);
DataTypeAttributes.schema.dataTypeNodeId = DataTypeAttributes.dataTypeNodeId;
DataTypeAttributes.schema.encodingDefaultBinary = DataTypeAttributes.encodingDefaultBinary;
DataTypeAttributes.schema.encodingDefaultXml = DataTypeAttributes.encodingDefaultXml;
DataTypeAttributes.schema.encodingDefaultJson = DataTypeAttributes.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DataTypeAttributes.dataTypeNodeId, "DataTypeAttributes", DataTypeAttributes);
// --------------------------------------------------------------------------------------------
var PermissionType;
(function (PermissionType) {
    PermissionType[PermissionType["None"] = 0] = "None";
    PermissionType[PermissionType["Browse"] = 1] = "Browse";
    PermissionType[PermissionType["ReadRolePermissions"] = 2] = "ReadRolePermissions";
    PermissionType[PermissionType["WriteAttribute"] = 4] = "WriteAttribute";
    PermissionType[PermissionType["WriteRolePermissions"] = 8] = "WriteRolePermissions";
    PermissionType[PermissionType["WriteHistorizing"] = 16] = "WriteHistorizing";
    PermissionType[PermissionType["Read"] = 32] = "Read";
    PermissionType[PermissionType["Write"] = 64] = "Write";
    PermissionType[PermissionType["ReadHistory"] = 128] = "ReadHistory";
    PermissionType[PermissionType["InsertHistory"] = 256] = "InsertHistory";
    PermissionType[PermissionType["ModifyHistory"] = 512] = "ModifyHistory";
    PermissionType[PermissionType["DeleteHistory"] = 1024] = "DeleteHistory";
    PermissionType[PermissionType["ReceiveEvents"] = 2048] = "ReceiveEvents";
    PermissionType[PermissionType["Call"] = 4096] = "Call";
    PermissionType[PermissionType["AddReference"] = 8192] = "AddReference";
    PermissionType[PermissionType["RemoveReference"] = 16384] = "RemoveReference";
    PermissionType[PermissionType["DeleteNode"] = 32768] = "DeleteNode";
    PermissionType[PermissionType["AddNode"] = 65536] = "AddNode";
})(PermissionType = exports.PermissionType || (exports.PermissionType = {}));
const schemaPermissionType = {
    enumValues: PermissionType,
    flaggable: true,
    name: "PermissionType"
};
function decodePermissionType(stream, _value) {
    return stream.readUInt32();
}
function encodePermissionType(value, stream) {
    stream.writeUInt32(value);
}
exports._enumerationPermissionType = (0, node_opcua_factory_1.registerEnumeration)(schemaPermissionType);
(0, node_opcua_assert_1.assert)(exports._enumerationPermissionType.isFlaggable === true);
// --------------------------------------------------------------------------------------------
const schemaRolePermissionType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "RolePermissionType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "roleId",
            fieldType: "NodeId",
        },
        {
            name: "permissions",
            fieldType: "PermissionType",
        },
    ]
});
class RolePermissionType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.roleId = new node_opcua_nodeid_1.NodeId(null);
            this.permissions = 0;
            return;
        }
        const schema = RolePermissionType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.roleId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.roleId);
        this.permissions = this.setPermissions((0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.permissions));
    }
    static get schema() { return schemaRolePermissionType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.roleId, stream);
        encodePermissionType(this.permissions, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.roleId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.roleId);
        this.permissions = decodePermissionType(stream, this.permissions);
    }
    // Define Enumeration setters
    setPermissions(value) {
        const coercedValue = exports._enumerationPermissionType.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to PermissionType :" + value);
        }
        this.permissions = coercedValue.value;
        return this.permissions;
    }
    get schema() { return schemaRolePermissionType; }
}
exports.RolePermissionType = RolePermissionType;
RolePermissionType.possibleFields = [
    "roleId",
    "permissions"
];
RolePermissionType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(96, 0);
RolePermissionType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(128, 0);
RolePermissionType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16126, 0);
RolePermissionType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15062, 0);
RolePermissionType.schema.dataTypeNodeId = RolePermissionType.dataTypeNodeId;
RolePermissionType.schema.encodingDefaultBinary = RolePermissionType.encodingDefaultBinary;
RolePermissionType.schema.encodingDefaultXml = RolePermissionType.encodingDefaultXml;
RolePermissionType.schema.encodingDefaultJson = RolePermissionType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(RolePermissionType.dataTypeNodeId, "RolePermissionType", RolePermissionType);
// --------------------------------------------------------------------------------------------
const schemaReferenceNode = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ReferenceNode",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "referenceTypeId",
            fieldType: "NodeId",
        },
        {
            name: "isInverse",
            fieldType: "UABoolean",
        },
        {
            name: "targetId",
            fieldType: "ExpandedNodeId",
        },
    ]
});
class ReferenceNode extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.referenceTypeId = new node_opcua_nodeid_1.NodeId(null);
            this.isInverse = false;
            this.targetId = new node_opcua_nodeid_1.ExpandedNodeId(null);
            return;
        }
        const schema = ReferenceNode.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.referenceTypeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.referenceTypeId);
        this.isInverse = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.isInverse);
        this.targetId = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.targetId);
    }
    static get schema() { return schemaReferenceNode; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.referenceTypeId, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.isInverse, stream);
        (0, node_opcua_basic_types_1.encodeExpandedNodeId)(this.targetId, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.referenceTypeId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.referenceTypeId);
        this.isInverse = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.isInverse);
        this.targetId = (0, node_opcua_basic_types_1.decodeExpandedNodeId)(stream, this.targetId);
    }
    get schema() { return schemaReferenceNode; }
}
exports.ReferenceNode = ReferenceNode;
ReferenceNode.possibleFields = [
    "referenceTypeId",
    "isInverse",
    "targetId"
];
ReferenceNode.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(285, 0);
ReferenceNode.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(287, 0);
ReferenceNode.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(286, 0);
ReferenceNode.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15080, 0);
ReferenceNode.schema.dataTypeNodeId = ReferenceNode.dataTypeNodeId;
ReferenceNode.schema.encodingDefaultBinary = ReferenceNode.encodingDefaultBinary;
ReferenceNode.schema.encodingDefaultXml = ReferenceNode.encodingDefaultXml;
ReferenceNode.schema.encodingDefaultJson = ReferenceNode.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ReferenceNode.dataTypeNodeId, "ReferenceNode", ReferenceNode);
// --------------------------------------------------------------------------------------------
const schemaNode = (0, node_opcua_factory_1.buildStructuredType)({
    name: "Node",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "nodeId",
            fieldType: "NodeId",
        },
        {
            name: "nodeClass",
            fieldType: "NodeClass",
        },
        {
            name: "browseName",
            fieldType: "QualifiedName",
        },
        {
            name: "displayName",
            fieldType: "LocalizedText",
        },
        {
            name: "description",
            fieldType: "LocalizedText",
        },
        {
            name: "writeMask",
            fieldType: "UInt32",
        },
        {
            name: "userWriteMask",
            fieldType: "UInt32",
        },
        {
            name: "rolePermissions",
            fieldType: "RolePermissionType",
            isArray: true
        },
        {
            name: "userRolePermissions",
            fieldType: "RolePermissionType",
            isArray: true
        },
        {
            name: "accessRestrictions",
            fieldType: "UInt16",
        },
        {
            name: "references",
            fieldType: "ReferenceNode",
            isArray: true
        },
    ]
});
class Node extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.nodeId = new node_opcua_nodeid_1.NodeId(null);
            this.nodeClass = 0;
            this.browseName = new node_opcua_data_model_1.QualifiedName(null);
            this.displayName = new node_opcua_data_model_1.LocalizedText(null);
            this.description = new node_opcua_data_model_1.LocalizedText(null);
            this.writeMask = 0;
            this.userWriteMask = 0;
            this.rolePermissions = null; /* null array */
            this.userRolePermissions = null; /* null array */
            this.accessRestrictions = 0;
            this.references = null; /* null array */
            return;
        }
        const schema = Node.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.nodeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.nodeId);
        this.nodeClass = this.setNodeClass((0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.nodeClass));
        this.browseName = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.browseName);
        this.displayName = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.displayName);
        this.description = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.description);
        this.writeMask = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.writeMask);
        this.userWriteMask = (0, node_opcua_factory_1.initialize_field)(schema.fields[6], options === null || options === void 0 ? void 0 : options.userWriteMask);
        this.rolePermissions = []; // should default
        if (options.rolePermissions) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.rolePermissions));
            this.rolePermissions = options.rolePermissions.map((e) => new RolePermissionType(e));
        }
        this.userRolePermissions = []; // should default
        if (options.userRolePermissions) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.userRolePermissions));
            this.userRolePermissions = options.userRolePermissions.map((e) => new RolePermissionType(e));
        }
        this.accessRestrictions = (0, node_opcua_factory_1.initialize_field)(schema.fields[9], options === null || options === void 0 ? void 0 : options.accessRestrictions);
        this.references = []; // should default
        if (options.references) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.references));
            this.references = options.references.map((e) => new ReferenceNode(e));
        }
    }
    static get schema() { return schemaNode; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.nodeId, stream);
        encodeNodeClass(this.nodeClass, stream);
        (0, node_opcua_data_model_1.encodeQualifiedName)(this.browseName, stream);
        (0, node_opcua_data_model_1.encodeLocalizedText)(this.displayName, stream);
        (0, node_opcua_data_model_1.encodeLocalizedText)(this.description, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.writeMask, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.userWriteMask, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.rolePermissions, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.userRolePermissions, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeUInt16)(this.accessRestrictions, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.references, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.nodeId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.nodeId);
        this.nodeClass = decodeNodeClass(stream, this.nodeClass);
        this.browseName = (0, node_opcua_data_model_1.decodeQualifiedName)(stream, this.browseName);
        this.displayName = (0, node_opcua_data_model_1.decodeLocalizedText)(stream, this.displayName);
        this.description = (0, node_opcua_data_model_1.decodeLocalizedText)(stream, this.description);
        this.writeMask = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.writeMask);
        this.userWriteMask = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.userWriteMask);
        this.rolePermissions = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new RolePermissionType(null);
            obj.decode(stream1);
            return obj;
        });
        this.userRolePermissions = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new RolePermissionType(null);
            obj.decode(stream1);
            return obj;
        });
        this.accessRestrictions = (0, node_opcua_basic_types_1.decodeUInt16)(stream, this.accessRestrictions);
        this.references = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new ReferenceNode(null);
            obj.decode(stream1);
            return obj;
        });
    }
    // Define Enumeration setters
    setNodeClass(value) {
        const coercedValue = exports._enumerationNodeClass.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to NodeClass :" + value);
        }
        this.nodeClass = coercedValue.value;
        return this.nodeClass;
    }
    get schema() { return schemaNode; }
}
exports.Node = Node;
Node.possibleFields = [
    "nodeId",
    "nodeClass",
    "browseName",
    "displayName",
    "description",
    "writeMask",
    "userWriteMask",
    "rolePermissions",
    "userRolePermissions",
    "accessRestrictions",
    "references"
];
Node.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(258, 0);
Node.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(260, 0);
Node.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(259, 0);
Node.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15068, 0);
Node.schema.dataTypeNodeId = Node.dataTypeNodeId;
Node.schema.encodingDefaultBinary = Node.encodingDefaultBinary;
Node.schema.encodingDefaultXml = Node.encodingDefaultXml;
Node.schema.encodingDefaultJson = Node.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(Node.dataTypeNodeId, "Node", Node);
// --------------------------------------------------------------------------------------------
const schemaTypeNode = (0, node_opcua_factory_1.buildStructuredType)({
    name: "TypeNode",
    baseType: "Node",
    fields: []
});
class TypeNode extends Node {
    constructor(options) {
        super(options);
        if (options === null) {
            return;
        }
        const schema = TypeNode.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
    }
    static get schema() { return schemaTypeNode; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
    }
    get schema() { return schemaTypeNode; }
}
exports.TypeNode = TypeNode;
TypeNode.possibleFields = [];
TypeNode.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(11880, 0);
TypeNode.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(11890, 0);
TypeNode.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(11888, 0);
TypeNode.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15070, 0);
TypeNode.schema.dataTypeNodeId = TypeNode.dataTypeNodeId;
TypeNode.schema.encodingDefaultBinary = TypeNode.encodingDefaultBinary;
TypeNode.schema.encodingDefaultXml = TypeNode.encodingDefaultXml;
TypeNode.schema.encodingDefaultJson = TypeNode.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(TypeNode.dataTypeNodeId, "TypeNode", TypeNode);
// --------------------------------------------------------------------------------------------
const schemaDataTypeNode = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DataTypeNode",
    baseType: "TypeNode",
    fields: [
        {
            name: "rolePermissions",
            fieldType: "RolePermissionType",
            isArray: true
        },
        {
            name: "userRolePermissions",
            fieldType: "RolePermissionType",
            isArray: true
        },
        {
            name: "references",
            fieldType: "ReferenceNode",
            isArray: true
        },
        {
            name: "isAbstract",
            fieldType: "UABoolean",
        },
        {
            name: "dataTypeDefinition",
            fieldType: "ExtensionObject",
        },
    ]
});
class DataTypeNode extends TypeNode {
    constructor(options) {
        super(options);
        if (options === null) {
            this.rolePermissions = null; /* null array */
            this.userRolePermissions = null; /* null array */
            this.references = null; /* null array */
            this.isAbstract = false;
            this.dataTypeDefinition = null;
            return;
        }
        const schema = DataTypeNode.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.rolePermissions = []; // should default
        if (options.rolePermissions) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.rolePermissions));
            this.rolePermissions = options.rolePermissions.map((e) => new RolePermissionType(e));
        }
        this.userRolePermissions = []; // should default
        if (options.userRolePermissions) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.userRolePermissions));
            this.userRolePermissions = options.userRolePermissions.map((e) => new RolePermissionType(e));
        }
        this.references = []; // should default
        if (options.references) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.references));
            this.references = options.references.map((e) => new ReferenceNode(e));
        }
        this.isAbstract = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.isAbstract);
        this.dataTypeDefinition = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.dataTypeDefinition);
    }
    static get schema() { return schemaDataTypeNode; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.rolePermissions, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.userRolePermissions, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.references, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.isAbstract, stream);
        (0, node_opcua_extension_object_1.encodeExtensionObject)(this.dataTypeDefinition, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.rolePermissions = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new RolePermissionType(null);
            obj.decode(stream1);
            return obj;
        });
        this.userRolePermissions = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new RolePermissionType(null);
            obj.decode(stream1);
            return obj;
        });
        this.references = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new ReferenceNode(null);
            obj.decode(stream1);
            return obj;
        });
        this.isAbstract = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.isAbstract);
        this.dataTypeDefinition = (0, node_opcua_extension_object_1.decodeExtensionObject)(stream, this.dataTypeDefinition);
    }
    get schema() { return schemaDataTypeNode; }
}
exports.DataTypeNode = DataTypeNode;
DataTypeNode.possibleFields = [
    "rolePermissions",
    "userRolePermissions",
    "references",
    "isAbstract",
    "dataTypeDefinition"
];
DataTypeNode.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(282, 0);
DataTypeNode.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(284, 0);
DataTypeNode.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(283, 0);
DataTypeNode.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15079, 0);
DataTypeNode.schema.dataTypeNodeId = DataTypeNode.dataTypeNodeId;
DataTypeNode.schema.encodingDefaultBinary = DataTypeNode.encodingDefaultBinary;
DataTypeNode.schema.encodingDefaultXml = DataTypeNode.encodingDefaultXml;
DataTypeNode.schema.encodingDefaultJson = DataTypeNode.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DataTypeNode.dataTypeNodeId, "DataTypeNode", DataTypeNode);
// --------------------------------------------------------------------------------------------
const schemaDatagramConnectionTransportDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DatagramConnectionTransportDataType",
    baseType: "ConnectionTransportDataType",
    fields: [
        {
            name: "discoveryAddress",
            fieldType: "ExtensionObject",
        },
    ]
});
class DatagramConnectionTransportDataType extends ConnectionTransportDataType {
    constructor(options) {
        super(options);
        if (options === null) {
            this.discoveryAddress = null;
            return;
        }
        const schema = DatagramConnectionTransportDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.discoveryAddress = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.discoveryAddress);
    }
    static get schema() { return schemaDatagramConnectionTransportDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_extension_object_1.encodeExtensionObject)(this.discoveryAddress, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.discoveryAddress = (0, node_opcua_extension_object_1.decodeExtensionObject)(stream, this.discoveryAddress);
    }
    get schema() { return schemaDatagramConnectionTransportDataType; }
}
exports.DatagramConnectionTransportDataType = DatagramConnectionTransportDataType;
DatagramConnectionTransportDataType.possibleFields = [
    "discoveryAddress"
];
DatagramConnectionTransportDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(17467, 0);
DatagramConnectionTransportDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(17468, 0);
DatagramConnectionTransportDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(17472, 0);
DatagramConnectionTransportDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(17476, 0);
DatagramConnectionTransportDataType.schema.dataTypeNodeId = DatagramConnectionTransportDataType.dataTypeNodeId;
DatagramConnectionTransportDataType.schema.encodingDefaultBinary = DatagramConnectionTransportDataType.encodingDefaultBinary;
DatagramConnectionTransportDataType.schema.encodingDefaultXml = DatagramConnectionTransportDataType.encodingDefaultXml;
DatagramConnectionTransportDataType.schema.encodingDefaultJson = DatagramConnectionTransportDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DatagramConnectionTransportDataType.dataTypeNodeId, "DatagramConnectionTransportDataType", DatagramConnectionTransportDataType);
// --------------------------------------------------------------------------------------------
const schemaDatagramWriterGroupTransportDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DatagramWriterGroupTransportDataType",
    baseType: "WriterGroupTransportDataType",
    fields: [
        {
            name: "messageRepeatCount",
            fieldType: "Byte",
        },
        {
            name: "messageRepeatDelay",
            fieldType: "Double",
        },
    ]
});
class DatagramWriterGroupTransportDataType extends WriterGroupTransportDataType {
    constructor(options) {
        super(options);
        if (options === null) {
            this.messageRepeatCount = 0;
            this.messageRepeatDelay = 0;
            return;
        }
        const schema = DatagramWriterGroupTransportDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.messageRepeatCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.messageRepeatCount);
        this.messageRepeatDelay = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.messageRepeatDelay);
    }
    static get schema() { return schemaDatagramWriterGroupTransportDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeByte)(this.messageRepeatCount, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.messageRepeatDelay, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.messageRepeatCount = (0, node_opcua_basic_types_1.decodeByte)(stream, this.messageRepeatCount);
        this.messageRepeatDelay = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.messageRepeatDelay);
    }
    get schema() { return schemaDatagramWriterGroupTransportDataType; }
}
exports.DatagramWriterGroupTransportDataType = DatagramWriterGroupTransportDataType;
DatagramWriterGroupTransportDataType.possibleFields = [
    "messageRepeatCount",
    "messageRepeatDelay"
];
DatagramWriterGroupTransportDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15532, 0);
DatagramWriterGroupTransportDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(21155, 0);
DatagramWriterGroupTransportDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(21179, 0);
DatagramWriterGroupTransportDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(21203, 0);
DatagramWriterGroupTransportDataType.schema.dataTypeNodeId = DatagramWriterGroupTransportDataType.dataTypeNodeId;
DatagramWriterGroupTransportDataType.schema.encodingDefaultBinary = DatagramWriterGroupTransportDataType.encodingDefaultBinary;
DatagramWriterGroupTransportDataType.schema.encodingDefaultXml = DatagramWriterGroupTransportDataType.encodingDefaultXml;
DatagramWriterGroupTransportDataType.schema.encodingDefaultJson = DatagramWriterGroupTransportDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DatagramWriterGroupTransportDataType.dataTypeNodeId, "DatagramWriterGroupTransportDataType", DatagramWriterGroupTransportDataType);
// --------------------------------------------------------------------------------------------
const schemaDecimalDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DecimalDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "scale",
            fieldType: "Int16",
        },
        {
            name: "value",
            fieldType: "ByteString",
        },
    ]
});
class DecimalDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.scale = 0;
            this.value = Buffer.alloc(0);
            return;
        }
        const schema = DecimalDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.scale = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.scale);
        this.value = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.value);
    }
    static get schema() { return schemaDecimalDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeInt16)(this.scale, stream);
        (0, node_opcua_basic_types_1.encodeByteString)(this.value, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.scale = (0, node_opcua_basic_types_1.decodeInt16)(stream, this.scale);
        this.value = (0, node_opcua_basic_types_1.decodeByteString)(stream, this.value);
    }
    get schema() { return schemaDecimalDataType; }
}
exports.DecimalDataType = DecimalDataType;
DecimalDataType.possibleFields = [
    "scale",
    "value"
];
DecimalDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(17861, 0);
DecimalDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(17863, 0);
DecimalDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(17862, 0);
DecimalDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15045, 0);
DecimalDataType.schema.dataTypeNodeId = DecimalDataType.dataTypeNodeId;
DecimalDataType.schema.encodingDefaultBinary = DecimalDataType.encodingDefaultBinary;
DecimalDataType.schema.encodingDefaultXml = DecimalDataType.encodingDefaultXml;
DecimalDataType.schema.encodingDefaultJson = DecimalDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DecimalDataType.dataTypeNodeId, "DecimalDataType", DecimalDataType);
// --------------------------------------------------------------------------------------------
const schemaHistoryUpdateDetails = (0, node_opcua_factory_1.buildStructuredType)({
    name: "HistoryUpdateDetails",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "nodeId",
            fieldType: "NodeId",
        },
    ]
});
class HistoryUpdateDetails extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.nodeId = new node_opcua_nodeid_1.NodeId(null);
            return;
        }
        const schema = HistoryUpdateDetails.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.nodeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.nodeId);
    }
    static get schema() { return schemaHistoryUpdateDetails; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.nodeId, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.nodeId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.nodeId);
    }
    get schema() { return schemaHistoryUpdateDetails; }
}
exports.HistoryUpdateDetails = HistoryUpdateDetails;
HistoryUpdateDetails.possibleFields = [
    "nodeId"
];
HistoryUpdateDetails.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(677, 0);
HistoryUpdateDetails.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(679, 0);
HistoryUpdateDetails.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(678, 0);
HistoryUpdateDetails.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15279, 0);
HistoryUpdateDetails.schema.dataTypeNodeId = HistoryUpdateDetails.dataTypeNodeId;
HistoryUpdateDetails.schema.encodingDefaultBinary = HistoryUpdateDetails.encodingDefaultBinary;
HistoryUpdateDetails.schema.encodingDefaultXml = HistoryUpdateDetails.encodingDefaultXml;
HistoryUpdateDetails.schema.encodingDefaultJson = HistoryUpdateDetails.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(HistoryUpdateDetails.dataTypeNodeId, "HistoryUpdateDetails", HistoryUpdateDetails);
// --------------------------------------------------------------------------------------------
const schemaDeleteAtTimeDetails = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DeleteAtTimeDetails",
    baseType: "HistoryUpdateDetails",
    fields: [
        {
            name: "reqTimes",
            fieldType: "DateTime",
            isArray: true
        },
    ]
});
class DeleteAtTimeDetails extends HistoryUpdateDetails {
    constructor(options) {
        super(options);
        if (options === null) {
            this.reqTimes = [];
            return;
        }
        const schema = DeleteAtTimeDetails.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.reqTimes = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[0], options === null || options === void 0 ? void 0 : options.reqTimes);
    }
    static get schema() { return schemaDeleteAtTimeDetails; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.reqTimes, stream, node_opcua_basic_types_1.encodeDateTime);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.reqTimes = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeDateTime);
    }
    get schema() { return schemaDeleteAtTimeDetails; }
}
exports.DeleteAtTimeDetails = DeleteAtTimeDetails;
DeleteAtTimeDetails.possibleFields = [
    "reqTimes"
];
DeleteAtTimeDetails.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(689, 0);
DeleteAtTimeDetails.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(691, 0);
DeleteAtTimeDetails.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(690, 0);
DeleteAtTimeDetails.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15284, 0);
DeleteAtTimeDetails.schema.dataTypeNodeId = DeleteAtTimeDetails.dataTypeNodeId;
DeleteAtTimeDetails.schema.encodingDefaultBinary = DeleteAtTimeDetails.encodingDefaultBinary;
DeleteAtTimeDetails.schema.encodingDefaultXml = DeleteAtTimeDetails.encodingDefaultXml;
DeleteAtTimeDetails.schema.encodingDefaultJson = DeleteAtTimeDetails.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DeleteAtTimeDetails.dataTypeNodeId, "DeleteAtTimeDetails", DeleteAtTimeDetails);
// --------------------------------------------------------------------------------------------
const schemaDeleteEventDetails = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DeleteEventDetails",
    baseType: "HistoryUpdateDetails",
    fields: [
        {
            name: "eventIds",
            fieldType: "ByteString",
            isArray: true
        },
    ]
});
class DeleteEventDetails extends HistoryUpdateDetails {
    constructor(options) {
        super(options);
        if (options === null) {
            this.eventIds = [];
            return;
        }
        const schema = DeleteEventDetails.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.eventIds = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[0], options === null || options === void 0 ? void 0 : options.eventIds);
    }
    static get schema() { return schemaDeleteEventDetails; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.eventIds, stream, node_opcua_basic_types_1.encodeByteString);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.eventIds = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeByteString);
    }
    get schema() { return schemaDeleteEventDetails; }
}
exports.DeleteEventDetails = DeleteEventDetails;
DeleteEventDetails.possibleFields = [
    "eventIds"
];
DeleteEventDetails.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(692, 0);
DeleteEventDetails.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(694, 0);
DeleteEventDetails.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(693, 0);
DeleteEventDetails.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15285, 0);
DeleteEventDetails.schema.dataTypeNodeId = DeleteEventDetails.dataTypeNodeId;
DeleteEventDetails.schema.encodingDefaultBinary = DeleteEventDetails.encodingDefaultBinary;
DeleteEventDetails.schema.encodingDefaultXml = DeleteEventDetails.encodingDefaultXml;
DeleteEventDetails.schema.encodingDefaultJson = DeleteEventDetails.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DeleteEventDetails.dataTypeNodeId, "DeleteEventDetails", DeleteEventDetails);
// --------------------------------------------------------------------------------------------
const schemaDeleteMonitoredItemsRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DeleteMonitoredItemsRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "subscriptionId",
            fieldType: "UInt32",
        },
        {
            name: "monitoredItemIds",
            fieldType: "UInt32",
            isArray: true
        },
    ]
});
class DeleteMonitoredItemsRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.subscriptionId = 0;
            this.monitoredItemIds = [];
            return;
        }
        const schema = DeleteMonitoredItemsRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.subscriptionId = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.subscriptionId);
        this.monitoredItemIds = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.monitoredItemIds);
    }
    static get schema() { return schemaDeleteMonitoredItemsRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.subscriptionId, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.monitoredItemIds, stream, node_opcua_basic_types_1.encodeUInt32);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.subscriptionId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.subscriptionId);
        this.monitoredItemIds = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUInt32);
    }
    get schema() { return schemaDeleteMonitoredItemsRequest; }
}
exports.DeleteMonitoredItemsRequest = DeleteMonitoredItemsRequest;
DeleteMonitoredItemsRequest.possibleFields = [
    "requestHeader",
    "subscriptionId",
    "monitoredItemIds"
];
DeleteMonitoredItemsRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(779, 0);
DeleteMonitoredItemsRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(781, 0);
DeleteMonitoredItemsRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(780, 0);
DeleteMonitoredItemsRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15335, 0);
DeleteMonitoredItemsRequest.schema.dataTypeNodeId = DeleteMonitoredItemsRequest.dataTypeNodeId;
DeleteMonitoredItemsRequest.schema.encodingDefaultBinary = DeleteMonitoredItemsRequest.encodingDefaultBinary;
DeleteMonitoredItemsRequest.schema.encodingDefaultXml = DeleteMonitoredItemsRequest.encodingDefaultXml;
DeleteMonitoredItemsRequest.schema.encodingDefaultJson = DeleteMonitoredItemsRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DeleteMonitoredItemsRequest.dataTypeNodeId, "DeleteMonitoredItemsRequest", DeleteMonitoredItemsRequest);
// --------------------------------------------------------------------------------------------
const schemaDeleteMonitoredItemsResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DeleteMonitoredItemsResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "results",
            fieldType: "StatusCode",
            isArray: true
        },
        {
            name: "diagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class DeleteMonitoredItemsResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.results = [];
            this.diagnosticInfos = [];
            return;
        }
        const schema = DeleteMonitoredItemsResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.results = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.results);
        this.diagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.diagnosticInfos);
    }
    static get schema() { return schemaDeleteMonitoredItemsResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.results, stream, node_opcua_status_code_1.encodeStatusCode);
        (0, node_opcua_basic_types_1.encodeArray)(this.diagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.results = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_status_code_1.decodeStatusCode);
        this.diagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaDeleteMonitoredItemsResponse; }
}
exports.DeleteMonitoredItemsResponse = DeleteMonitoredItemsResponse;
DeleteMonitoredItemsResponse.possibleFields = [
    "responseHeader",
    "results",
    "diagnosticInfos"
];
DeleteMonitoredItemsResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(782, 0);
DeleteMonitoredItemsResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(784, 0);
DeleteMonitoredItemsResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(783, 0);
DeleteMonitoredItemsResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15336, 0);
DeleteMonitoredItemsResponse.schema.dataTypeNodeId = DeleteMonitoredItemsResponse.dataTypeNodeId;
DeleteMonitoredItemsResponse.schema.encodingDefaultBinary = DeleteMonitoredItemsResponse.encodingDefaultBinary;
DeleteMonitoredItemsResponse.schema.encodingDefaultXml = DeleteMonitoredItemsResponse.encodingDefaultXml;
DeleteMonitoredItemsResponse.schema.encodingDefaultJson = DeleteMonitoredItemsResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DeleteMonitoredItemsResponse.dataTypeNodeId, "DeleteMonitoredItemsResponse", DeleteMonitoredItemsResponse);
// --------------------------------------------------------------------------------------------
const schemaDeleteNodesItem = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DeleteNodesItem",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "nodeId",
            fieldType: "NodeId",
        },
        {
            name: "deleteTargetReferences",
            fieldType: "UABoolean",
        },
    ]
});
class DeleteNodesItem extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.nodeId = new node_opcua_nodeid_1.NodeId(null);
            this.deleteTargetReferences = false;
            return;
        }
        const schema = DeleteNodesItem.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.nodeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.nodeId);
        this.deleteTargetReferences = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.deleteTargetReferences);
    }
    static get schema() { return schemaDeleteNodesItem; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.nodeId, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.deleteTargetReferences, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.nodeId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.nodeId);
        this.deleteTargetReferences = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.deleteTargetReferences);
    }
    get schema() { return schemaDeleteNodesItem; }
}
exports.DeleteNodesItem = DeleteNodesItem;
DeleteNodesItem.possibleFields = [
    "nodeId",
    "deleteTargetReferences"
];
DeleteNodesItem.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(382, 0);
DeleteNodesItem.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(384, 0);
DeleteNodesItem.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(383, 0);
DeleteNodesItem.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15172, 0);
DeleteNodesItem.schema.dataTypeNodeId = DeleteNodesItem.dataTypeNodeId;
DeleteNodesItem.schema.encodingDefaultBinary = DeleteNodesItem.encodingDefaultBinary;
DeleteNodesItem.schema.encodingDefaultXml = DeleteNodesItem.encodingDefaultXml;
DeleteNodesItem.schema.encodingDefaultJson = DeleteNodesItem.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DeleteNodesItem.dataTypeNodeId, "DeleteNodesItem", DeleteNodesItem);
// --------------------------------------------------------------------------------------------
const schemaDeleteNodesRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DeleteNodesRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "nodesToDelete",
            fieldType: "DeleteNodesItem",
            isArray: true
        },
    ]
});
class DeleteNodesRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.nodesToDelete = null; /* null array */
            return;
        }
        const schema = DeleteNodesRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.nodesToDelete = []; // should default
        if (options.nodesToDelete) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.nodesToDelete));
            this.nodesToDelete = options.nodesToDelete.map((e) => new DeleteNodesItem(e));
        }
    }
    static get schema() { return schemaDeleteNodesRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.nodesToDelete, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.nodesToDelete = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new DeleteNodesItem(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaDeleteNodesRequest; }
}
exports.DeleteNodesRequest = DeleteNodesRequest;
DeleteNodesRequest.possibleFields = [
    "requestHeader",
    "nodesToDelete"
];
DeleteNodesRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(498, 0);
DeleteNodesRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(500, 0);
DeleteNodesRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(499, 0);
DeleteNodesRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15173, 0);
DeleteNodesRequest.schema.dataTypeNodeId = DeleteNodesRequest.dataTypeNodeId;
DeleteNodesRequest.schema.encodingDefaultBinary = DeleteNodesRequest.encodingDefaultBinary;
DeleteNodesRequest.schema.encodingDefaultXml = DeleteNodesRequest.encodingDefaultXml;
DeleteNodesRequest.schema.encodingDefaultJson = DeleteNodesRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DeleteNodesRequest.dataTypeNodeId, "DeleteNodesRequest", DeleteNodesRequest);
// --------------------------------------------------------------------------------------------
const schemaDeleteNodesResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DeleteNodesResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "results",
            fieldType: "StatusCode",
            isArray: true
        },
        {
            name: "diagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class DeleteNodesResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.results = [];
            this.diagnosticInfos = [];
            return;
        }
        const schema = DeleteNodesResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.results = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.results);
        this.diagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.diagnosticInfos);
    }
    static get schema() { return schemaDeleteNodesResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.results, stream, node_opcua_status_code_1.encodeStatusCode);
        (0, node_opcua_basic_types_1.encodeArray)(this.diagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.results = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_status_code_1.decodeStatusCode);
        this.diagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaDeleteNodesResponse; }
}
exports.DeleteNodesResponse = DeleteNodesResponse;
DeleteNodesResponse.possibleFields = [
    "responseHeader",
    "results",
    "diagnosticInfos"
];
DeleteNodesResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(501, 0);
DeleteNodesResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(503, 0);
DeleteNodesResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(502, 0);
DeleteNodesResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15174, 0);
DeleteNodesResponse.schema.dataTypeNodeId = DeleteNodesResponse.dataTypeNodeId;
DeleteNodesResponse.schema.encodingDefaultBinary = DeleteNodesResponse.encodingDefaultBinary;
DeleteNodesResponse.schema.encodingDefaultXml = DeleteNodesResponse.encodingDefaultXml;
DeleteNodesResponse.schema.encodingDefaultJson = DeleteNodesResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DeleteNodesResponse.dataTypeNodeId, "DeleteNodesResponse", DeleteNodesResponse);
// --------------------------------------------------------------------------------------------
const schemaDeleteRawModifiedDetails = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DeleteRawModifiedDetails",
    baseType: "HistoryUpdateDetails",
    fields: [
        {
            name: "isDeleteModified",
            fieldType: "UABoolean",
        },
        {
            name: "startTime",
            fieldType: "DateTime",
        },
        {
            name: "endTime",
            fieldType: "DateTime",
        },
    ]
});
class DeleteRawModifiedDetails extends HistoryUpdateDetails {
    constructor(options) {
        super(options);
        if (options === null) {
            this.isDeleteModified = false;
            this.startTime = new Date();
            this.endTime = new Date();
            return;
        }
        const schema = DeleteRawModifiedDetails.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.isDeleteModified = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.isDeleteModified);
        this.startTime = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.startTime);
        this.endTime = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.endTime);
    }
    static get schema() { return schemaDeleteRawModifiedDetails; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.isDeleteModified, stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.startTime, stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.endTime, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.isDeleteModified = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.isDeleteModified);
        this.startTime = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.startTime);
        this.endTime = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.endTime);
    }
    get schema() { return schemaDeleteRawModifiedDetails; }
}
exports.DeleteRawModifiedDetails = DeleteRawModifiedDetails;
DeleteRawModifiedDetails.possibleFields = [
    "isDeleteModified",
    "startTime",
    "endTime"
];
DeleteRawModifiedDetails.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(686, 0);
DeleteRawModifiedDetails.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(688, 0);
DeleteRawModifiedDetails.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(687, 0);
DeleteRawModifiedDetails.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15283, 0);
DeleteRawModifiedDetails.schema.dataTypeNodeId = DeleteRawModifiedDetails.dataTypeNodeId;
DeleteRawModifiedDetails.schema.encodingDefaultBinary = DeleteRawModifiedDetails.encodingDefaultBinary;
DeleteRawModifiedDetails.schema.encodingDefaultXml = DeleteRawModifiedDetails.encodingDefaultXml;
DeleteRawModifiedDetails.schema.encodingDefaultJson = DeleteRawModifiedDetails.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DeleteRawModifiedDetails.dataTypeNodeId, "DeleteRawModifiedDetails", DeleteRawModifiedDetails);
// --------------------------------------------------------------------------------------------
const schemaDeleteReferencesItem = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DeleteReferencesItem",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "sourceNodeId",
            fieldType: "NodeId",
        },
        {
            name: "referenceTypeId",
            fieldType: "NodeId",
        },
        {
            name: "isForward",
            fieldType: "UABoolean",
        },
        {
            name: "targetNodeId",
            fieldType: "ExpandedNodeId",
        },
        {
            name: "deleteBidirectional",
            fieldType: "UABoolean",
        },
    ]
});
class DeleteReferencesItem extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.sourceNodeId = new node_opcua_nodeid_1.NodeId(null);
            this.referenceTypeId = new node_opcua_nodeid_1.NodeId(null);
            this.isForward = false;
            this.targetNodeId = new node_opcua_nodeid_1.ExpandedNodeId(null);
            this.deleteBidirectional = false;
            return;
        }
        const schema = DeleteReferencesItem.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.sourceNodeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.sourceNodeId);
        this.referenceTypeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.referenceTypeId);
        this.isForward = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.isForward);
        this.targetNodeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.targetNodeId);
        this.deleteBidirectional = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.deleteBidirectional);
    }
    static get schema() { return schemaDeleteReferencesItem; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.sourceNodeId, stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.referenceTypeId, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.isForward, stream);
        (0, node_opcua_basic_types_1.encodeExpandedNodeId)(this.targetNodeId, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.deleteBidirectional, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.sourceNodeId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.sourceNodeId);
        this.referenceTypeId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.referenceTypeId);
        this.isForward = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.isForward);
        this.targetNodeId = (0, node_opcua_basic_types_1.decodeExpandedNodeId)(stream, this.targetNodeId);
        this.deleteBidirectional = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.deleteBidirectional);
    }
    get schema() { return schemaDeleteReferencesItem; }
}
exports.DeleteReferencesItem = DeleteReferencesItem;
DeleteReferencesItem.possibleFields = [
    "sourceNodeId",
    "referenceTypeId",
    "isForward",
    "targetNodeId",
    "deleteBidirectional"
];
DeleteReferencesItem.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(385, 0);
DeleteReferencesItem.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(387, 0);
DeleteReferencesItem.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(386, 0);
DeleteReferencesItem.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15175, 0);
DeleteReferencesItem.schema.dataTypeNodeId = DeleteReferencesItem.dataTypeNodeId;
DeleteReferencesItem.schema.encodingDefaultBinary = DeleteReferencesItem.encodingDefaultBinary;
DeleteReferencesItem.schema.encodingDefaultXml = DeleteReferencesItem.encodingDefaultXml;
DeleteReferencesItem.schema.encodingDefaultJson = DeleteReferencesItem.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DeleteReferencesItem.dataTypeNodeId, "DeleteReferencesItem", DeleteReferencesItem);
// --------------------------------------------------------------------------------------------
const schemaDeleteReferencesRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DeleteReferencesRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "referencesToDelete",
            fieldType: "DeleteReferencesItem",
            isArray: true
        },
    ]
});
class DeleteReferencesRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.referencesToDelete = null; /* null array */
            return;
        }
        const schema = DeleteReferencesRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.referencesToDelete = []; // should default
        if (options.referencesToDelete) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.referencesToDelete));
            this.referencesToDelete = options.referencesToDelete.map((e) => new DeleteReferencesItem(e));
        }
    }
    static get schema() { return schemaDeleteReferencesRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.referencesToDelete, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.referencesToDelete = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new DeleteReferencesItem(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaDeleteReferencesRequest; }
}
exports.DeleteReferencesRequest = DeleteReferencesRequest;
DeleteReferencesRequest.possibleFields = [
    "requestHeader",
    "referencesToDelete"
];
DeleteReferencesRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(504, 0);
DeleteReferencesRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(506, 0);
DeleteReferencesRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(505, 0);
DeleteReferencesRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15176, 0);
DeleteReferencesRequest.schema.dataTypeNodeId = DeleteReferencesRequest.dataTypeNodeId;
DeleteReferencesRequest.schema.encodingDefaultBinary = DeleteReferencesRequest.encodingDefaultBinary;
DeleteReferencesRequest.schema.encodingDefaultXml = DeleteReferencesRequest.encodingDefaultXml;
DeleteReferencesRequest.schema.encodingDefaultJson = DeleteReferencesRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DeleteReferencesRequest.dataTypeNodeId, "DeleteReferencesRequest", DeleteReferencesRequest);
// --------------------------------------------------------------------------------------------
const schemaDeleteReferencesResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DeleteReferencesResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "results",
            fieldType: "StatusCode",
            isArray: true
        },
        {
            name: "diagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class DeleteReferencesResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.results = [];
            this.diagnosticInfos = [];
            return;
        }
        const schema = DeleteReferencesResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.results = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.results);
        this.diagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.diagnosticInfos);
    }
    static get schema() { return schemaDeleteReferencesResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.results, stream, node_opcua_status_code_1.encodeStatusCode);
        (0, node_opcua_basic_types_1.encodeArray)(this.diagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.results = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_status_code_1.decodeStatusCode);
        this.diagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaDeleteReferencesResponse; }
}
exports.DeleteReferencesResponse = DeleteReferencesResponse;
DeleteReferencesResponse.possibleFields = [
    "responseHeader",
    "results",
    "diagnosticInfos"
];
DeleteReferencesResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(507, 0);
DeleteReferencesResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(509, 0);
DeleteReferencesResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(508, 0);
DeleteReferencesResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15177, 0);
DeleteReferencesResponse.schema.dataTypeNodeId = DeleteReferencesResponse.dataTypeNodeId;
DeleteReferencesResponse.schema.encodingDefaultBinary = DeleteReferencesResponse.encodingDefaultBinary;
DeleteReferencesResponse.schema.encodingDefaultXml = DeleteReferencesResponse.encodingDefaultXml;
DeleteReferencesResponse.schema.encodingDefaultJson = DeleteReferencesResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DeleteReferencesResponse.dataTypeNodeId, "DeleteReferencesResponse", DeleteReferencesResponse);
// --------------------------------------------------------------------------------------------
const schemaDeleteSubscriptionsRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DeleteSubscriptionsRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "subscriptionIds",
            fieldType: "UInt32",
            isArray: true
        },
    ]
});
class DeleteSubscriptionsRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.subscriptionIds = [];
            return;
        }
        const schema = DeleteSubscriptionsRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.subscriptionIds = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.subscriptionIds);
    }
    static get schema() { return schemaDeleteSubscriptionsRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.subscriptionIds, stream, node_opcua_basic_types_1.encodeUInt32);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.subscriptionIds = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUInt32);
    }
    get schema() { return schemaDeleteSubscriptionsRequest; }
}
exports.DeleteSubscriptionsRequest = DeleteSubscriptionsRequest;
DeleteSubscriptionsRequest.possibleFields = [
    "requestHeader",
    "subscriptionIds"
];
DeleteSubscriptionsRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(845, 0);
DeleteSubscriptionsRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(847, 0);
DeleteSubscriptionsRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(846, 0);
DeleteSubscriptionsRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15359, 0);
DeleteSubscriptionsRequest.schema.dataTypeNodeId = DeleteSubscriptionsRequest.dataTypeNodeId;
DeleteSubscriptionsRequest.schema.encodingDefaultBinary = DeleteSubscriptionsRequest.encodingDefaultBinary;
DeleteSubscriptionsRequest.schema.encodingDefaultXml = DeleteSubscriptionsRequest.encodingDefaultXml;
DeleteSubscriptionsRequest.schema.encodingDefaultJson = DeleteSubscriptionsRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DeleteSubscriptionsRequest.dataTypeNodeId, "DeleteSubscriptionsRequest", DeleteSubscriptionsRequest);
// --------------------------------------------------------------------------------------------
const schemaDeleteSubscriptionsResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DeleteSubscriptionsResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "results",
            fieldType: "StatusCode",
            isArray: true
        },
        {
            name: "diagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class DeleteSubscriptionsResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.results = [];
            this.diagnosticInfos = [];
            return;
        }
        const schema = DeleteSubscriptionsResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.results = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.results);
        this.diagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.diagnosticInfos);
    }
    static get schema() { return schemaDeleteSubscriptionsResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.results, stream, node_opcua_status_code_1.encodeStatusCode);
        (0, node_opcua_basic_types_1.encodeArray)(this.diagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.results = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_status_code_1.decodeStatusCode);
        this.diagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaDeleteSubscriptionsResponse; }
}
exports.DeleteSubscriptionsResponse = DeleteSubscriptionsResponse;
DeleteSubscriptionsResponse.possibleFields = [
    "responseHeader",
    "results",
    "diagnosticInfos"
];
DeleteSubscriptionsResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(848, 0);
DeleteSubscriptionsResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(850, 0);
DeleteSubscriptionsResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(849, 0);
DeleteSubscriptionsResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15360, 0);
DeleteSubscriptionsResponse.schema.dataTypeNodeId = DeleteSubscriptionsResponse.dataTypeNodeId;
DeleteSubscriptionsResponse.schema.encodingDefaultBinary = DeleteSubscriptionsResponse.encodingDefaultBinary;
DeleteSubscriptionsResponse.schema.encodingDefaultXml = DeleteSubscriptionsResponse.encodingDefaultXml;
DeleteSubscriptionsResponse.schema.encodingDefaultJson = DeleteSubscriptionsResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DeleteSubscriptionsResponse.dataTypeNodeId, "DeleteSubscriptionsResponse", DeleteSubscriptionsResponse);
// --------------------------------------------------------------------------------------------
const schemaDiscoveryConfiguration = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DiscoveryConfiguration",
    baseType: "ExtensionObject",
    fields: []
});
class DiscoveryConfiguration extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            return;
        }
        const schema = DiscoveryConfiguration.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
    }
    static get schema() { return schemaDiscoveryConfiguration; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
    }
    get schema() { return schemaDiscoveryConfiguration; }
}
exports.DiscoveryConfiguration = DiscoveryConfiguration;
DiscoveryConfiguration.possibleFields = [];
DiscoveryConfiguration.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12890, 0);
DiscoveryConfiguration.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12900, 0);
DiscoveryConfiguration.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12892, 0);
DiscoveryConfiguration.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15105, 0);
DiscoveryConfiguration.schema.dataTypeNodeId = DiscoveryConfiguration.dataTypeNodeId;
DiscoveryConfiguration.schema.encodingDefaultBinary = DiscoveryConfiguration.encodingDefaultBinary;
DiscoveryConfiguration.schema.encodingDefaultXml = DiscoveryConfiguration.encodingDefaultXml;
DiscoveryConfiguration.schema.encodingDefaultJson = DiscoveryConfiguration.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DiscoveryConfiguration.dataTypeNodeId, "DiscoveryConfiguration", DiscoveryConfiguration);
// --------------------------------------------------------------------------------------------
const schemaDoubleComplexNumberType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "DoubleComplexNumberType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "real",
            fieldType: "Double",
        },
        {
            name: "imaginary",
            fieldType: "Double",
        },
    ]
});
class DoubleComplexNumberType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.real = 0;
            this.imaginary = 0;
            return;
        }
        const schema = DoubleComplexNumberType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.real = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.real);
        this.imaginary = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.imaginary);
    }
    static get schema() { return schemaDoubleComplexNumberType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.real, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.imaginary, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.real = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.real);
        this.imaginary = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.imaginary);
    }
    get schema() { return schemaDoubleComplexNumberType; }
}
exports.DoubleComplexNumberType = DoubleComplexNumberType;
DoubleComplexNumberType.possibleFields = [
    "real",
    "imaginary"
];
DoubleComplexNumberType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12172, 0);
DoubleComplexNumberType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12182, 0);
DoubleComplexNumberType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12174, 0);
DoubleComplexNumberType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15378, 0);
DoubleComplexNumberType.schema.dataTypeNodeId = DoubleComplexNumberType.dataTypeNodeId;
DoubleComplexNumberType.schema.encodingDefaultBinary = DoubleComplexNumberType.encodingDefaultBinary;
DoubleComplexNumberType.schema.encodingDefaultXml = DoubleComplexNumberType.encodingDefaultXml;
DoubleComplexNumberType.schema.encodingDefaultJson = DoubleComplexNumberType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(DoubleComplexNumberType.dataTypeNodeId, "DoubleComplexNumberType", DoubleComplexNumberType);
// --------------------------------------------------------------------------------------------
const schemaElementOperand = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ElementOperand",
    baseType: "FilterOperand",
    fields: [
        {
            name: "index",
            fieldType: "UInt32",
        },
    ]
});
class ElementOperand extends FilterOperand {
    constructor(options) {
        super(options);
        if (options === null) {
            this.index = 0;
            return;
        }
        const schema = ElementOperand.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.index = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.index);
    }
    static get schema() { return schemaElementOperand; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.index, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.index = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.index);
    }
    get schema() { return schemaElementOperand; }
}
exports.ElementOperand = ElementOperand;
ElementOperand.possibleFields = [
    "index"
];
ElementOperand.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(592, 0);
ElementOperand.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(594, 0);
ElementOperand.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(593, 0);
ElementOperand.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15207, 0);
ElementOperand.schema.dataTypeNodeId = ElementOperand.dataTypeNodeId;
ElementOperand.schema.encodingDefaultBinary = ElementOperand.encodingDefaultBinary;
ElementOperand.schema.encodingDefaultXml = ElementOperand.encodingDefaultXml;
ElementOperand.schema.encodingDefaultJson = ElementOperand.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ElementOperand.dataTypeNodeId, "ElementOperand", ElementOperand);
// --------------------------------------------------------------------------------------------
const schemaEndpointConfiguration = (0, node_opcua_factory_1.buildStructuredType)({
    name: "EndpointConfiguration",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "operationTimeout",
            fieldType: "Int32",
        },
        {
            name: "useBinaryEncoding",
            fieldType: "UABoolean",
        },
        {
            name: "maxStringLength",
            fieldType: "Int32",
        },
        {
            name: "maxByteStringLength",
            fieldType: "Int32",
        },
        {
            name: "maxArrayLength",
            fieldType: "Int32",
        },
        {
            name: "maxMessageSize",
            fieldType: "Int32",
        },
        {
            name: "maxBufferSize",
            fieldType: "Int32",
        },
        {
            name: "channelLifetime",
            fieldType: "Int32",
        },
        {
            name: "securityTokenLifetime",
            fieldType: "Int32",
        },
    ]
});
class EndpointConfiguration extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.operationTimeout = 0;
            this.useBinaryEncoding = false;
            this.maxStringLength = 0;
            this.maxByteStringLength = 0;
            this.maxArrayLength = 0;
            this.maxMessageSize = 0;
            this.maxBufferSize = 0;
            this.channelLifetime = 0;
            this.securityTokenLifetime = 0;
            return;
        }
        const schema = EndpointConfiguration.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.operationTimeout = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.operationTimeout);
        this.useBinaryEncoding = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.useBinaryEncoding);
        this.maxStringLength = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.maxStringLength);
        this.maxByteStringLength = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.maxByteStringLength);
        this.maxArrayLength = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.maxArrayLength);
        this.maxMessageSize = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.maxMessageSize);
        this.maxBufferSize = (0, node_opcua_factory_1.initialize_field)(schema.fields[6], options === null || options === void 0 ? void 0 : options.maxBufferSize);
        this.channelLifetime = (0, node_opcua_factory_1.initialize_field)(schema.fields[7], options === null || options === void 0 ? void 0 : options.channelLifetime);
        this.securityTokenLifetime = (0, node_opcua_factory_1.initialize_field)(schema.fields[8], options === null || options === void 0 ? void 0 : options.securityTokenLifetime);
    }
    static get schema() { return schemaEndpointConfiguration; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeInt32)(this.operationTimeout, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.useBinaryEncoding, stream);
        (0, node_opcua_basic_types_1.encodeInt32)(this.maxStringLength, stream);
        (0, node_opcua_basic_types_1.encodeInt32)(this.maxByteStringLength, stream);
        (0, node_opcua_basic_types_1.encodeInt32)(this.maxArrayLength, stream);
        (0, node_opcua_basic_types_1.encodeInt32)(this.maxMessageSize, stream);
        (0, node_opcua_basic_types_1.encodeInt32)(this.maxBufferSize, stream);
        (0, node_opcua_basic_types_1.encodeInt32)(this.channelLifetime, stream);
        (0, node_opcua_basic_types_1.encodeInt32)(this.securityTokenLifetime, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.operationTimeout = (0, node_opcua_basic_types_1.decodeInt32)(stream, this.operationTimeout);
        this.useBinaryEncoding = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.useBinaryEncoding);
        this.maxStringLength = (0, node_opcua_basic_types_1.decodeInt32)(stream, this.maxStringLength);
        this.maxByteStringLength = (0, node_opcua_basic_types_1.decodeInt32)(stream, this.maxByteStringLength);
        this.maxArrayLength = (0, node_opcua_basic_types_1.decodeInt32)(stream, this.maxArrayLength);
        this.maxMessageSize = (0, node_opcua_basic_types_1.decodeInt32)(stream, this.maxMessageSize);
        this.maxBufferSize = (0, node_opcua_basic_types_1.decodeInt32)(stream, this.maxBufferSize);
        this.channelLifetime = (0, node_opcua_basic_types_1.decodeInt32)(stream, this.channelLifetime);
        this.securityTokenLifetime = (0, node_opcua_basic_types_1.decodeInt32)(stream, this.securityTokenLifetime);
    }
    get schema() { return schemaEndpointConfiguration; }
}
exports.EndpointConfiguration = EndpointConfiguration;
EndpointConfiguration.possibleFields = [
    "operationTimeout",
    "useBinaryEncoding",
    "maxStringLength",
    "maxByteStringLength",
    "maxArrayLength",
    "maxMessageSize",
    "maxBufferSize",
    "channelLifetime",
    "securityTokenLifetime"
];
EndpointConfiguration.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(331, 0);
EndpointConfiguration.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(333, 0);
EndpointConfiguration.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(332, 0);
EndpointConfiguration.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15199, 0);
EndpointConfiguration.schema.dataTypeNodeId = EndpointConfiguration.dataTypeNodeId;
EndpointConfiguration.schema.encodingDefaultBinary = EndpointConfiguration.encodingDefaultBinary;
EndpointConfiguration.schema.encodingDefaultXml = EndpointConfiguration.encodingDefaultXml;
EndpointConfiguration.schema.encodingDefaultJson = EndpointConfiguration.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(EndpointConfiguration.dataTypeNodeId, "EndpointConfiguration", EndpointConfiguration);
// --------------------------------------------------------------------------------------------
const schemaEndpointType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "EndpointType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "endpointUrl",
            fieldType: "UAString",
        },
        {
            name: "securityMode",
            fieldType: "MessageSecurityMode",
        },
        {
            name: "securityPolicyUri",
            fieldType: "UAString",
        },
        {
            name: "transportProfileUri",
            fieldType: "UAString",
        },
    ]
});
class EndpointType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.endpointUrl = null;
            this.securityMode = 0;
            this.securityPolicyUri = null;
            this.transportProfileUri = null;
            return;
        }
        const schema = EndpointType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.endpointUrl = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.endpointUrl);
        this.securityMode = this.setSecurityMode((0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.securityMode));
        this.securityPolicyUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.securityPolicyUri);
        this.transportProfileUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.transportProfileUri);
    }
    static get schema() { return schemaEndpointType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.endpointUrl, stream);
        encodeMessageSecurityMode(this.securityMode, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.securityPolicyUri, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.transportProfileUri, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.endpointUrl = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.endpointUrl);
        this.securityMode = decodeMessageSecurityMode(stream, this.securityMode);
        this.securityPolicyUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.securityPolicyUri);
        this.transportProfileUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.transportProfileUri);
    }
    // Define Enumeration setters
    setSecurityMode(value) {
        const coercedValue = exports._enumerationMessageSecurityMode.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to MessageSecurityMode :" + value);
        }
        this.securityMode = coercedValue.value;
        return this.securityMode;
    }
    get schema() { return schemaEndpointType; }
}
exports.EndpointType = EndpointType;
EndpointType.possibleFields = [
    "endpointUrl",
    "securityMode",
    "securityPolicyUri",
    "transportProfileUri"
];
EndpointType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15528, 0);
EndpointType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15671, 0);
EndpointType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15949, 0);
EndpointType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16150, 0);
EndpointType.schema.dataTypeNodeId = EndpointType.dataTypeNodeId;
EndpointType.schema.encodingDefaultBinary = EndpointType.encodingDefaultBinary;
EndpointType.schema.encodingDefaultXml = EndpointType.encodingDefaultXml;
EndpointType.schema.encodingDefaultJson = EndpointType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(EndpointType.dataTypeNodeId, "EndpointType", EndpointType);
// --------------------------------------------------------------------------------------------
const schemaEndpointUrlListDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "EndpointUrlListDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "endpointUrlList",
            fieldType: "UAString",
            isArray: true
        },
    ]
});
class EndpointUrlListDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.endpointUrlList = [];
            return;
        }
        const schema = EndpointUrlListDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.endpointUrlList = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[0], options === null || options === void 0 ? void 0 : options.endpointUrlList);
    }
    static get schema() { return schemaEndpointUrlListDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.endpointUrlList, stream, node_opcua_basic_types_1.encodeUAString);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.endpointUrlList = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUAString);
    }
    get schema() { return schemaEndpointUrlListDataType; }
}
exports.EndpointUrlListDataType = EndpointUrlListDataType;
EndpointUrlListDataType.possibleFields = [
    "endpointUrlList"
];
EndpointUrlListDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(11943, 0);
EndpointUrlListDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(11957, 0);
EndpointUrlListDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(11949, 0);
EndpointUrlListDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15363, 0);
EndpointUrlListDataType.schema.dataTypeNodeId = EndpointUrlListDataType.dataTypeNodeId;
EndpointUrlListDataType.schema.encodingDefaultBinary = EndpointUrlListDataType.encodingDefaultBinary;
EndpointUrlListDataType.schema.encodingDefaultXml = EndpointUrlListDataType.encodingDefaultXml;
EndpointUrlListDataType.schema.encodingDefaultJson = EndpointUrlListDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(EndpointUrlListDataType.dataTypeNodeId, "EndpointUrlListDataType", EndpointUrlListDataType);
// --------------------------------------------------------------------------------------------
const schemaEphemeralKeyType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "EphemeralKeyType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "publicKey",
            fieldType: "ByteString",
        },
        {
            name: "signature",
            fieldType: "ByteString",
        },
    ]
});
class EphemeralKeyType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.publicKey = Buffer.alloc(0);
            this.signature = Buffer.alloc(0);
            return;
        }
        const schema = EphemeralKeyType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.publicKey = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.publicKey);
        this.signature = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.signature);
    }
    static get schema() { return schemaEphemeralKeyType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeByteString)(this.publicKey, stream);
        (0, node_opcua_basic_types_1.encodeByteString)(this.signature, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.publicKey = (0, node_opcua_basic_types_1.decodeByteString)(stream, this.publicKey);
        this.signature = (0, node_opcua_basic_types_1.decodeByteString)(stream, this.signature);
    }
    get schema() { return schemaEphemeralKeyType; }
}
exports.EphemeralKeyType = EphemeralKeyType;
EphemeralKeyType.possibleFields = [
    "publicKey",
    "signature"
];
EphemeralKeyType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(17548, 0);
EphemeralKeyType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(17549, 0);
EphemeralKeyType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(17553, 0);
EphemeralKeyType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(17557, 0);
EphemeralKeyType.schema.dataTypeNodeId = EphemeralKeyType.dataTypeNodeId;
EphemeralKeyType.schema.encodingDefaultBinary = EphemeralKeyType.encodingDefaultBinary;
EphemeralKeyType.schema.encodingDefaultXml = EphemeralKeyType.encodingDefaultXml;
EphemeralKeyType.schema.encodingDefaultJson = EphemeralKeyType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(EphemeralKeyType.dataTypeNodeId, "EphemeralKeyType", EphemeralKeyType);
// --------------------------------------------------------------------------------------------
const schemaEventFieldList = (0, node_opcua_factory_1.buildStructuredType)({
    name: "EventFieldList",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "clientHandle",
            fieldType: "UInt32",
        },
        {
            name: "eventFields",
            fieldType: "Variant",
            isArray: true
        },
    ]
});
class EventFieldList extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.clientHandle = 0;
            this.eventFields = [];
            return;
        }
        const schema = EventFieldList.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.clientHandle = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.clientHandle);
        this.eventFields = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.eventFields);
    }
    static get schema() { return schemaEventFieldList; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.clientHandle, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.eventFields, stream, node_opcua_variant_1.encodeVariant);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.clientHandle = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.clientHandle);
        this.eventFields = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_variant_1.decodeVariant);
    }
    get schema() { return schemaEventFieldList; }
}
exports.EventFieldList = EventFieldList;
EventFieldList.possibleFields = [
    "clientHandle",
    "eventFields"
];
EventFieldList.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(917, 0);
EventFieldList.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(919, 0);
EventFieldList.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(918, 0);
EventFieldList.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15348, 0);
EventFieldList.schema.dataTypeNodeId = EventFieldList.dataTypeNodeId;
EventFieldList.schema.encodingDefaultBinary = EventFieldList.encodingDefaultBinary;
EventFieldList.schema.encodingDefaultXml = EventFieldList.encodingDefaultXml;
EventFieldList.schema.encodingDefaultJson = EventFieldList.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(EventFieldList.dataTypeNodeId, "EventFieldList", EventFieldList);
// --------------------------------------------------------------------------------------------
const schemaEventFilter = (0, node_opcua_factory_1.buildStructuredType)({
    name: "EventFilter",
    baseType: "MonitoringFilter",
    fields: [
        {
            name: "selectClauses",
            fieldType: "SimpleAttributeOperand",
            isArray: true
        },
        {
            name: "whereClause",
            fieldType: "ContentFilter",
        },
    ]
});
class EventFilter extends MonitoringFilter {
    constructor(options) {
        super(options);
        if (options === null) {
            this.selectClauses = null; /* null array */
            this.whereClause = new ContentFilter(null);
            return;
        }
        const schema = EventFilter.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.selectClauses = []; // should default
        if (options.selectClauses) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.selectClauses));
            this.selectClauses = options.selectClauses.map((e) => new SimpleAttributeOperand(e));
        }
        this.whereClause = new ContentFilter(options.whereClause);
    }
    static get schema() { return schemaEventFilter; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.selectClauses, stream, (obj, stream1) => { obj.encode(stream1); });
        this.whereClause.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.selectClauses = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new SimpleAttributeOperand(null);
            obj.decode(stream1);
            return obj;
        });
        this.whereClause.decode(stream);
    }
    get schema() { return schemaEventFilter; }
}
exports.EventFilter = EventFilter;
EventFilter.possibleFields = [
    "selectClauses",
    "whereClause"
];
EventFilter.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(725, 0);
EventFilter.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(727, 0);
EventFilter.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(726, 0);
EventFilter.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15295, 0);
EventFilter.schema.dataTypeNodeId = EventFilter.dataTypeNodeId;
EventFilter.schema.encodingDefaultBinary = EventFilter.encodingDefaultBinary;
EventFilter.schema.encodingDefaultXml = EventFilter.encodingDefaultXml;
EventFilter.schema.encodingDefaultJson = EventFilter.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(EventFilter.dataTypeNodeId, "EventFilter", EventFilter);
// --------------------------------------------------------------------------------------------
const schemaEventFilterResult = (0, node_opcua_factory_1.buildStructuredType)({
    name: "EventFilterResult",
    baseType: "MonitoringFilterResult",
    fields: [
        {
            name: "selectClauseResults",
            fieldType: "StatusCode",
            isArray: true
        },
        {
            name: "selectClauseDiagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
        {
            name: "whereClauseResult",
            fieldType: "ContentFilterResult",
        },
    ]
});
class EventFilterResult extends MonitoringFilterResult {
    constructor(options) {
        super(options);
        if (options === null) {
            this.selectClauseResults = [];
            this.selectClauseDiagnosticInfos = [];
            this.whereClauseResult = new ContentFilterResult(null);
            return;
        }
        const schema = EventFilterResult.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.selectClauseResults = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[0], options === null || options === void 0 ? void 0 : options.selectClauseResults);
        this.selectClauseDiagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.selectClauseDiagnosticInfos);
        this.whereClauseResult = new ContentFilterResult(options.whereClauseResult);
    }
    static get schema() { return schemaEventFilterResult; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.selectClauseResults, stream, node_opcua_status_code_1.encodeStatusCode);
        (0, node_opcua_basic_types_1.encodeArray)(this.selectClauseDiagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
        this.whereClauseResult.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.selectClauseResults = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_status_code_1.decodeStatusCode);
        this.selectClauseDiagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
        this.whereClauseResult.decode(stream);
    }
    get schema() { return schemaEventFilterResult; }
}
exports.EventFilterResult = EventFilterResult;
EventFilterResult.possibleFields = [
    "selectClauseResults",
    "selectClauseDiagnosticInfos",
    "whereClauseResult"
];
EventFilterResult.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(734, 0);
EventFilterResult.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(736, 0);
EventFilterResult.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(735, 0);
EventFilterResult.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15314, 0);
EventFilterResult.schema.dataTypeNodeId = EventFilterResult.dataTypeNodeId;
EventFilterResult.schema.encodingDefaultBinary = EventFilterResult.encodingDefaultBinary;
EventFilterResult.schema.encodingDefaultXml = EventFilterResult.encodingDefaultXml;
EventFilterResult.schema.encodingDefaultJson = EventFilterResult.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(EventFilterResult.dataTypeNodeId, "EventFilterResult", EventFilterResult);
// --------------------------------------------------------------------------------------------
const schemaEventNotificationList = (0, node_opcua_factory_1.buildStructuredType)({
    name: "EventNotificationList",
    baseType: "NotificationData",
    fields: [
        {
            name: "events",
            fieldType: "EventFieldList",
            isArray: true
        },
    ]
});
class EventNotificationList extends NotificationData {
    constructor(options) {
        super(options);
        if (options === null) {
            this.events = null; /* null array */
            return;
        }
        const schema = EventNotificationList.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.events = []; // should default
        if (options.events) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.events));
            this.events = options.events.map((e) => new EventFieldList(e));
        }
    }
    static get schema() { return schemaEventNotificationList; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.events, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.events = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new EventFieldList(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaEventNotificationList; }
}
exports.EventNotificationList = EventNotificationList;
EventNotificationList.possibleFields = [
    "events"
];
EventNotificationList.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(914, 0);
EventNotificationList.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(916, 0);
EventNotificationList.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(915, 0);
EventNotificationList.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15347, 0);
EventNotificationList.schema.dataTypeNodeId = EventNotificationList.dataTypeNodeId;
EventNotificationList.schema.encodingDefaultBinary = EventNotificationList.encodingDefaultBinary;
EventNotificationList.schema.encodingDefaultXml = EventNotificationList.encodingDefaultXml;
EventNotificationList.schema.encodingDefaultJson = EventNotificationList.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(EventNotificationList.dataTypeNodeId, "EventNotificationList", EventNotificationList);
// --------------------------------------------------------------------------------------------
var OverrideValueHandling;
(function (OverrideValueHandling) {
    OverrideValueHandling[OverrideValueHandling["Disabled"] = 0] = "Disabled";
    OverrideValueHandling[OverrideValueHandling["LastUsableValue"] = 1] = "LastUsableValue";
    OverrideValueHandling[OverrideValueHandling["OverrideValue"] = 2] = "OverrideValue";
    OverrideValueHandling[OverrideValueHandling["Invalid"] = 4294967295] = "Invalid";
})(OverrideValueHandling = exports.OverrideValueHandling || (exports.OverrideValueHandling = {}));
const schemaOverrideValueHandling = {
    enumValues: OverrideValueHandling,
    flaggable: false,
    minValue: 0,
    maxValue: 2,
    name: "OverrideValueHandling"
};
function decodeOverrideValueHandling(stream, _value) {
    let value = stream.readUInt32();
    value = (value < schemaOverrideValueHandling.minValue || value > schemaOverrideValueHandling.maxValue) ? OverrideValueHandling.Invalid : value;
    return value;
}
function encodeOverrideValueHandling(value, stream) {
    stream.writeUInt32(value);
}
exports._enumerationOverrideValueHandling = (0, node_opcua_factory_1.registerEnumeration)(schemaOverrideValueHandling);
(0, node_opcua_assert_1.assert)(exports._enumerationOverrideValueHandling.isFlaggable === false);
// --------------------------------------------------------------------------------------------
const schemaFieldTargetDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "FieldTargetDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "dataSetFieldId",
            fieldType: "Guid",
        },
        {
            name: "receiverIndexRange",
            fieldType: "UAString",
        },
        {
            name: "targetNodeId",
            fieldType: "NodeId",
        },
        {
            name: "attributeId",
            fieldType: "UInt32",
        },
        {
            name: "writeIndexRange",
            fieldType: "UAString",
        },
        {
            name: "overrideValueHandling",
            fieldType: "OverrideValueHandling",
        },
        {
            name: "overrideValue",
            fieldType: "Variant",
        },
    ]
});
class FieldTargetDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.dataSetFieldId = "";
            this.receiverIndexRange = null;
            this.targetNodeId = new node_opcua_nodeid_1.NodeId(null);
            this.attributeId = 0;
            this.writeIndexRange = null;
            this.overrideValueHandling = 0;
            this.overrideValue = new node_opcua_variant_1.Variant(null);
            return;
        }
        const schema = FieldTargetDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.dataSetFieldId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.dataSetFieldId);
        this.receiverIndexRange = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.receiverIndexRange);
        this.targetNodeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.targetNodeId);
        this.attributeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.attributeId);
        this.writeIndexRange = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.writeIndexRange);
        this.overrideValueHandling = this.setOverrideValueHandling((0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.overrideValueHandling));
        this.overrideValue = (0, node_opcua_factory_1.initialize_field)(schema.fields[6], options === null || options === void 0 ? void 0 : options.overrideValue);
    }
    static get schema() { return schemaFieldTargetDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeGuid)(this.dataSetFieldId, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.receiverIndexRange, stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.targetNodeId, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.attributeId, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.writeIndexRange, stream);
        encodeOverrideValueHandling(this.overrideValueHandling, stream);
        (0, node_opcua_variant_1.encodeVariant)(this.overrideValue, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.dataSetFieldId = (0, node_opcua_basic_types_1.decodeGuid)(stream, this.dataSetFieldId);
        this.receiverIndexRange = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.receiverIndexRange);
        this.targetNodeId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.targetNodeId);
        this.attributeId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.attributeId);
        this.writeIndexRange = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.writeIndexRange);
        this.overrideValueHandling = decodeOverrideValueHandling(stream, this.overrideValueHandling);
        this.overrideValue = (0, node_opcua_variant_1.decodeVariant)(stream, this.overrideValue);
    }
    // Define Enumeration setters
    setOverrideValueHandling(value) {
        const coercedValue = exports._enumerationOverrideValueHandling.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to OverrideValueHandling :" + value);
        }
        this.overrideValueHandling = coercedValue.value;
        return this.overrideValueHandling;
    }
    get schema() { return schemaFieldTargetDataType; }
}
exports.FieldTargetDataType = FieldTargetDataType;
FieldTargetDataType.possibleFields = [
    "dataSetFieldId",
    "receiverIndexRange",
    "targetNodeId",
    "attributeId",
    "writeIndexRange",
    "overrideValueHandling",
    "overrideValue"
];
FieldTargetDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(14744, 0);
FieldTargetDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(14848, 0);
FieldTargetDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(14804, 0);
FieldTargetDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15061, 0);
FieldTargetDataType.schema.dataTypeNodeId = FieldTargetDataType.dataTypeNodeId;
FieldTargetDataType.schema.encodingDefaultBinary = FieldTargetDataType.encodingDefaultBinary;
FieldTargetDataType.schema.encodingDefaultXml = FieldTargetDataType.encodingDefaultXml;
FieldTargetDataType.schema.encodingDefaultJson = FieldTargetDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(FieldTargetDataType.dataTypeNodeId, "FieldTargetDataType", FieldTargetDataType);
// --------------------------------------------------------------------------------------------
const schemaFindServersOnNetworkRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "FindServersOnNetworkRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "startingRecordId",
            fieldType: "UInt32",
        },
        {
            name: "maxRecordsToReturn",
            fieldType: "UInt32",
        },
        {
            name: "serverCapabilityFilter",
            fieldType: "UAString",
            isArray: true
        },
    ]
});
class FindServersOnNetworkRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.startingRecordId = 0;
            this.maxRecordsToReturn = 0;
            this.serverCapabilityFilter = [];
            return;
        }
        const schema = FindServersOnNetworkRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.startingRecordId = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.startingRecordId);
        this.maxRecordsToReturn = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.maxRecordsToReturn);
        this.serverCapabilityFilter = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[3], options === null || options === void 0 ? void 0 : options.serverCapabilityFilter);
    }
    static get schema() { return schemaFindServersOnNetworkRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.startingRecordId, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.maxRecordsToReturn, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.serverCapabilityFilter, stream, node_opcua_basic_types_1.encodeUAString);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.startingRecordId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.startingRecordId);
        this.maxRecordsToReturn = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.maxRecordsToReturn);
        this.serverCapabilityFilter = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUAString);
    }
    get schema() { return schemaFindServersOnNetworkRequest; }
}
exports.FindServersOnNetworkRequest = FindServersOnNetworkRequest;
FindServersOnNetworkRequest.possibleFields = [
    "requestHeader",
    "startingRecordId",
    "maxRecordsToReturn",
    "serverCapabilityFilter"
];
FindServersOnNetworkRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12190, 0);
FindServersOnNetworkRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12208, 0);
FindServersOnNetworkRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12196, 0);
FindServersOnNetworkRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15096, 0);
FindServersOnNetworkRequest.schema.dataTypeNodeId = FindServersOnNetworkRequest.dataTypeNodeId;
FindServersOnNetworkRequest.schema.encodingDefaultBinary = FindServersOnNetworkRequest.encodingDefaultBinary;
FindServersOnNetworkRequest.schema.encodingDefaultXml = FindServersOnNetworkRequest.encodingDefaultXml;
FindServersOnNetworkRequest.schema.encodingDefaultJson = FindServersOnNetworkRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(FindServersOnNetworkRequest.dataTypeNodeId, "FindServersOnNetworkRequest", FindServersOnNetworkRequest);
// --------------------------------------------------------------------------------------------
const schemaServerOnNetwork = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ServerOnNetwork",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "recordId",
            fieldType: "UInt32",
        },
        {
            name: "serverName",
            fieldType: "UAString",
        },
        {
            name: "discoveryUrl",
            fieldType: "UAString",
        },
        {
            name: "serverCapabilities",
            fieldType: "UAString",
            isArray: true
        },
    ]
});
class ServerOnNetwork extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.recordId = 0;
            this.serverName = null;
            this.discoveryUrl = null;
            this.serverCapabilities = [];
            return;
        }
        const schema = ServerOnNetwork.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.recordId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.recordId);
        this.serverName = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.serverName);
        this.discoveryUrl = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.discoveryUrl);
        this.serverCapabilities = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[3], options === null || options === void 0 ? void 0 : options.serverCapabilities);
    }
    static get schema() { return schemaServerOnNetwork; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.recordId, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.serverName, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.discoveryUrl, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.serverCapabilities, stream, node_opcua_basic_types_1.encodeUAString);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.recordId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.recordId);
        this.serverName = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.serverName);
        this.discoveryUrl = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.discoveryUrl);
        this.serverCapabilities = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUAString);
    }
    get schema() { return schemaServerOnNetwork; }
}
exports.ServerOnNetwork = ServerOnNetwork;
ServerOnNetwork.possibleFields = [
    "recordId",
    "serverName",
    "discoveryUrl",
    "serverCapabilities"
];
ServerOnNetwork.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12189, 0);
ServerOnNetwork.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12207, 0);
ServerOnNetwork.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12195, 0);
ServerOnNetwork.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15095, 0);
ServerOnNetwork.schema.dataTypeNodeId = ServerOnNetwork.dataTypeNodeId;
ServerOnNetwork.schema.encodingDefaultBinary = ServerOnNetwork.encodingDefaultBinary;
ServerOnNetwork.schema.encodingDefaultXml = ServerOnNetwork.encodingDefaultXml;
ServerOnNetwork.schema.encodingDefaultJson = ServerOnNetwork.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ServerOnNetwork.dataTypeNodeId, "ServerOnNetwork", ServerOnNetwork);
// --------------------------------------------------------------------------------------------
const schemaFindServersOnNetworkResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "FindServersOnNetworkResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "lastCounterResetTime",
            fieldType: "DateTime",
        },
        {
            name: "servers",
            fieldType: "ServerOnNetwork",
            isArray: true
        },
    ]
});
class FindServersOnNetworkResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.lastCounterResetTime = new Date();
            this.servers = null; /* null array */
            return;
        }
        const schema = FindServersOnNetworkResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.lastCounterResetTime = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.lastCounterResetTime);
        this.servers = []; // should default
        if (options.servers) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.servers));
            this.servers = options.servers.map((e) => new ServerOnNetwork(e));
        }
    }
    static get schema() { return schemaFindServersOnNetworkResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.lastCounterResetTime, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.servers, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.lastCounterResetTime = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.lastCounterResetTime);
        this.servers = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new ServerOnNetwork(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaFindServersOnNetworkResponse; }
}
exports.FindServersOnNetworkResponse = FindServersOnNetworkResponse;
FindServersOnNetworkResponse.possibleFields = [
    "responseHeader",
    "lastCounterResetTime",
    "servers"
];
FindServersOnNetworkResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12191, 0);
FindServersOnNetworkResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12209, 0);
FindServersOnNetworkResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12197, 0);
FindServersOnNetworkResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15097, 0);
FindServersOnNetworkResponse.schema.dataTypeNodeId = FindServersOnNetworkResponse.dataTypeNodeId;
FindServersOnNetworkResponse.schema.encodingDefaultBinary = FindServersOnNetworkResponse.encodingDefaultBinary;
FindServersOnNetworkResponse.schema.encodingDefaultXml = FindServersOnNetworkResponse.encodingDefaultXml;
FindServersOnNetworkResponse.schema.encodingDefaultJson = FindServersOnNetworkResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(FindServersOnNetworkResponse.dataTypeNodeId, "FindServersOnNetworkResponse", FindServersOnNetworkResponse);
// --------------------------------------------------------------------------------------------
const schemaFindServersRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "FindServersRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "endpointUrl",
            fieldType: "UAString",
        },
        {
            name: "localeIds",
            fieldType: "UAString",
            isArray: true
        },
        {
            name: "serverUris",
            fieldType: "UAString",
            isArray: true
        },
    ]
});
class FindServersRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.endpointUrl = null;
            this.localeIds = [];
            this.serverUris = [];
            return;
        }
        const schema = FindServersRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.endpointUrl = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.endpointUrl);
        this.localeIds = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.localeIds);
        this.serverUris = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[3], options === null || options === void 0 ? void 0 : options.serverUris);
    }
    static get schema() { return schemaFindServersRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.endpointUrl, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.localeIds, stream, node_opcua_basic_types_1.encodeUAString);
        (0, node_opcua_basic_types_1.encodeArray)(this.serverUris, stream, node_opcua_basic_types_1.encodeUAString);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.endpointUrl = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.endpointUrl);
        this.localeIds = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUAString);
        this.serverUris = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUAString);
    }
    get schema() { return schemaFindServersRequest; }
}
exports.FindServersRequest = FindServersRequest;
FindServersRequest.possibleFields = [
    "requestHeader",
    "endpointUrl",
    "localeIds",
    "serverUris"
];
FindServersRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(420, 0);
FindServersRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(422, 0);
FindServersRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(421, 0);
FindServersRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15093, 0);
FindServersRequest.schema.dataTypeNodeId = FindServersRequest.dataTypeNodeId;
FindServersRequest.schema.encodingDefaultBinary = FindServersRequest.encodingDefaultBinary;
FindServersRequest.schema.encodingDefaultXml = FindServersRequest.encodingDefaultXml;
FindServersRequest.schema.encodingDefaultJson = FindServersRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(FindServersRequest.dataTypeNodeId, "FindServersRequest", FindServersRequest);
// --------------------------------------------------------------------------------------------
const schemaFindServersResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "FindServersResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "servers",
            fieldType: "ApplicationDescription",
            isArray: true
        },
    ]
});
class FindServersResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.servers = null; /* null array */
            return;
        }
        const schema = FindServersResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.servers = []; // should default
        if (options.servers) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.servers));
            this.servers = options.servers.map((e) => new ApplicationDescription(e));
        }
    }
    static get schema() { return schemaFindServersResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.servers, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.servers = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new ApplicationDescription(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaFindServersResponse; }
}
exports.FindServersResponse = FindServersResponse;
FindServersResponse.possibleFields = [
    "responseHeader",
    "servers"
];
FindServersResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(423, 0);
FindServersResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(425, 0);
FindServersResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(424, 0);
FindServersResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15094, 0);
FindServersResponse.schema.dataTypeNodeId = FindServersResponse.dataTypeNodeId;
FindServersResponse.schema.encodingDefaultBinary = FindServersResponse.encodingDefaultBinary;
FindServersResponse.schema.encodingDefaultXml = FindServersResponse.encodingDefaultXml;
FindServersResponse.schema.encodingDefaultJson = FindServersResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(FindServersResponse.dataTypeNodeId, "FindServersResponse", FindServersResponse);
// --------------------------------------------------------------------------------------------
const schemaFrame = (0, node_opcua_factory_1.buildStructuredType)({
    name: "Frame",
    baseType: "ExtensionObject",
    fields: []
});
class Frame extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            return;
        }
        const schema = Frame.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
    }
    static get schema() { return schemaFrame; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
    }
    get schema() { return schemaFrame; }
}
exports.Frame = Frame;
Frame.possibleFields = [];
Frame.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18813, 0);
Frame.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18822, 0);
Frame.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18858, 0);
Frame.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(19071, 0);
Frame.schema.dataTypeNodeId = Frame.dataTypeNodeId;
Frame.schema.encodingDefaultBinary = Frame.encodingDefaultBinary;
Frame.schema.encodingDefaultXml = Frame.encodingDefaultXml;
Frame.schema.encodingDefaultJson = Frame.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(Frame.dataTypeNodeId, "Frame", Frame);
// --------------------------------------------------------------------------------------------
const schemaGenericAttributeValue = (0, node_opcua_factory_1.buildStructuredType)({
    name: "GenericAttributeValue",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "attributeId",
            fieldType: "UInt32",
        },
        {
            name: "value",
            fieldType: "Variant",
        },
    ]
});
class GenericAttributeValue extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.attributeId = 0;
            this.value = new node_opcua_variant_1.Variant(null);
            return;
        }
        const schema = GenericAttributeValue.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.attributeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.attributeId);
        this.value = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.value);
    }
    static get schema() { return schemaGenericAttributeValue; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.attributeId, stream);
        (0, node_opcua_variant_1.encodeVariant)(this.value, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.attributeId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.attributeId);
        this.value = (0, node_opcua_variant_1.decodeVariant)(stream, this.value);
    }
    get schema() { return schemaGenericAttributeValue; }
}
exports.GenericAttributeValue = GenericAttributeValue;
GenericAttributeValue.possibleFields = [
    "attributeId",
    "value"
];
GenericAttributeValue.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(17606, 0);
GenericAttributeValue.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(17610, 0);
GenericAttributeValue.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(17608, 0);
GenericAttributeValue.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15163, 0);
GenericAttributeValue.schema.dataTypeNodeId = GenericAttributeValue.dataTypeNodeId;
GenericAttributeValue.schema.encodingDefaultBinary = GenericAttributeValue.encodingDefaultBinary;
GenericAttributeValue.schema.encodingDefaultXml = GenericAttributeValue.encodingDefaultXml;
GenericAttributeValue.schema.encodingDefaultJson = GenericAttributeValue.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(GenericAttributeValue.dataTypeNodeId, "GenericAttributeValue", GenericAttributeValue);
// --------------------------------------------------------------------------------------------
const schemaGenericAttributes = (0, node_opcua_factory_1.buildStructuredType)({
    name: "GenericAttributes",
    baseType: "NodeAttributes",
    fields: [
        {
            name: "attributeValues",
            fieldType: "GenericAttributeValue",
            isArray: true
        },
    ]
});
class GenericAttributes extends NodeAttributes {
    constructor(options) {
        super(options);
        if (options === null) {
            this.attributeValues = null; /* null array */
            return;
        }
        const schema = GenericAttributes.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.attributeValues = []; // should default
        if (options.attributeValues) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.attributeValues));
            this.attributeValues = options.attributeValues.map((e) => new GenericAttributeValue(e));
        }
    }
    static get schema() { return schemaGenericAttributes; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.attributeValues, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.attributeValues = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new GenericAttributeValue(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaGenericAttributes; }
}
exports.GenericAttributes = GenericAttributes;
GenericAttributes.possibleFields = [
    "attributeValues"
];
GenericAttributes.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(17607, 0);
GenericAttributes.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(17611, 0);
GenericAttributes.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(17609, 0);
GenericAttributes.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15164, 0);
GenericAttributes.schema.dataTypeNodeId = GenericAttributes.dataTypeNodeId;
GenericAttributes.schema.encodingDefaultBinary = GenericAttributes.encodingDefaultBinary;
GenericAttributes.schema.encodingDefaultXml = GenericAttributes.encodingDefaultXml;
GenericAttributes.schema.encodingDefaultJson = GenericAttributes.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(GenericAttributes.dataTypeNodeId, "GenericAttributes", GenericAttributes);
// --------------------------------------------------------------------------------------------
const schemaGetEndpointsRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "GetEndpointsRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "endpointUrl",
            fieldType: "UAString",
        },
        {
            name: "localeIds",
            fieldType: "UAString",
            isArray: true
        },
        {
            name: "profileUris",
            fieldType: "UAString",
            isArray: true
        },
    ]
});
class GetEndpointsRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.endpointUrl = null;
            this.localeIds = [];
            this.profileUris = [];
            return;
        }
        const schema = GetEndpointsRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.endpointUrl = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.endpointUrl);
        this.localeIds = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.localeIds);
        this.profileUris = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[3], options === null || options === void 0 ? void 0 : options.profileUris);
    }
    static get schema() { return schemaGetEndpointsRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.endpointUrl, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.localeIds, stream, node_opcua_basic_types_1.encodeUAString);
        (0, node_opcua_basic_types_1.encodeArray)(this.profileUris, stream, node_opcua_basic_types_1.encodeUAString);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.endpointUrl = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.endpointUrl);
        this.localeIds = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUAString);
        this.profileUris = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUAString);
    }
    get schema() { return schemaGetEndpointsRequest; }
}
exports.GetEndpointsRequest = GetEndpointsRequest;
GetEndpointsRequest.possibleFields = [
    "requestHeader",
    "endpointUrl",
    "localeIds",
    "profileUris"
];
GetEndpointsRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(426, 0);
GetEndpointsRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(428, 0);
GetEndpointsRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(427, 0);
GetEndpointsRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15100, 0);
GetEndpointsRequest.schema.dataTypeNodeId = GetEndpointsRequest.dataTypeNodeId;
GetEndpointsRequest.schema.encodingDefaultBinary = GetEndpointsRequest.encodingDefaultBinary;
GetEndpointsRequest.schema.encodingDefaultXml = GetEndpointsRequest.encodingDefaultXml;
GetEndpointsRequest.schema.encodingDefaultJson = GetEndpointsRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(GetEndpointsRequest.dataTypeNodeId, "GetEndpointsRequest", GetEndpointsRequest);
// --------------------------------------------------------------------------------------------
const schemaGetEndpointsResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "GetEndpointsResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "endpoints",
            fieldType: "EndpointDescription",
            isArray: true
        },
    ]
});
class GetEndpointsResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.endpoints = null; /* null array */
            return;
        }
        const schema = GetEndpointsResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.endpoints = []; // should default
        if (options.endpoints) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.endpoints));
            this.endpoints = options.endpoints.map((e) => new EndpointDescription(e));
        }
    }
    static get schema() { return schemaGetEndpointsResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.endpoints, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.endpoints = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new EndpointDescription(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaGetEndpointsResponse; }
}
exports.GetEndpointsResponse = GetEndpointsResponse;
GetEndpointsResponse.possibleFields = [
    "responseHeader",
    "endpoints"
];
GetEndpointsResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(429, 0);
GetEndpointsResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(431, 0);
GetEndpointsResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(430, 0);
GetEndpointsResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15101, 0);
GetEndpointsResponse.schema.dataTypeNodeId = GetEndpointsResponse.dataTypeNodeId;
GetEndpointsResponse.schema.encodingDefaultBinary = GetEndpointsResponse.encodingDefaultBinary;
GetEndpointsResponse.schema.encodingDefaultXml = GetEndpointsResponse.encodingDefaultXml;
GetEndpointsResponse.schema.encodingDefaultJson = GetEndpointsResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(GetEndpointsResponse.dataTypeNodeId, "GetEndpointsResponse", GetEndpointsResponse);
// --------------------------------------------------------------------------------------------
const schemaHistoryData = (0, node_opcua_factory_1.buildStructuredType)({
    name: "HistoryData",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "dataValues",
            fieldType: "DataValue",
            isArray: true
        },
    ]
});
class HistoryData extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.dataValues = [];
            return;
        }
        const schema = HistoryData.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.dataValues = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[0], options === null || options === void 0 ? void 0 : options.dataValues);
    }
    static get schema() { return schemaHistoryData; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.dataValues, stream, node_opcua_data_value_1.encodeDataValue);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.dataValues = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_value_1.decodeDataValue);
    }
    get schema() { return schemaHistoryData; }
}
exports.HistoryData = HistoryData;
HistoryData.possibleFields = [
    "dataValues"
];
HistoryData.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(656, 0);
HistoryData.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(658, 0);
HistoryData.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(657, 0);
HistoryData.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15270, 0);
HistoryData.schema.dataTypeNodeId = HistoryData.dataTypeNodeId;
HistoryData.schema.encodingDefaultBinary = HistoryData.encodingDefaultBinary;
HistoryData.schema.encodingDefaultXml = HistoryData.encodingDefaultXml;
HistoryData.schema.encodingDefaultJson = HistoryData.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(HistoryData.dataTypeNodeId, "HistoryData", HistoryData);
// --------------------------------------------------------------------------------------------
const schemaHistoryEventFieldList = (0, node_opcua_factory_1.buildStructuredType)({
    name: "HistoryEventFieldList",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "eventFields",
            fieldType: "Variant",
            isArray: true
        },
    ]
});
class HistoryEventFieldList extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.eventFields = [];
            return;
        }
        const schema = HistoryEventFieldList.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.eventFields = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[0], options === null || options === void 0 ? void 0 : options.eventFields);
    }
    static get schema() { return schemaHistoryEventFieldList; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.eventFields, stream, node_opcua_variant_1.encodeVariant);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.eventFields = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_variant_1.decodeVariant);
    }
    get schema() { return schemaHistoryEventFieldList; }
}
exports.HistoryEventFieldList = HistoryEventFieldList;
HistoryEventFieldList.possibleFields = [
    "eventFields"
];
HistoryEventFieldList.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(920, 0);
HistoryEventFieldList.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(922, 0);
HistoryEventFieldList.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(921, 0);
HistoryEventFieldList.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15349, 0);
HistoryEventFieldList.schema.dataTypeNodeId = HistoryEventFieldList.dataTypeNodeId;
HistoryEventFieldList.schema.encodingDefaultBinary = HistoryEventFieldList.encodingDefaultBinary;
HistoryEventFieldList.schema.encodingDefaultXml = HistoryEventFieldList.encodingDefaultXml;
HistoryEventFieldList.schema.encodingDefaultJson = HistoryEventFieldList.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(HistoryEventFieldList.dataTypeNodeId, "HistoryEventFieldList", HistoryEventFieldList);
// --------------------------------------------------------------------------------------------
const schemaHistoryEvent = (0, node_opcua_factory_1.buildStructuredType)({
    name: "HistoryEvent",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "events",
            fieldType: "HistoryEventFieldList",
            isArray: true
        },
    ]
});
class HistoryEvent extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.events = null; /* null array */
            return;
        }
        const schema = HistoryEvent.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.events = []; // should default
        if (options.events) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.events));
            this.events = options.events.map((e) => new HistoryEventFieldList(e));
        }
    }
    static get schema() { return schemaHistoryEvent; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.events, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.events = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new HistoryEventFieldList(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaHistoryEvent; }
}
exports.HistoryEvent = HistoryEvent;
HistoryEvent.possibleFields = [
    "events"
];
HistoryEvent.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(659, 0);
HistoryEvent.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(661, 0);
HistoryEvent.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(660, 0);
HistoryEvent.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15273, 0);
HistoryEvent.schema.dataTypeNodeId = HistoryEvent.dataTypeNodeId;
HistoryEvent.schema.encodingDefaultBinary = HistoryEvent.encodingDefaultBinary;
HistoryEvent.schema.encodingDefaultXml = HistoryEvent.encodingDefaultXml;
HistoryEvent.schema.encodingDefaultJson = HistoryEvent.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(HistoryEvent.dataTypeNodeId, "HistoryEvent", HistoryEvent);
// --------------------------------------------------------------------------------------------
var HistoryUpdateType;
(function (HistoryUpdateType) {
    HistoryUpdateType[HistoryUpdateType["Insert"] = 1] = "Insert";
    HistoryUpdateType[HistoryUpdateType["Replace"] = 2] = "Replace";
    HistoryUpdateType[HistoryUpdateType["Update"] = 3] = "Update";
    HistoryUpdateType[HistoryUpdateType["Delete"] = 4] = "Delete";
    HistoryUpdateType[HistoryUpdateType["Invalid"] = 4294967295] = "Invalid";
})(HistoryUpdateType = exports.HistoryUpdateType || (exports.HistoryUpdateType = {}));
const schemaHistoryUpdateType = {
    enumValues: HistoryUpdateType,
    flaggable: false,
    minValue: 1,
    maxValue: 4,
    name: "HistoryUpdateType"
};
function decodeHistoryUpdateType(stream, _value) {
    let value = stream.readUInt32();
    value = (value < schemaHistoryUpdateType.minValue || value > schemaHistoryUpdateType.maxValue) ? HistoryUpdateType.Invalid : value;
    return value;
}
function encodeHistoryUpdateType(value, stream) {
    stream.writeUInt32(value);
}
exports._enumerationHistoryUpdateType = (0, node_opcua_factory_1.registerEnumeration)(schemaHistoryUpdateType);
(0, node_opcua_assert_1.assert)(exports._enumerationHistoryUpdateType.isFlaggable === false);
// --------------------------------------------------------------------------------------------
const schemaModificationInfo = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ModificationInfo",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "modificationTime",
            fieldType: "DateTime",
        },
        {
            name: "updateType",
            fieldType: "HistoryUpdateType",
        },
        {
            name: "userName",
            fieldType: "UAString",
        },
    ]
});
class ModificationInfo extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.modificationTime = new Date();
            this.updateType = 0;
            this.userName = null;
            return;
        }
        const schema = ModificationInfo.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.modificationTime = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.modificationTime);
        this.updateType = this.setUpdateType((0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.updateType));
        this.userName = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.userName);
    }
    static get schema() { return schemaModificationInfo; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.modificationTime, stream);
        encodeHistoryUpdateType(this.updateType, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.userName, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.modificationTime = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.modificationTime);
        this.updateType = decodeHistoryUpdateType(stream, this.updateType);
        this.userName = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.userName);
    }
    // Define Enumeration setters
    setUpdateType(value) {
        const coercedValue = exports._enumerationHistoryUpdateType.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to HistoryUpdateType :" + value);
        }
        this.updateType = coercedValue.value;
        return this.updateType;
    }
    get schema() { return schemaModificationInfo; }
}
exports.ModificationInfo = ModificationInfo;
ModificationInfo.possibleFields = [
    "modificationTime",
    "updateType",
    "userName"
];
ModificationInfo.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(11216, 0);
ModificationInfo.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(11226, 0);
ModificationInfo.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(11218, 0);
ModificationInfo.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15271, 0);
ModificationInfo.schema.dataTypeNodeId = ModificationInfo.dataTypeNodeId;
ModificationInfo.schema.encodingDefaultBinary = ModificationInfo.encodingDefaultBinary;
ModificationInfo.schema.encodingDefaultXml = ModificationInfo.encodingDefaultXml;
ModificationInfo.schema.encodingDefaultJson = ModificationInfo.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ModificationInfo.dataTypeNodeId, "ModificationInfo", ModificationInfo);
// --------------------------------------------------------------------------------------------
const schemaHistoryModifiedData = (0, node_opcua_factory_1.buildStructuredType)({
    name: "HistoryModifiedData",
    baseType: "HistoryData",
    fields: [
        {
            name: "modificationInfos",
            fieldType: "ModificationInfo",
            isArray: true
        },
    ]
});
class HistoryModifiedData extends HistoryData {
    constructor(options) {
        super(options);
        if (options === null) {
            this.modificationInfos = null; /* null array */
            return;
        }
        const schema = HistoryModifiedData.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.modificationInfos = []; // should default
        if (options.modificationInfos) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.modificationInfos));
            this.modificationInfos = options.modificationInfos.map((e) => new ModificationInfo(e));
        }
    }
    static get schema() { return schemaHistoryModifiedData; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.modificationInfos, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.modificationInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new ModificationInfo(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaHistoryModifiedData; }
}
exports.HistoryModifiedData = HistoryModifiedData;
HistoryModifiedData.possibleFields = [
    "modificationInfos"
];
HistoryModifiedData.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(11217, 0);
HistoryModifiedData.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(11227, 0);
HistoryModifiedData.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(11219, 0);
HistoryModifiedData.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15272, 0);
HistoryModifiedData.schema.dataTypeNodeId = HistoryModifiedData.dataTypeNodeId;
HistoryModifiedData.schema.encodingDefaultBinary = HistoryModifiedData.encodingDefaultBinary;
HistoryModifiedData.schema.encodingDefaultXml = HistoryModifiedData.encodingDefaultXml;
HistoryModifiedData.schema.encodingDefaultJson = HistoryModifiedData.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(HistoryModifiedData.dataTypeNodeId, "HistoryModifiedData", HistoryModifiedData);
// --------------------------------------------------------------------------------------------
const schemaHistoryReadDetails = (0, node_opcua_factory_1.buildStructuredType)({
    name: "HistoryReadDetails",
    baseType: "ExtensionObject",
    fields: []
});
class HistoryReadDetails extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            return;
        }
        const schema = HistoryReadDetails.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
    }
    static get schema() { return schemaHistoryReadDetails; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
    }
    get schema() { return schemaHistoryReadDetails; }
}
exports.HistoryReadDetails = HistoryReadDetails;
HistoryReadDetails.possibleFields = [];
HistoryReadDetails.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(641, 0);
HistoryReadDetails.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(643, 0);
HistoryReadDetails.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(642, 0);
HistoryReadDetails.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15261, 0);
HistoryReadDetails.schema.dataTypeNodeId = HistoryReadDetails.dataTypeNodeId;
HistoryReadDetails.schema.encodingDefaultBinary = HistoryReadDetails.encodingDefaultBinary;
HistoryReadDetails.schema.encodingDefaultXml = HistoryReadDetails.encodingDefaultXml;
HistoryReadDetails.schema.encodingDefaultJson = HistoryReadDetails.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(HistoryReadDetails.dataTypeNodeId, "HistoryReadDetails", HistoryReadDetails);
// --------------------------------------------------------------------------------------------
const schemaHistoryReadValueId = (0, node_opcua_factory_1.buildStructuredType)({
    name: "HistoryReadValueId",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "nodeId",
            fieldType: "NodeId",
        },
        {
            name: "indexRange",
            fieldType: "NumericRange",
        },
        {
            name: "dataEncoding",
            fieldType: "QualifiedName",
        },
        {
            name: "continuationPoint",
            fieldType: "ByteString",
        },
    ]
});
class HistoryReadValueId extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.nodeId = new node_opcua_nodeid_1.NodeId(null);
            this.indexRange = new node_opcua_numeric_range_1.NumericRange(null);
            this.dataEncoding = new node_opcua_data_model_1.QualifiedName(null);
            this.continuationPoint = Buffer.alloc(0);
            return;
        }
        const schema = HistoryReadValueId.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.nodeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.nodeId);
        this.indexRange = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.indexRange);
        this.dataEncoding = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.dataEncoding);
        this.continuationPoint = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.continuationPoint);
    }
    static get schema() { return schemaHistoryReadValueId; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.nodeId, stream);
        (0, node_opcua_numeric_range_1.encodeNumericRange)(this.indexRange, stream);
        (0, node_opcua_data_model_1.encodeQualifiedName)(this.dataEncoding, stream);
        (0, node_opcua_basic_types_1.encodeByteString)(this.continuationPoint, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.nodeId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.nodeId);
        this.indexRange = (0, node_opcua_numeric_range_1.decodeNumericRange)(stream, this.indexRange);
        this.dataEncoding = (0, node_opcua_data_model_1.decodeQualifiedName)(stream, this.dataEncoding);
        this.continuationPoint = (0, node_opcua_basic_types_1.decodeByteString)(stream, this.continuationPoint);
    }
    get schema() { return schemaHistoryReadValueId; }
}
exports.HistoryReadValueId = HistoryReadValueId;
HistoryReadValueId.possibleFields = [
    "nodeId",
    "indexRange",
    "dataEncoding",
    "continuationPoint"
];
HistoryReadValueId.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(635, 0);
HistoryReadValueId.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(637, 0);
HistoryReadValueId.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(636, 0);
HistoryReadValueId.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15259, 0);
HistoryReadValueId.schema.dataTypeNodeId = HistoryReadValueId.dataTypeNodeId;
HistoryReadValueId.schema.encodingDefaultBinary = HistoryReadValueId.encodingDefaultBinary;
HistoryReadValueId.schema.encodingDefaultXml = HistoryReadValueId.encodingDefaultXml;
HistoryReadValueId.schema.encodingDefaultJson = HistoryReadValueId.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(HistoryReadValueId.dataTypeNodeId, "HistoryReadValueId", HistoryReadValueId);
// --------------------------------------------------------------------------------------------
const schemaHistoryReadRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "HistoryReadRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "historyReadDetails",
            fieldType: "ExtensionObject",
        },
        {
            name: "timestampsToReturn",
            fieldType: "TimestampsToReturn",
        },
        {
            name: "releaseContinuationPoints",
            fieldType: "UABoolean",
        },
        {
            name: "nodesToRead",
            fieldType: "HistoryReadValueId",
            isArray: true
        },
    ]
});
class HistoryReadRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.historyReadDetails = null;
            this.timestampsToReturn = 0;
            this.releaseContinuationPoints = false;
            this.nodesToRead = null; /* null array */
            return;
        }
        const schema = HistoryReadRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.historyReadDetails = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.historyReadDetails);
        this.timestampsToReturn = this.setTimestampsToReturn((0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.timestampsToReturn));
        this.releaseContinuationPoints = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.releaseContinuationPoints);
        this.nodesToRead = []; // should default
        if (options.nodesToRead) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.nodesToRead));
            this.nodesToRead = options.nodesToRead.map((e) => new HistoryReadValueId(e));
        }
    }
    static get schema() { return schemaHistoryReadRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_extension_object_1.encodeExtensionObject)(this.historyReadDetails, stream);
        (0, node_opcua_data_value_1.encodeTimestampsToReturn)(this.timestampsToReturn, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.releaseContinuationPoints, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.nodesToRead, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.historyReadDetails = (0, node_opcua_extension_object_1.decodeExtensionObject)(stream, this.historyReadDetails);
        this.timestampsToReturn = (0, node_opcua_data_value_1.decodeTimestampsToReturn)(stream, this.timestampsToReturn);
        this.releaseContinuationPoints = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.releaseContinuationPoints);
        this.nodesToRead = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new HistoryReadValueId(null);
            obj.decode(stream1);
            return obj;
        });
    }
    // Define Enumeration setters
    setTimestampsToReturn(value) {
        const coercedValue = node_opcua_data_value_1._enumerationTimestampsToReturn.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to TimestampsToReturn :" + value);
        }
        this.timestampsToReturn = coercedValue.value;
        return this.timestampsToReturn;
    }
    get schema() { return schemaHistoryReadRequest; }
}
exports.HistoryReadRequest = HistoryReadRequest;
HistoryReadRequest.possibleFields = [
    "requestHeader",
    "historyReadDetails",
    "timestampsToReturn",
    "releaseContinuationPoints",
    "nodesToRead"
];
HistoryReadRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(662, 0);
HistoryReadRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(664, 0);
HistoryReadRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(663, 0);
HistoryReadRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15274, 0);
HistoryReadRequest.schema.dataTypeNodeId = HistoryReadRequest.dataTypeNodeId;
HistoryReadRequest.schema.encodingDefaultBinary = HistoryReadRequest.encodingDefaultBinary;
HistoryReadRequest.schema.encodingDefaultXml = HistoryReadRequest.encodingDefaultXml;
HistoryReadRequest.schema.encodingDefaultJson = HistoryReadRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(HistoryReadRequest.dataTypeNodeId, "HistoryReadRequest", HistoryReadRequest);
// --------------------------------------------------------------------------------------------
const schemaHistoryReadResult = (0, node_opcua_factory_1.buildStructuredType)({
    name: "HistoryReadResult",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "statusCode",
            fieldType: "StatusCode",
        },
        {
            name: "continuationPoint",
            fieldType: "ByteString",
        },
        {
            name: "historyData",
            fieldType: "ExtensionObject",
        },
    ]
});
class HistoryReadResult extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.statusCode = node_opcua_status_code_1.StatusCodes.Good;
            this.continuationPoint = Buffer.alloc(0);
            this.historyData = null;
            return;
        }
        const schema = HistoryReadResult.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.statusCode = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.statusCode);
        this.continuationPoint = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.continuationPoint);
        this.historyData = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.historyData);
    }
    static get schema() { return schemaHistoryReadResult; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_status_code_1.encodeStatusCode)(this.statusCode, stream);
        (0, node_opcua_basic_types_1.encodeByteString)(this.continuationPoint, stream);
        (0, node_opcua_extension_object_1.encodeExtensionObject)(this.historyData, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.statusCode = (0, node_opcua_status_code_1.decodeStatusCode)(stream, this.statusCode);
        this.continuationPoint = (0, node_opcua_basic_types_1.decodeByteString)(stream, this.continuationPoint);
        this.historyData = (0, node_opcua_extension_object_1.decodeExtensionObject)(stream, this.historyData);
    }
    get schema() { return schemaHistoryReadResult; }
}
exports.HistoryReadResult = HistoryReadResult;
HistoryReadResult.possibleFields = [
    "statusCode",
    "continuationPoint",
    "historyData"
];
HistoryReadResult.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(638, 0);
HistoryReadResult.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(640, 0);
HistoryReadResult.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(639, 0);
HistoryReadResult.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15260, 0);
HistoryReadResult.schema.dataTypeNodeId = HistoryReadResult.dataTypeNodeId;
HistoryReadResult.schema.encodingDefaultBinary = HistoryReadResult.encodingDefaultBinary;
HistoryReadResult.schema.encodingDefaultXml = HistoryReadResult.encodingDefaultXml;
HistoryReadResult.schema.encodingDefaultJson = HistoryReadResult.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(HistoryReadResult.dataTypeNodeId, "HistoryReadResult", HistoryReadResult);
// --------------------------------------------------------------------------------------------
const schemaHistoryReadResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "HistoryReadResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "results",
            fieldType: "HistoryReadResult",
            isArray: true
        },
        {
            name: "diagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class HistoryReadResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.results = null; /* null array */
            this.diagnosticInfos = [];
            return;
        }
        const schema = HistoryReadResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.results = []; // should default
        if (options.results) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.results));
            this.results = options.results.map((e) => new HistoryReadResult(e));
        }
        this.diagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.diagnosticInfos);
    }
    static get schema() { return schemaHistoryReadResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.results, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.diagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.results = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new HistoryReadResult(null);
            obj.decode(stream1);
            return obj;
        });
        this.diagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaHistoryReadResponse; }
}
exports.HistoryReadResponse = HistoryReadResponse;
HistoryReadResponse.possibleFields = [
    "responseHeader",
    "results",
    "diagnosticInfos"
];
HistoryReadResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(665, 0);
HistoryReadResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(667, 0);
HistoryReadResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(666, 0);
HistoryReadResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15275, 0);
HistoryReadResponse.schema.dataTypeNodeId = HistoryReadResponse.dataTypeNodeId;
HistoryReadResponse.schema.encodingDefaultBinary = HistoryReadResponse.encodingDefaultBinary;
HistoryReadResponse.schema.encodingDefaultXml = HistoryReadResponse.encodingDefaultXml;
HistoryReadResponse.schema.encodingDefaultJson = HistoryReadResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(HistoryReadResponse.dataTypeNodeId, "HistoryReadResponse", HistoryReadResponse);
// --------------------------------------------------------------------------------------------
const schemaHistoryUpdateRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "HistoryUpdateRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "historyUpdateDetails",
            fieldType: "ExtensionObject",
            isArray: true
        },
    ]
});
class HistoryUpdateRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.historyUpdateDetails = [];
            return;
        }
        const schema = HistoryUpdateRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.historyUpdateDetails = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.historyUpdateDetails);
    }
    static get schema() { return schemaHistoryUpdateRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.historyUpdateDetails, stream, node_opcua_extension_object_1.encodeExtensionObject);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.historyUpdateDetails = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_extension_object_1.decodeExtensionObject);
    }
    get schema() { return schemaHistoryUpdateRequest; }
}
exports.HistoryUpdateRequest = HistoryUpdateRequest;
HistoryUpdateRequest.possibleFields = [
    "requestHeader",
    "historyUpdateDetails"
];
HistoryUpdateRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(698, 0);
HistoryUpdateRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(700, 0);
HistoryUpdateRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(699, 0);
HistoryUpdateRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15287, 0);
HistoryUpdateRequest.schema.dataTypeNodeId = HistoryUpdateRequest.dataTypeNodeId;
HistoryUpdateRequest.schema.encodingDefaultBinary = HistoryUpdateRequest.encodingDefaultBinary;
HistoryUpdateRequest.schema.encodingDefaultXml = HistoryUpdateRequest.encodingDefaultXml;
HistoryUpdateRequest.schema.encodingDefaultJson = HistoryUpdateRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(HistoryUpdateRequest.dataTypeNodeId, "HistoryUpdateRequest", HistoryUpdateRequest);
// --------------------------------------------------------------------------------------------
const schemaHistoryUpdateResult = (0, node_opcua_factory_1.buildStructuredType)({
    name: "HistoryUpdateResult",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "statusCode",
            fieldType: "StatusCode",
        },
        {
            name: "operationResults",
            fieldType: "StatusCode",
            isArray: true
        },
        {
            name: "diagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class HistoryUpdateResult extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.statusCode = node_opcua_status_code_1.StatusCodes.Good;
            this.operationResults = [];
            this.diagnosticInfos = [];
            return;
        }
        const schema = HistoryUpdateResult.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.statusCode = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.statusCode);
        this.operationResults = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.operationResults);
        this.diagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.diagnosticInfos);
    }
    static get schema() { return schemaHistoryUpdateResult; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_status_code_1.encodeStatusCode)(this.statusCode, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.operationResults, stream, node_opcua_status_code_1.encodeStatusCode);
        (0, node_opcua_basic_types_1.encodeArray)(this.diagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.statusCode = (0, node_opcua_status_code_1.decodeStatusCode)(stream, this.statusCode);
        this.operationResults = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_status_code_1.decodeStatusCode);
        this.diagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaHistoryUpdateResult; }
}
exports.HistoryUpdateResult = HistoryUpdateResult;
HistoryUpdateResult.possibleFields = [
    "statusCode",
    "operationResults",
    "diagnosticInfos"
];
HistoryUpdateResult.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(695, 0);
HistoryUpdateResult.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(697, 0);
HistoryUpdateResult.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(696, 0);
HistoryUpdateResult.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15286, 0);
HistoryUpdateResult.schema.dataTypeNodeId = HistoryUpdateResult.dataTypeNodeId;
HistoryUpdateResult.schema.encodingDefaultBinary = HistoryUpdateResult.encodingDefaultBinary;
HistoryUpdateResult.schema.encodingDefaultXml = HistoryUpdateResult.encodingDefaultXml;
HistoryUpdateResult.schema.encodingDefaultJson = HistoryUpdateResult.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(HistoryUpdateResult.dataTypeNodeId, "HistoryUpdateResult", HistoryUpdateResult);
// --------------------------------------------------------------------------------------------
const schemaHistoryUpdateResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "HistoryUpdateResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "results",
            fieldType: "HistoryUpdateResult",
            isArray: true
        },
        {
            name: "diagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class HistoryUpdateResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.results = null; /* null array */
            this.diagnosticInfos = [];
            return;
        }
        const schema = HistoryUpdateResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.results = []; // should default
        if (options.results) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.results));
            this.results = options.results.map((e) => new HistoryUpdateResult(e));
        }
        this.diagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.diagnosticInfos);
    }
    static get schema() { return schemaHistoryUpdateResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.results, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.diagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.results = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new HistoryUpdateResult(null);
            obj.decode(stream1);
            return obj;
        });
        this.diagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaHistoryUpdateResponse; }
}
exports.HistoryUpdateResponse = HistoryUpdateResponse;
HistoryUpdateResponse.possibleFields = [
    "responseHeader",
    "results",
    "diagnosticInfos"
];
HistoryUpdateResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(701, 0);
HistoryUpdateResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(703, 0);
HistoryUpdateResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(702, 0);
HistoryUpdateResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15288, 0);
HistoryUpdateResponse.schema.dataTypeNodeId = HistoryUpdateResponse.dataTypeNodeId;
HistoryUpdateResponse.schema.encodingDefaultBinary = HistoryUpdateResponse.encodingDefaultBinary;
HistoryUpdateResponse.schema.encodingDefaultXml = HistoryUpdateResponse.encodingDefaultXml;
HistoryUpdateResponse.schema.encodingDefaultJson = HistoryUpdateResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(HistoryUpdateResponse.dataTypeNodeId, "HistoryUpdateResponse", HistoryUpdateResponse);
// --------------------------------------------------------------------------------------------
var IdentityCriteriaType;
(function (IdentityCriteriaType) {
    IdentityCriteriaType[IdentityCriteriaType["UserName"] = 1] = "UserName";
    IdentityCriteriaType[IdentityCriteriaType["Thumbprint"] = 2] = "Thumbprint";
    IdentityCriteriaType[IdentityCriteriaType["Role"] = 3] = "Role";
    IdentityCriteriaType[IdentityCriteriaType["GroupId"] = 4] = "GroupId";
    IdentityCriteriaType[IdentityCriteriaType["Anonymous"] = 5] = "Anonymous";
    IdentityCriteriaType[IdentityCriteriaType["AuthenticatedUser"] = 6] = "AuthenticatedUser";
    IdentityCriteriaType[IdentityCriteriaType["Invalid"] = 4294967295] = "Invalid";
})(IdentityCriteriaType = exports.IdentityCriteriaType || (exports.IdentityCriteriaType = {}));
const schemaIdentityCriteriaType = {
    enumValues: IdentityCriteriaType,
    flaggable: false,
    minValue: 1,
    maxValue: 6,
    name: "IdentityCriteriaType"
};
function decodeIdentityCriteriaType(stream, _value) {
    let value = stream.readUInt32();
    value = (value < schemaIdentityCriteriaType.minValue || value > schemaIdentityCriteriaType.maxValue) ? IdentityCriteriaType.Invalid : value;
    return value;
}
function encodeIdentityCriteriaType(value, stream) {
    stream.writeUInt32(value);
}
exports._enumerationIdentityCriteriaType = (0, node_opcua_factory_1.registerEnumeration)(schemaIdentityCriteriaType);
(0, node_opcua_assert_1.assert)(exports._enumerationIdentityCriteriaType.isFlaggable === false);
// --------------------------------------------------------------------------------------------
const schemaIdentityMappingRuleType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "IdentityMappingRuleType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "criteriaType",
            fieldType: "IdentityCriteriaType",
        },
        {
            name: "criteria",
            fieldType: "UAString",
        },
    ]
});
class IdentityMappingRuleType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.criteriaType = 0;
            this.criteria = null;
            return;
        }
        const schema = IdentityMappingRuleType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.criteriaType = this.setCriteriaType((0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.criteriaType));
        this.criteria = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.criteria);
    }
    static get schema() { return schemaIdentityMappingRuleType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        encodeIdentityCriteriaType(this.criteriaType, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.criteria, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.criteriaType = decodeIdentityCriteriaType(stream, this.criteriaType);
        this.criteria = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.criteria);
    }
    // Define Enumeration setters
    setCriteriaType(value) {
        const coercedValue = exports._enumerationIdentityCriteriaType.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to IdentityCriteriaType :" + value);
        }
        this.criteriaType = coercedValue.value;
        return this.criteriaType;
    }
    get schema() { return schemaIdentityMappingRuleType; }
}
exports.IdentityMappingRuleType = IdentityMappingRuleType;
IdentityMappingRuleType.possibleFields = [
    "criteriaType",
    "criteria"
];
IdentityMappingRuleType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15634, 0);
IdentityMappingRuleType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15736, 0);
IdentityMappingRuleType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15728, 0);
IdentityMappingRuleType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15042, 0);
IdentityMappingRuleType.schema.dataTypeNodeId = IdentityMappingRuleType.dataTypeNodeId;
IdentityMappingRuleType.schema.encodingDefaultBinary = IdentityMappingRuleType.encodingDefaultBinary;
IdentityMappingRuleType.schema.encodingDefaultXml = IdentityMappingRuleType.encodingDefaultXml;
IdentityMappingRuleType.schema.encodingDefaultJson = IdentityMappingRuleType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(IdentityMappingRuleType.dataTypeNodeId, "IdentityMappingRuleType", IdentityMappingRuleType);
// --------------------------------------------------------------------------------------------
const schemaInstanceNode = (0, node_opcua_factory_1.buildStructuredType)({
    name: "InstanceNode",
    baseType: "Node",
    fields: []
});
class InstanceNode extends Node {
    constructor(options) {
        super(options);
        if (options === null) {
            return;
        }
        const schema = InstanceNode.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
    }
    static get schema() { return schemaInstanceNode; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
    }
    get schema() { return schemaInstanceNode; }
}
exports.InstanceNode = InstanceNode;
InstanceNode.possibleFields = [];
InstanceNode.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(11879, 0);
InstanceNode.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(11889, 0);
InstanceNode.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(11887, 0);
InstanceNode.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15069, 0);
InstanceNode.schema.dataTypeNodeId = InstanceNode.dataTypeNodeId;
InstanceNode.schema.encodingDefaultBinary = InstanceNode.encodingDefaultBinary;
InstanceNode.schema.encodingDefaultXml = InstanceNode.encodingDefaultXml;
InstanceNode.schema.encodingDefaultJson = InstanceNode.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(InstanceNode.dataTypeNodeId, "InstanceNode", InstanceNode);
// --------------------------------------------------------------------------------------------
const schemaIssuedIdentityToken = (0, node_opcua_factory_1.buildStructuredType)({
    name: "IssuedIdentityToken",
    baseType: "UserIdentityToken",
    fields: [
        {
            name: "tokenData",
            fieldType: "ByteString",
        },
        {
            name: "encryptionAlgorithm",
            fieldType: "UAString",
        },
    ]
});
class IssuedIdentityToken extends UserIdentityToken {
    constructor(options) {
        super(options);
        if (options === null) {
            this.tokenData = Buffer.alloc(0);
            this.encryptionAlgorithm = null;
            return;
        }
        const schema = IssuedIdentityToken.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.tokenData = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.tokenData);
        this.encryptionAlgorithm = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.encryptionAlgorithm);
    }
    static get schema() { return schemaIssuedIdentityToken; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeByteString)(this.tokenData, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.encryptionAlgorithm, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.tokenData = (0, node_opcua_basic_types_1.decodeByteString)(stream, this.tokenData);
        this.encryptionAlgorithm = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.encryptionAlgorithm);
    }
    get schema() { return schemaIssuedIdentityToken; }
}
exports.IssuedIdentityToken = IssuedIdentityToken;
IssuedIdentityToken.possibleFields = [
    "tokenData",
    "encryptionAlgorithm"
];
IssuedIdentityToken.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(938, 0);
IssuedIdentityToken.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(940, 0);
IssuedIdentityToken.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(939, 0);
IssuedIdentityToken.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15144, 0);
IssuedIdentityToken.schema.dataTypeNodeId = IssuedIdentityToken.dataTypeNodeId;
IssuedIdentityToken.schema.encodingDefaultBinary = IssuedIdentityToken.encodingDefaultBinary;
IssuedIdentityToken.schema.encodingDefaultXml = IssuedIdentityToken.encodingDefaultXml;
IssuedIdentityToken.schema.encodingDefaultJson = IssuedIdentityToken.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(IssuedIdentityToken.dataTypeNodeId, "IssuedIdentityToken", IssuedIdentityToken);
// --------------------------------------------------------------------------------------------
var JsonNetworkMessageContentMask;
(function (JsonNetworkMessageContentMask) {
    JsonNetworkMessageContentMask[JsonNetworkMessageContentMask["None"] = 0] = "None";
    JsonNetworkMessageContentMask[JsonNetworkMessageContentMask["NetworkMessageHeader"] = 1] = "NetworkMessageHeader";
    JsonNetworkMessageContentMask[JsonNetworkMessageContentMask["DataSetMessageHeader"] = 2] = "DataSetMessageHeader";
    JsonNetworkMessageContentMask[JsonNetworkMessageContentMask["SingleDataSetMessage"] = 4] = "SingleDataSetMessage";
    JsonNetworkMessageContentMask[JsonNetworkMessageContentMask["PublisherId"] = 8] = "PublisherId";
    JsonNetworkMessageContentMask[JsonNetworkMessageContentMask["DataSetClassId"] = 16] = "DataSetClassId";
    JsonNetworkMessageContentMask[JsonNetworkMessageContentMask["ReplyTo"] = 32] = "ReplyTo";
})(JsonNetworkMessageContentMask = exports.JsonNetworkMessageContentMask || (exports.JsonNetworkMessageContentMask = {}));
const schemaJsonNetworkMessageContentMask = {
    enumValues: JsonNetworkMessageContentMask,
    flaggable: true,
    name: "JsonNetworkMessageContentMask"
};
function decodeJsonNetworkMessageContentMask(stream, _value) {
    return stream.readUInt32();
}
function encodeJsonNetworkMessageContentMask(value, stream) {
    stream.writeUInt32(value);
}
exports._enumerationJsonNetworkMessageContentMask = (0, node_opcua_factory_1.registerEnumeration)(schemaJsonNetworkMessageContentMask);
(0, node_opcua_assert_1.assert)(exports._enumerationJsonNetworkMessageContentMask.isFlaggable === true);
// --------------------------------------------------------------------------------------------
var JsonDataSetMessageContentMask;
(function (JsonDataSetMessageContentMask) {
    JsonDataSetMessageContentMask[JsonDataSetMessageContentMask["None"] = 0] = "None";
    JsonDataSetMessageContentMask[JsonDataSetMessageContentMask["DataSetWriterId"] = 1] = "DataSetWriterId";
    JsonDataSetMessageContentMask[JsonDataSetMessageContentMask["MetaDataVersion"] = 2] = "MetaDataVersion";
    JsonDataSetMessageContentMask[JsonDataSetMessageContentMask["SequenceNumber"] = 4] = "SequenceNumber";
    JsonDataSetMessageContentMask[JsonDataSetMessageContentMask["Timestamp"] = 8] = "Timestamp";
    JsonDataSetMessageContentMask[JsonDataSetMessageContentMask["Status"] = 16] = "Status";
})(JsonDataSetMessageContentMask = exports.JsonDataSetMessageContentMask || (exports.JsonDataSetMessageContentMask = {}));
const schemaJsonDataSetMessageContentMask = {
    enumValues: JsonDataSetMessageContentMask,
    flaggable: true,
    name: "JsonDataSetMessageContentMask"
};
function decodeJsonDataSetMessageContentMask(stream, _value) {
    return stream.readUInt32();
}
function encodeJsonDataSetMessageContentMask(value, stream) {
    stream.writeUInt32(value);
}
exports._enumerationJsonDataSetMessageContentMask = (0, node_opcua_factory_1.registerEnumeration)(schemaJsonDataSetMessageContentMask);
(0, node_opcua_assert_1.assert)(exports._enumerationJsonDataSetMessageContentMask.isFlaggable === true);
// --------------------------------------------------------------------------------------------
const schemaJsonDataSetReaderMessageDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "JsonDataSetReaderMessageDataType",
    baseType: "DataSetReaderMessageDataType",
    fields: [
        {
            name: "networkMessageContentMask",
            fieldType: "JsonNetworkMessageContentMask",
        },
        {
            name: "dataSetMessageContentMask",
            fieldType: "JsonDataSetMessageContentMask",
        },
    ]
});
class JsonDataSetReaderMessageDataType extends DataSetReaderMessageDataType {
    constructor(options) {
        super(options);
        if (options === null) {
            this.networkMessageContentMask = 0;
            this.dataSetMessageContentMask = 0;
            return;
        }
        const schema = JsonDataSetReaderMessageDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.networkMessageContentMask = this.setNetworkMessageContentMask((0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.networkMessageContentMask));
        this.dataSetMessageContentMask = this.setDataSetMessageContentMask((0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.dataSetMessageContentMask));
    }
    static get schema() { return schemaJsonDataSetReaderMessageDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        encodeJsonNetworkMessageContentMask(this.networkMessageContentMask, stream);
        encodeJsonDataSetMessageContentMask(this.dataSetMessageContentMask, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.networkMessageContentMask = decodeJsonNetworkMessageContentMask(stream, this.networkMessageContentMask);
        this.dataSetMessageContentMask = decodeJsonDataSetMessageContentMask(stream, this.dataSetMessageContentMask);
    }
    // Define Enumeration setters
    setNetworkMessageContentMask(value) {
        const coercedValue = exports._enumerationJsonNetworkMessageContentMask.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to JsonNetworkMessageContentMask :" + value);
        }
        this.networkMessageContentMask = coercedValue.value;
        return this.networkMessageContentMask;
    }
    setDataSetMessageContentMask(value) {
        const coercedValue = exports._enumerationJsonDataSetMessageContentMask.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to JsonDataSetMessageContentMask :" + value);
        }
        this.dataSetMessageContentMask = coercedValue.value;
        return this.dataSetMessageContentMask;
    }
    get schema() { return schemaJsonDataSetReaderMessageDataType; }
}
exports.JsonDataSetReaderMessageDataType = JsonDataSetReaderMessageDataType;
JsonDataSetReaderMessageDataType.possibleFields = [
    "networkMessageContentMask",
    "dataSetMessageContentMask"
];
JsonDataSetReaderMessageDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15665, 0);
JsonDataSetReaderMessageDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15725, 0);
JsonDataSetReaderMessageDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16019, 0);
JsonDataSetReaderMessageDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16404, 0);
JsonDataSetReaderMessageDataType.schema.dataTypeNodeId = JsonDataSetReaderMessageDataType.dataTypeNodeId;
JsonDataSetReaderMessageDataType.schema.encodingDefaultBinary = JsonDataSetReaderMessageDataType.encodingDefaultBinary;
JsonDataSetReaderMessageDataType.schema.encodingDefaultXml = JsonDataSetReaderMessageDataType.encodingDefaultXml;
JsonDataSetReaderMessageDataType.schema.encodingDefaultJson = JsonDataSetReaderMessageDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(JsonDataSetReaderMessageDataType.dataTypeNodeId, "JsonDataSetReaderMessageDataType", JsonDataSetReaderMessageDataType);
// --------------------------------------------------------------------------------------------
const schemaJsonDataSetWriterMessageDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "JsonDataSetWriterMessageDataType",
    baseType: "DataSetWriterMessageDataType",
    fields: [
        {
            name: "dataSetMessageContentMask",
            fieldType: "JsonDataSetMessageContentMask",
        },
    ]
});
class JsonDataSetWriterMessageDataType extends DataSetWriterMessageDataType {
    constructor(options) {
        super(options);
        if (options === null) {
            this.dataSetMessageContentMask = 0;
            return;
        }
        const schema = JsonDataSetWriterMessageDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.dataSetMessageContentMask = this.setDataSetMessageContentMask((0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.dataSetMessageContentMask));
    }
    static get schema() { return schemaJsonDataSetWriterMessageDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        encodeJsonDataSetMessageContentMask(this.dataSetMessageContentMask, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.dataSetMessageContentMask = decodeJsonDataSetMessageContentMask(stream, this.dataSetMessageContentMask);
    }
    // Define Enumeration setters
    setDataSetMessageContentMask(value) {
        const coercedValue = exports._enumerationJsonDataSetMessageContentMask.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to JsonDataSetMessageContentMask :" + value);
        }
        this.dataSetMessageContentMask = coercedValue.value;
        return this.dataSetMessageContentMask;
    }
    get schema() { return schemaJsonDataSetWriterMessageDataType; }
}
exports.JsonDataSetWriterMessageDataType = JsonDataSetWriterMessageDataType;
JsonDataSetWriterMessageDataType.possibleFields = [
    "dataSetMessageContentMask"
];
JsonDataSetWriterMessageDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15664, 0);
JsonDataSetWriterMessageDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15724, 0);
JsonDataSetWriterMessageDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16018, 0);
JsonDataSetWriterMessageDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16394, 0);
JsonDataSetWriterMessageDataType.schema.dataTypeNodeId = JsonDataSetWriterMessageDataType.dataTypeNodeId;
JsonDataSetWriterMessageDataType.schema.encodingDefaultBinary = JsonDataSetWriterMessageDataType.encodingDefaultBinary;
JsonDataSetWriterMessageDataType.schema.encodingDefaultXml = JsonDataSetWriterMessageDataType.encodingDefaultXml;
JsonDataSetWriterMessageDataType.schema.encodingDefaultJson = JsonDataSetWriterMessageDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(JsonDataSetWriterMessageDataType.dataTypeNodeId, "JsonDataSetWriterMessageDataType", JsonDataSetWriterMessageDataType);
// --------------------------------------------------------------------------------------------
const schemaWriterGroupMessageDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "WriterGroupMessageDataType",
    baseType: "ExtensionObject",
    fields: []
});
class WriterGroupMessageDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            return;
        }
        const schema = WriterGroupMessageDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
    }
    static get schema() { return schemaWriterGroupMessageDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
    }
    get schema() { return schemaWriterGroupMessageDataType; }
}
exports.WriterGroupMessageDataType = WriterGroupMessageDataType;
WriterGroupMessageDataType.possibleFields = [];
WriterGroupMessageDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15616, 0);
WriterGroupMessageDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15693, 0);
WriterGroupMessageDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15991, 0);
WriterGroupMessageDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16280, 0);
WriterGroupMessageDataType.schema.dataTypeNodeId = WriterGroupMessageDataType.dataTypeNodeId;
WriterGroupMessageDataType.schema.encodingDefaultBinary = WriterGroupMessageDataType.encodingDefaultBinary;
WriterGroupMessageDataType.schema.encodingDefaultXml = WriterGroupMessageDataType.encodingDefaultXml;
WriterGroupMessageDataType.schema.encodingDefaultJson = WriterGroupMessageDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(WriterGroupMessageDataType.dataTypeNodeId, "WriterGroupMessageDataType", WriterGroupMessageDataType);
// --------------------------------------------------------------------------------------------
const schemaJsonWriterGroupMessageDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "JsonWriterGroupMessageDataType",
    baseType: "WriterGroupMessageDataType",
    fields: [
        {
            name: "networkMessageContentMask",
            fieldType: "JsonNetworkMessageContentMask",
        },
    ]
});
class JsonWriterGroupMessageDataType extends WriterGroupMessageDataType {
    constructor(options) {
        super(options);
        if (options === null) {
            this.networkMessageContentMask = 0;
            return;
        }
        const schema = JsonWriterGroupMessageDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.networkMessageContentMask = this.setNetworkMessageContentMask((0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.networkMessageContentMask));
    }
    static get schema() { return schemaJsonWriterGroupMessageDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        encodeJsonNetworkMessageContentMask(this.networkMessageContentMask, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.networkMessageContentMask = decodeJsonNetworkMessageContentMask(stream, this.networkMessageContentMask);
    }
    // Define Enumeration setters
    setNetworkMessageContentMask(value) {
        const coercedValue = exports._enumerationJsonNetworkMessageContentMask.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to JsonNetworkMessageContentMask :" + value);
        }
        this.networkMessageContentMask = coercedValue.value;
        return this.networkMessageContentMask;
    }
    get schema() { return schemaJsonWriterGroupMessageDataType; }
}
exports.JsonWriterGroupMessageDataType = JsonWriterGroupMessageDataType;
JsonWriterGroupMessageDataType.possibleFields = [
    "networkMessageContentMask"
];
JsonWriterGroupMessageDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15657, 0);
JsonWriterGroupMessageDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15719, 0);
JsonWriterGroupMessageDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16017, 0);
JsonWriterGroupMessageDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16393, 0);
JsonWriterGroupMessageDataType.schema.dataTypeNodeId = JsonWriterGroupMessageDataType.dataTypeNodeId;
JsonWriterGroupMessageDataType.schema.encodingDefaultBinary = JsonWriterGroupMessageDataType.encodingDefaultBinary;
JsonWriterGroupMessageDataType.schema.encodingDefaultXml = JsonWriterGroupMessageDataType.encodingDefaultXml;
JsonWriterGroupMessageDataType.schema.encodingDefaultJson = JsonWriterGroupMessageDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(JsonWriterGroupMessageDataType.dataTypeNodeId, "JsonWriterGroupMessageDataType", JsonWriterGroupMessageDataType);
// --------------------------------------------------------------------------------------------
const schemaLiteralOperand = (0, node_opcua_factory_1.buildStructuredType)({
    name: "LiteralOperand",
    baseType: "FilterOperand",
    fields: [
        {
            name: "value",
            fieldType: "Variant",
        },
    ]
});
class LiteralOperand extends FilterOperand {
    constructor(options) {
        super(options);
        if (options === null) {
            this.value = new node_opcua_variant_1.Variant(null);
            return;
        }
        const schema = LiteralOperand.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.value = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.value);
    }
    static get schema() { return schemaLiteralOperand; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_variant_1.encodeVariant)(this.value, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.value = (0, node_opcua_variant_1.decodeVariant)(stream, this.value);
    }
    get schema() { return schemaLiteralOperand; }
}
exports.LiteralOperand = LiteralOperand;
LiteralOperand.possibleFields = [
    "value"
];
LiteralOperand.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(595, 0);
LiteralOperand.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(597, 0);
LiteralOperand.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(596, 0);
LiteralOperand.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15208, 0);
LiteralOperand.schema.dataTypeNodeId = LiteralOperand.dataTypeNodeId;
LiteralOperand.schema.encodingDefaultBinary = LiteralOperand.encodingDefaultBinary;
LiteralOperand.schema.encodingDefaultXml = LiteralOperand.encodingDefaultXml;
LiteralOperand.schema.encodingDefaultJson = LiteralOperand.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(LiteralOperand.dataTypeNodeId, "LiteralOperand", LiteralOperand);
// --------------------------------------------------------------------------------------------
const schemaMdnsDiscoveryConfiguration = (0, node_opcua_factory_1.buildStructuredType)({
    name: "MdnsDiscoveryConfiguration",
    baseType: "DiscoveryConfiguration",
    fields: [
        {
            name: "mdnsServerName",
            fieldType: "UAString",
        },
        {
            name: "serverCapabilities",
            fieldType: "UAString",
            isArray: true
        },
    ]
});
class MdnsDiscoveryConfiguration extends DiscoveryConfiguration {
    constructor(options) {
        super(options);
        if (options === null) {
            this.mdnsServerName = null;
            this.serverCapabilities = [];
            return;
        }
        const schema = MdnsDiscoveryConfiguration.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.mdnsServerName = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.mdnsServerName);
        this.serverCapabilities = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.serverCapabilities);
    }
    static get schema() { return schemaMdnsDiscoveryConfiguration; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.mdnsServerName, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.serverCapabilities, stream, node_opcua_basic_types_1.encodeUAString);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.mdnsServerName = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.mdnsServerName);
        this.serverCapabilities = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUAString);
    }
    get schema() { return schemaMdnsDiscoveryConfiguration; }
}
exports.MdnsDiscoveryConfiguration = MdnsDiscoveryConfiguration;
MdnsDiscoveryConfiguration.possibleFields = [
    "mdnsServerName",
    "serverCapabilities"
];
MdnsDiscoveryConfiguration.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12891, 0);
MdnsDiscoveryConfiguration.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12901, 0);
MdnsDiscoveryConfiguration.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12893, 0);
MdnsDiscoveryConfiguration.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15106, 0);
MdnsDiscoveryConfiguration.schema.dataTypeNodeId = MdnsDiscoveryConfiguration.dataTypeNodeId;
MdnsDiscoveryConfiguration.schema.encodingDefaultBinary = MdnsDiscoveryConfiguration.encodingDefaultBinary;
MdnsDiscoveryConfiguration.schema.encodingDefaultXml = MdnsDiscoveryConfiguration.encodingDefaultXml;
MdnsDiscoveryConfiguration.schema.encodingDefaultJson = MdnsDiscoveryConfiguration.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(MdnsDiscoveryConfiguration.dataTypeNodeId, "MdnsDiscoveryConfiguration", MdnsDiscoveryConfiguration);
// --------------------------------------------------------------------------------------------
const schemaMethodAttributes = (0, node_opcua_factory_1.buildStructuredType)({
    name: "MethodAttributes",
    baseType: "NodeAttributes",
    fields: [
        {
            name: "executable",
            fieldType: "UABoolean",
        },
        {
            name: "userExecutable",
            fieldType: "UABoolean",
        },
    ]
});
class MethodAttributes extends NodeAttributes {
    constructor(options) {
        super(options);
        if (options === null) {
            this.executable = false;
            this.userExecutable = false;
            return;
        }
        const schema = MethodAttributes.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.executable = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.executable);
        this.userExecutable = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.userExecutable);
    }
    static get schema() { return schemaMethodAttributes; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.executable, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.userExecutable, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.executable = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.executable);
        this.userExecutable = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.userExecutable);
    }
    get schema() { return schemaMethodAttributes; }
}
exports.MethodAttributes = MethodAttributes;
MethodAttributes.possibleFields = [
    "executable",
    "userExecutable"
];
MethodAttributes.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(358, 0);
MethodAttributes.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(360, 0);
MethodAttributes.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(359, 0);
MethodAttributes.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15157, 0);
MethodAttributes.schema.dataTypeNodeId = MethodAttributes.dataTypeNodeId;
MethodAttributes.schema.encodingDefaultBinary = MethodAttributes.encodingDefaultBinary;
MethodAttributes.schema.encodingDefaultXml = MethodAttributes.encodingDefaultXml;
MethodAttributes.schema.encodingDefaultJson = MethodAttributes.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(MethodAttributes.dataTypeNodeId, "MethodAttributes", MethodAttributes);
// --------------------------------------------------------------------------------------------
const schemaMethodNode = (0, node_opcua_factory_1.buildStructuredType)({
    name: "MethodNode",
    baseType: "InstanceNode",
    fields: [
        {
            name: "rolePermissions",
            fieldType: "RolePermissionType",
            isArray: true
        },
        {
            name: "userRolePermissions",
            fieldType: "RolePermissionType",
            isArray: true
        },
        {
            name: "references",
            fieldType: "ReferenceNode",
            isArray: true
        },
        {
            name: "executable",
            fieldType: "UABoolean",
        },
        {
            name: "userExecutable",
            fieldType: "UABoolean",
        },
    ]
});
class MethodNode extends InstanceNode {
    constructor(options) {
        super(options);
        if (options === null) {
            this.rolePermissions = null; /* null array */
            this.userRolePermissions = null; /* null array */
            this.references = null; /* null array */
            this.executable = false;
            this.userExecutable = false;
            return;
        }
        const schema = MethodNode.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.rolePermissions = []; // should default
        if (options.rolePermissions) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.rolePermissions));
            this.rolePermissions = options.rolePermissions.map((e) => new RolePermissionType(e));
        }
        this.userRolePermissions = []; // should default
        if (options.userRolePermissions) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.userRolePermissions));
            this.userRolePermissions = options.userRolePermissions.map((e) => new RolePermissionType(e));
        }
        this.references = []; // should default
        if (options.references) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.references));
            this.references = options.references.map((e) => new ReferenceNode(e));
        }
        this.executable = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.executable);
        this.userExecutable = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.userExecutable);
    }
    static get schema() { return schemaMethodNode; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.rolePermissions, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.userRolePermissions, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.references, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.executable, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.userExecutable, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.rolePermissions = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new RolePermissionType(null);
            obj.decode(stream1);
            return obj;
        });
        this.userRolePermissions = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new RolePermissionType(null);
            obj.decode(stream1);
            return obj;
        });
        this.references = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new ReferenceNode(null);
            obj.decode(stream1);
            return obj;
        });
        this.executable = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.executable);
        this.userExecutable = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.userExecutable);
    }
    get schema() { return schemaMethodNode; }
}
exports.MethodNode = MethodNode;
MethodNode.possibleFields = [
    "rolePermissions",
    "userRolePermissions",
    "references",
    "executable",
    "userExecutable"
];
MethodNode.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(276, 0);
MethodNode.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(278, 0);
MethodNode.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(277, 0);
MethodNode.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15077, 0);
MethodNode.schema.dataTypeNodeId = MethodNode.dataTypeNodeId;
MethodNode.schema.encodingDefaultBinary = MethodNode.encodingDefaultBinary;
MethodNode.schema.encodingDefaultXml = MethodNode.encodingDefaultXml;
MethodNode.schema.encodingDefaultJson = MethodNode.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(MethodNode.dataTypeNodeId, "MethodNode", MethodNode);
// --------------------------------------------------------------------------------------------
const schemaModelChangeStructureDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ModelChangeStructureDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "affected",
            fieldType: "NodeId",
        },
        {
            name: "affectedType",
            fieldType: "NodeId",
        },
        {
            name: "verb",
            fieldType: "Byte",
        },
    ]
});
class ModelChangeStructureDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.affected = new node_opcua_nodeid_1.NodeId(null);
            this.affectedType = new node_opcua_nodeid_1.NodeId(null);
            this.verb = 0;
            return;
        }
        const schema = ModelChangeStructureDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.affected = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.affected);
        this.affectedType = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.affectedType);
        this.verb = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.verb);
    }
    static get schema() { return schemaModelChangeStructureDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.affected, stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.affectedType, stream);
        (0, node_opcua_basic_types_1.encodeByte)(this.verb, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.affected = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.affected);
        this.affectedType = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.affectedType);
        this.verb = (0, node_opcua_basic_types_1.decodeByte)(stream, this.verb);
    }
    get schema() { return schemaModelChangeStructureDataType; }
}
exports.ModelChangeStructureDataType = ModelChangeStructureDataType;
ModelChangeStructureDataType.possibleFields = [
    "affected",
    "affectedType",
    "verb"
];
ModelChangeStructureDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(877, 0);
ModelChangeStructureDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(879, 0);
ModelChangeStructureDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(878, 0);
ModelChangeStructureDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15373, 0);
ModelChangeStructureDataType.schema.dataTypeNodeId = ModelChangeStructureDataType.dataTypeNodeId;
ModelChangeStructureDataType.schema.encodingDefaultBinary = ModelChangeStructureDataType.encodingDefaultBinary;
ModelChangeStructureDataType.schema.encodingDefaultXml = ModelChangeStructureDataType.encodingDefaultXml;
ModelChangeStructureDataType.schema.encodingDefaultJson = ModelChangeStructureDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ModelChangeStructureDataType.dataTypeNodeId, "ModelChangeStructureDataType", ModelChangeStructureDataType);
// --------------------------------------------------------------------------------------------
const schemaMonitoredItemModifyRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "MonitoredItemModifyRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "monitoredItemId",
            fieldType: "UInt32",
        },
        {
            name: "requestedParameters",
            fieldType: "MonitoringParameters",
        },
    ]
});
class MonitoredItemModifyRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.monitoredItemId = 0;
            this.requestedParameters = new MonitoringParameters(null);
            return;
        }
        const schema = MonitoredItemModifyRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.monitoredItemId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.monitoredItemId);
        this.requestedParameters = new MonitoringParameters(options.requestedParameters);
    }
    static get schema() { return schemaMonitoredItemModifyRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.monitoredItemId, stream);
        this.requestedParameters.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.monitoredItemId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.monitoredItemId);
        this.requestedParameters.decode(stream);
    }
    get schema() { return schemaMonitoredItemModifyRequest; }
}
exports.MonitoredItemModifyRequest = MonitoredItemModifyRequest;
MonitoredItemModifyRequest.possibleFields = [
    "monitoredItemId",
    "requestedParameters"
];
MonitoredItemModifyRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(755, 0);
MonitoredItemModifyRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(757, 0);
MonitoredItemModifyRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(756, 0);
MonitoredItemModifyRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15325, 0);
MonitoredItemModifyRequest.schema.dataTypeNodeId = MonitoredItemModifyRequest.dataTypeNodeId;
MonitoredItemModifyRequest.schema.encodingDefaultBinary = MonitoredItemModifyRequest.encodingDefaultBinary;
MonitoredItemModifyRequest.schema.encodingDefaultXml = MonitoredItemModifyRequest.encodingDefaultXml;
MonitoredItemModifyRequest.schema.encodingDefaultJson = MonitoredItemModifyRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(MonitoredItemModifyRequest.dataTypeNodeId, "MonitoredItemModifyRequest", MonitoredItemModifyRequest);
// --------------------------------------------------------------------------------------------
const schemaModifyMonitoredItemsRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ModifyMonitoredItemsRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "subscriptionId",
            fieldType: "UInt32",
        },
        {
            name: "timestampsToReturn",
            fieldType: "TimestampsToReturn",
        },
        {
            name: "itemsToModify",
            fieldType: "MonitoredItemModifyRequest",
            isArray: true
        },
    ]
});
class ModifyMonitoredItemsRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.subscriptionId = 0;
            this.timestampsToReturn = 0;
            this.itemsToModify = null; /* null array */
            return;
        }
        const schema = ModifyMonitoredItemsRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.subscriptionId = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.subscriptionId);
        this.timestampsToReturn = this.setTimestampsToReturn((0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.timestampsToReturn));
        this.itemsToModify = []; // should default
        if (options.itemsToModify) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.itemsToModify));
            this.itemsToModify = options.itemsToModify.map((e) => new MonitoredItemModifyRequest(e));
        }
    }
    static get schema() { return schemaModifyMonitoredItemsRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.subscriptionId, stream);
        (0, node_opcua_data_value_1.encodeTimestampsToReturn)(this.timestampsToReturn, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.itemsToModify, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.subscriptionId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.subscriptionId);
        this.timestampsToReturn = (0, node_opcua_data_value_1.decodeTimestampsToReturn)(stream, this.timestampsToReturn);
        this.itemsToModify = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new MonitoredItemModifyRequest(null);
            obj.decode(stream1);
            return obj;
        });
    }
    // Define Enumeration setters
    setTimestampsToReturn(value) {
        const coercedValue = node_opcua_data_value_1._enumerationTimestampsToReturn.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to TimestampsToReturn :" + value);
        }
        this.timestampsToReturn = coercedValue.value;
        return this.timestampsToReturn;
    }
    get schema() { return schemaModifyMonitoredItemsRequest; }
}
exports.ModifyMonitoredItemsRequest = ModifyMonitoredItemsRequest;
ModifyMonitoredItemsRequest.possibleFields = [
    "requestHeader",
    "subscriptionId",
    "timestampsToReturn",
    "itemsToModify"
];
ModifyMonitoredItemsRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(761, 0);
ModifyMonitoredItemsRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(763, 0);
ModifyMonitoredItemsRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(762, 0);
ModifyMonitoredItemsRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15327, 0);
ModifyMonitoredItemsRequest.schema.dataTypeNodeId = ModifyMonitoredItemsRequest.dataTypeNodeId;
ModifyMonitoredItemsRequest.schema.encodingDefaultBinary = ModifyMonitoredItemsRequest.encodingDefaultBinary;
ModifyMonitoredItemsRequest.schema.encodingDefaultXml = ModifyMonitoredItemsRequest.encodingDefaultXml;
ModifyMonitoredItemsRequest.schema.encodingDefaultJson = ModifyMonitoredItemsRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ModifyMonitoredItemsRequest.dataTypeNodeId, "ModifyMonitoredItemsRequest", ModifyMonitoredItemsRequest);
// --------------------------------------------------------------------------------------------
const schemaMonitoredItemModifyResult = (0, node_opcua_factory_1.buildStructuredType)({
    name: "MonitoredItemModifyResult",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "statusCode",
            fieldType: "StatusCode",
        },
        {
            name: "revisedSamplingInterval",
            fieldType: "Double",
        },
        {
            name: "revisedQueueSize",
            fieldType: "UInt32",
        },
        {
            name: "filterResult",
            fieldType: "ExtensionObject",
        },
    ]
});
class MonitoredItemModifyResult extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.statusCode = node_opcua_status_code_1.StatusCodes.Good;
            this.revisedSamplingInterval = 0;
            this.revisedQueueSize = 0;
            this.filterResult = null;
            return;
        }
        const schema = MonitoredItemModifyResult.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.statusCode = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.statusCode);
        this.revisedSamplingInterval = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.revisedSamplingInterval);
        this.revisedQueueSize = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.revisedQueueSize);
        this.filterResult = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.filterResult);
    }
    static get schema() { return schemaMonitoredItemModifyResult; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_status_code_1.encodeStatusCode)(this.statusCode, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.revisedSamplingInterval, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.revisedQueueSize, stream);
        (0, node_opcua_extension_object_1.encodeExtensionObject)(this.filterResult, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.statusCode = (0, node_opcua_status_code_1.decodeStatusCode)(stream, this.statusCode);
        this.revisedSamplingInterval = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.revisedSamplingInterval);
        this.revisedQueueSize = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.revisedQueueSize);
        this.filterResult = (0, node_opcua_extension_object_1.decodeExtensionObject)(stream, this.filterResult);
    }
    get schema() { return schemaMonitoredItemModifyResult; }
}
exports.MonitoredItemModifyResult = MonitoredItemModifyResult;
MonitoredItemModifyResult.possibleFields = [
    "statusCode",
    "revisedSamplingInterval",
    "revisedQueueSize",
    "filterResult"
];
MonitoredItemModifyResult.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(758, 0);
MonitoredItemModifyResult.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(760, 0);
MonitoredItemModifyResult.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(759, 0);
MonitoredItemModifyResult.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15326, 0);
MonitoredItemModifyResult.schema.dataTypeNodeId = MonitoredItemModifyResult.dataTypeNodeId;
MonitoredItemModifyResult.schema.encodingDefaultBinary = MonitoredItemModifyResult.encodingDefaultBinary;
MonitoredItemModifyResult.schema.encodingDefaultXml = MonitoredItemModifyResult.encodingDefaultXml;
MonitoredItemModifyResult.schema.encodingDefaultJson = MonitoredItemModifyResult.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(MonitoredItemModifyResult.dataTypeNodeId, "MonitoredItemModifyResult", MonitoredItemModifyResult);
// --------------------------------------------------------------------------------------------
const schemaModifyMonitoredItemsResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ModifyMonitoredItemsResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "results",
            fieldType: "MonitoredItemModifyResult",
            isArray: true
        },
        {
            name: "diagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class ModifyMonitoredItemsResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.results = null; /* null array */
            this.diagnosticInfos = [];
            return;
        }
        const schema = ModifyMonitoredItemsResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.results = []; // should default
        if (options.results) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.results));
            this.results = options.results.map((e) => new MonitoredItemModifyResult(e));
        }
        this.diagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.diagnosticInfos);
    }
    static get schema() { return schemaModifyMonitoredItemsResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.results, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.diagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.results = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new MonitoredItemModifyResult(null);
            obj.decode(stream1);
            return obj;
        });
        this.diagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaModifyMonitoredItemsResponse; }
}
exports.ModifyMonitoredItemsResponse = ModifyMonitoredItemsResponse;
ModifyMonitoredItemsResponse.possibleFields = [
    "responseHeader",
    "results",
    "diagnosticInfos"
];
ModifyMonitoredItemsResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(764, 0);
ModifyMonitoredItemsResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(766, 0);
ModifyMonitoredItemsResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(765, 0);
ModifyMonitoredItemsResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15328, 0);
ModifyMonitoredItemsResponse.schema.dataTypeNodeId = ModifyMonitoredItemsResponse.dataTypeNodeId;
ModifyMonitoredItemsResponse.schema.encodingDefaultBinary = ModifyMonitoredItemsResponse.encodingDefaultBinary;
ModifyMonitoredItemsResponse.schema.encodingDefaultXml = ModifyMonitoredItemsResponse.encodingDefaultXml;
ModifyMonitoredItemsResponse.schema.encodingDefaultJson = ModifyMonitoredItemsResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ModifyMonitoredItemsResponse.dataTypeNodeId, "ModifyMonitoredItemsResponse", ModifyMonitoredItemsResponse);
// --------------------------------------------------------------------------------------------
const schemaModifySubscriptionRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ModifySubscriptionRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "subscriptionId",
            fieldType: "UInt32",
        },
        {
            name: "requestedPublishingInterval",
            fieldType: "Double",
        },
        {
            name: "requestedLifetimeCount",
            fieldType: "UInt32",
        },
        {
            name: "requestedMaxKeepAliveCount",
            fieldType: "UInt32",
        },
        {
            name: "maxNotificationsPerPublish",
            fieldType: "UInt32",
        },
        {
            name: "priority",
            fieldType: "Byte",
        },
    ]
});
class ModifySubscriptionRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.subscriptionId = 0;
            this.requestedPublishingInterval = 0;
            this.requestedLifetimeCount = 0;
            this.requestedMaxKeepAliveCount = 0;
            this.maxNotificationsPerPublish = 0;
            this.priority = 0;
            return;
        }
        const schema = ModifySubscriptionRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.subscriptionId = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.subscriptionId);
        this.requestedPublishingInterval = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.requestedPublishingInterval);
        this.requestedLifetimeCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.requestedLifetimeCount);
        this.requestedMaxKeepAliveCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.requestedMaxKeepAliveCount);
        this.maxNotificationsPerPublish = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.maxNotificationsPerPublish);
        this.priority = (0, node_opcua_factory_1.initialize_field)(schema.fields[6], options === null || options === void 0 ? void 0 : options.priority);
    }
    static get schema() { return schemaModifySubscriptionRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.subscriptionId, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.requestedPublishingInterval, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.requestedLifetimeCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.requestedMaxKeepAliveCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.maxNotificationsPerPublish, stream);
        (0, node_opcua_basic_types_1.encodeByte)(this.priority, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.subscriptionId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.subscriptionId);
        this.requestedPublishingInterval = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.requestedPublishingInterval);
        this.requestedLifetimeCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.requestedLifetimeCount);
        this.requestedMaxKeepAliveCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.requestedMaxKeepAliveCount);
        this.maxNotificationsPerPublish = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.maxNotificationsPerPublish);
        this.priority = (0, node_opcua_basic_types_1.decodeByte)(stream, this.priority);
    }
    get schema() { return schemaModifySubscriptionRequest; }
}
exports.ModifySubscriptionRequest = ModifySubscriptionRequest;
ModifySubscriptionRequest.possibleFields = [
    "requestHeader",
    "subscriptionId",
    "requestedPublishingInterval",
    "requestedLifetimeCount",
    "requestedMaxKeepAliveCount",
    "maxNotificationsPerPublish",
    "priority"
];
ModifySubscriptionRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(791, 0);
ModifySubscriptionRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(793, 0);
ModifySubscriptionRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(792, 0);
ModifySubscriptionRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15339, 0);
ModifySubscriptionRequest.schema.dataTypeNodeId = ModifySubscriptionRequest.dataTypeNodeId;
ModifySubscriptionRequest.schema.encodingDefaultBinary = ModifySubscriptionRequest.encodingDefaultBinary;
ModifySubscriptionRequest.schema.encodingDefaultXml = ModifySubscriptionRequest.encodingDefaultXml;
ModifySubscriptionRequest.schema.encodingDefaultJson = ModifySubscriptionRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ModifySubscriptionRequest.dataTypeNodeId, "ModifySubscriptionRequest", ModifySubscriptionRequest);
// --------------------------------------------------------------------------------------------
const schemaModifySubscriptionResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ModifySubscriptionResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "revisedPublishingInterval",
            fieldType: "Double",
        },
        {
            name: "revisedLifetimeCount",
            fieldType: "UInt32",
        },
        {
            name: "revisedMaxKeepAliveCount",
            fieldType: "UInt32",
        },
    ]
});
class ModifySubscriptionResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.revisedPublishingInterval = 0;
            this.revisedLifetimeCount = 0;
            this.revisedMaxKeepAliveCount = 0;
            return;
        }
        const schema = ModifySubscriptionResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.revisedPublishingInterval = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.revisedPublishingInterval);
        this.revisedLifetimeCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.revisedLifetimeCount);
        this.revisedMaxKeepAliveCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.revisedMaxKeepAliveCount);
    }
    static get schema() { return schemaModifySubscriptionResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.revisedPublishingInterval, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.revisedLifetimeCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.revisedMaxKeepAliveCount, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.revisedPublishingInterval = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.revisedPublishingInterval);
        this.revisedLifetimeCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.revisedLifetimeCount);
        this.revisedMaxKeepAliveCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.revisedMaxKeepAliveCount);
    }
    get schema() { return schemaModifySubscriptionResponse; }
}
exports.ModifySubscriptionResponse = ModifySubscriptionResponse;
ModifySubscriptionResponse.possibleFields = [
    "responseHeader",
    "revisedPublishingInterval",
    "revisedLifetimeCount",
    "revisedMaxKeepAliveCount"
];
ModifySubscriptionResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(794, 0);
ModifySubscriptionResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(796, 0);
ModifySubscriptionResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(795, 0);
ModifySubscriptionResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15340, 0);
ModifySubscriptionResponse.schema.dataTypeNodeId = ModifySubscriptionResponse.dataTypeNodeId;
ModifySubscriptionResponse.schema.encodingDefaultBinary = ModifySubscriptionResponse.encodingDefaultBinary;
ModifySubscriptionResponse.schema.encodingDefaultXml = ModifySubscriptionResponse.encodingDefaultXml;
ModifySubscriptionResponse.schema.encodingDefaultJson = ModifySubscriptionResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ModifySubscriptionResponse.dataTypeNodeId, "ModifySubscriptionResponse", ModifySubscriptionResponse);
// --------------------------------------------------------------------------------------------
const schemaNetworkAddressDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "NetworkAddressDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "networkInterface",
            fieldType: "UAString",
        },
    ]
});
class NetworkAddressDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.networkInterface = null;
            return;
        }
        const schema = NetworkAddressDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.networkInterface = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.networkInterface);
    }
    static get schema() { return schemaNetworkAddressDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.networkInterface, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.networkInterface = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.networkInterface);
    }
    get schema() { return schemaNetworkAddressDataType; }
}
exports.NetworkAddressDataType = NetworkAddressDataType;
NetworkAddressDataType.possibleFields = [
    "networkInterface"
];
NetworkAddressDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15502, 0);
NetworkAddressDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(21151, 0);
NetworkAddressDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(21175, 0);
NetworkAddressDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(21199, 0);
NetworkAddressDataType.schema.dataTypeNodeId = NetworkAddressDataType.dataTypeNodeId;
NetworkAddressDataType.schema.encodingDefaultBinary = NetworkAddressDataType.encodingDefaultBinary;
NetworkAddressDataType.schema.encodingDefaultXml = NetworkAddressDataType.encodingDefaultXml;
NetworkAddressDataType.schema.encodingDefaultJson = NetworkAddressDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(NetworkAddressDataType.dataTypeNodeId, "NetworkAddressDataType", NetworkAddressDataType);
// --------------------------------------------------------------------------------------------
const schemaNetworkAddressUrlDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "NetworkAddressUrlDataType",
    baseType: "NetworkAddressDataType",
    fields: [
        {
            name: "url",
            fieldType: "UAString",
        },
    ]
});
class NetworkAddressUrlDataType extends NetworkAddressDataType {
    constructor(options) {
        super(options);
        if (options === null) {
            this.url = null;
            return;
        }
        const schema = NetworkAddressUrlDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.url = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.url);
    }
    static get schema() { return schemaNetworkAddressUrlDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.url, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.url = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.url);
    }
    get schema() { return schemaNetworkAddressUrlDataType; }
}
exports.NetworkAddressUrlDataType = NetworkAddressUrlDataType;
NetworkAddressUrlDataType.possibleFields = [
    "url"
];
NetworkAddressUrlDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15510, 0);
NetworkAddressUrlDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(21152, 0);
NetworkAddressUrlDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(21176, 0);
NetworkAddressUrlDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(21200, 0);
NetworkAddressUrlDataType.schema.dataTypeNodeId = NetworkAddressUrlDataType.dataTypeNodeId;
NetworkAddressUrlDataType.schema.encodingDefaultBinary = NetworkAddressUrlDataType.encodingDefaultBinary;
NetworkAddressUrlDataType.schema.encodingDefaultXml = NetworkAddressUrlDataType.encodingDefaultXml;
NetworkAddressUrlDataType.schema.encodingDefaultJson = NetworkAddressUrlDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(NetworkAddressUrlDataType.dataTypeNodeId, "NetworkAddressUrlDataType", NetworkAddressUrlDataType);
// --------------------------------------------------------------------------------------------
const schemaNetworkGroupDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "NetworkGroupDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "serverUri",
            fieldType: "UAString",
        },
        {
            name: "networkPaths",
            fieldType: "EndpointUrlListDataType",
            isArray: true
        },
    ]
});
class NetworkGroupDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.serverUri = null;
            this.networkPaths = null; /* null array */
            return;
        }
        const schema = NetworkGroupDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.serverUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.serverUri);
        this.networkPaths = []; // should default
        if (options.networkPaths) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.networkPaths));
            this.networkPaths = options.networkPaths.map((e) => new EndpointUrlListDataType(e));
        }
    }
    static get schema() { return schemaNetworkGroupDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.serverUri, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.networkPaths, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.serverUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.serverUri);
        this.networkPaths = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new EndpointUrlListDataType(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaNetworkGroupDataType; }
}
exports.NetworkGroupDataType = NetworkGroupDataType;
NetworkGroupDataType.possibleFields = [
    "serverUri",
    "networkPaths"
];
NetworkGroupDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(11944, 0);
NetworkGroupDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(11958, 0);
NetworkGroupDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(11950, 0);
NetworkGroupDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15364, 0);
NetworkGroupDataType.schema.dataTypeNodeId = NetworkGroupDataType.dataTypeNodeId;
NetworkGroupDataType.schema.encodingDefaultBinary = NetworkGroupDataType.encodingDefaultBinary;
NetworkGroupDataType.schema.encodingDefaultXml = NetworkGroupDataType.encodingDefaultXml;
NetworkGroupDataType.schema.encodingDefaultJson = NetworkGroupDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(NetworkGroupDataType.dataTypeNodeId, "NetworkGroupDataType", NetworkGroupDataType);
// --------------------------------------------------------------------------------------------
const schemaNodeReference = (0, node_opcua_factory_1.buildStructuredType)({
    name: "NodeReference",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "nodeId",
            fieldType: "NodeId",
        },
        {
            name: "referenceTypeId",
            fieldType: "NodeId",
        },
        {
            name: "isForward",
            fieldType: "UABoolean",
        },
        {
            name: "referencedNodeIds",
            fieldType: "NodeId",
            isArray: true
        },
    ]
});
class NodeReference extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.nodeId = new node_opcua_nodeid_1.NodeId(null);
            this.referenceTypeId = new node_opcua_nodeid_1.NodeId(null);
            this.isForward = false;
            this.referencedNodeIds = [];
            return;
        }
        const schema = NodeReference.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.nodeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.nodeId);
        this.referenceTypeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.referenceTypeId);
        this.isForward = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.isForward);
        this.referencedNodeIds = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[3], options === null || options === void 0 ? void 0 : options.referencedNodeIds);
    }
    static get schema() { return schemaNodeReference; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.nodeId, stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.referenceTypeId, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.isForward, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.referencedNodeIds, stream, node_opcua_basic_types_1.encodeNodeId);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.nodeId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.nodeId);
        this.referenceTypeId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.referenceTypeId);
        this.isForward = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.isForward);
        this.referencedNodeIds = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeNodeId);
    }
    get schema() { return schemaNodeReference; }
}
exports.NodeReference = NodeReference;
NodeReference.possibleFields = [
    "nodeId",
    "referenceTypeId",
    "isForward",
    "referencedNodeIds"
];
NodeReference.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(580, 0);
NodeReference.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(582, 0);
NodeReference.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(581, 0);
NodeReference.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15203, 0);
NodeReference.schema.dataTypeNodeId = NodeReference.dataTypeNodeId;
NodeReference.schema.encodingDefaultBinary = NodeReference.encodingDefaultBinary;
NodeReference.schema.encodingDefaultXml = NodeReference.encodingDefaultXml;
NodeReference.schema.encodingDefaultJson = NodeReference.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(NodeReference.dataTypeNodeId, "NodeReference", NodeReference);
// --------------------------------------------------------------------------------------------
const schemaQueryDataDescription = (0, node_opcua_factory_1.buildStructuredType)({
    name: "QueryDataDescription",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "relativePath",
            fieldType: "RelativePath",
        },
        {
            name: "attributeId",
            fieldType: "UInt32",
        },
        {
            name: "indexRange",
            fieldType: "NumericRange",
        },
    ]
});
class QueryDataDescription extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.relativePath = new RelativePath(null);
            this.attributeId = 0;
            this.indexRange = new node_opcua_numeric_range_1.NumericRange(null);
            return;
        }
        const schema = QueryDataDescription.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.relativePath = new RelativePath(options.relativePath);
        this.attributeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.attributeId);
        this.indexRange = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.indexRange);
    }
    static get schema() { return schemaQueryDataDescription; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.relativePath.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.attributeId, stream);
        (0, node_opcua_numeric_range_1.encodeNumericRange)(this.indexRange, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.relativePath.decode(stream);
        this.attributeId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.attributeId);
        this.indexRange = (0, node_opcua_numeric_range_1.decodeNumericRange)(stream, this.indexRange);
    }
    get schema() { return schemaQueryDataDescription; }
}
exports.QueryDataDescription = QueryDataDescription;
QueryDataDescription.possibleFields = [
    "relativePath",
    "attributeId",
    "indexRange"
];
QueryDataDescription.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(570, 0);
QueryDataDescription.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(572, 0);
QueryDataDescription.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(571, 0);
QueryDataDescription.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15200, 0);
QueryDataDescription.schema.dataTypeNodeId = QueryDataDescription.dataTypeNodeId;
QueryDataDescription.schema.encodingDefaultBinary = QueryDataDescription.encodingDefaultBinary;
QueryDataDescription.schema.encodingDefaultXml = QueryDataDescription.encodingDefaultXml;
QueryDataDescription.schema.encodingDefaultJson = QueryDataDescription.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(QueryDataDescription.dataTypeNodeId, "QueryDataDescription", QueryDataDescription);
// --------------------------------------------------------------------------------------------
const schemaNodeTypeDescription = (0, node_opcua_factory_1.buildStructuredType)({
    name: "NodeTypeDescription",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "typeDefinitionNode",
            fieldType: "ExpandedNodeId",
        },
        {
            name: "includeSubTypes",
            fieldType: "UABoolean",
        },
        {
            name: "dataToReturn",
            fieldType: "QueryDataDescription",
            isArray: true
        },
    ]
});
class NodeTypeDescription extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.typeDefinitionNode = new node_opcua_nodeid_1.ExpandedNodeId(null);
            this.includeSubTypes = false;
            this.dataToReturn = null; /* null array */
            return;
        }
        const schema = NodeTypeDescription.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.typeDefinitionNode = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.typeDefinitionNode);
        this.includeSubTypes = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.includeSubTypes);
        this.dataToReturn = []; // should default
        if (options.dataToReturn) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.dataToReturn));
            this.dataToReturn = options.dataToReturn.map((e) => new QueryDataDescription(e));
        }
    }
    static get schema() { return schemaNodeTypeDescription; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeExpandedNodeId)(this.typeDefinitionNode, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.includeSubTypes, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.dataToReturn, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.typeDefinitionNode = (0, node_opcua_basic_types_1.decodeExpandedNodeId)(stream, this.typeDefinitionNode);
        this.includeSubTypes = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.includeSubTypes);
        this.dataToReturn = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new QueryDataDescription(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaNodeTypeDescription; }
}
exports.NodeTypeDescription = NodeTypeDescription;
NodeTypeDescription.possibleFields = [
    "typeDefinitionNode",
    "includeSubTypes",
    "dataToReturn"
];
NodeTypeDescription.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(573, 0);
NodeTypeDescription.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(575, 0);
NodeTypeDescription.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(574, 0);
NodeTypeDescription.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15201, 0);
NodeTypeDescription.schema.dataTypeNodeId = NodeTypeDescription.dataTypeNodeId;
NodeTypeDescription.schema.encodingDefaultBinary = NodeTypeDescription.encodingDefaultBinary;
NodeTypeDescription.schema.encodingDefaultXml = NodeTypeDescription.encodingDefaultXml;
NodeTypeDescription.schema.encodingDefaultJson = NodeTypeDescription.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(NodeTypeDescription.dataTypeNodeId, "NodeTypeDescription", NodeTypeDescription);
// --------------------------------------------------------------------------------------------
const schemaNotificationMessage = (0, node_opcua_factory_1.buildStructuredType)({
    name: "NotificationMessage",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "sequenceNumber",
            fieldType: "UInt32",
        },
        {
            name: "publishTime",
            fieldType: "DateTime",
        },
        {
            name: "notificationData",
            fieldType: "ExtensionObject",
            isArray: true
        },
    ]
});
class NotificationMessage extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.sequenceNumber = 0;
            this.publishTime = new Date();
            this.notificationData = [];
            return;
        }
        const schema = NotificationMessage.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.sequenceNumber = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.sequenceNumber);
        this.publishTime = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.publishTime);
        this.notificationData = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.notificationData);
    }
    static get schema() { return schemaNotificationMessage; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.sequenceNumber, stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.publishTime, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.notificationData, stream, node_opcua_extension_object_1.encodeExtensionObject);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.sequenceNumber = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.sequenceNumber);
        this.publishTime = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.publishTime);
        this.notificationData = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_extension_object_1.decodeExtensionObject);
    }
    get schema() { return schemaNotificationMessage; }
}
exports.NotificationMessage = NotificationMessage;
NotificationMessage.possibleFields = [
    "sequenceNumber",
    "publishTime",
    "notificationData"
];
NotificationMessage.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(803, 0);
NotificationMessage.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(805, 0);
NotificationMessage.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(804, 0);
NotificationMessage.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15343, 0);
NotificationMessage.schema.dataTypeNodeId = NotificationMessage.dataTypeNodeId;
NotificationMessage.schema.encodingDefaultBinary = NotificationMessage.encodingDefaultBinary;
NotificationMessage.schema.encodingDefaultXml = NotificationMessage.encodingDefaultXml;
NotificationMessage.schema.encodingDefaultJson = NotificationMessage.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(NotificationMessage.dataTypeNodeId, "NotificationMessage", NotificationMessage);
// --------------------------------------------------------------------------------------------
const schemaObjectAttributes = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ObjectAttributes",
    baseType: "NodeAttributes",
    fields: [
        {
            name: "eventNotifier",
            fieldType: "Byte",
        },
    ]
});
class ObjectAttributes extends NodeAttributes {
    constructor(options) {
        super(options);
        if (options === null) {
            this.eventNotifier = 0;
            return;
        }
        const schema = ObjectAttributes.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.eventNotifier = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.eventNotifier);
    }
    static get schema() { return schemaObjectAttributes; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeByte)(this.eventNotifier, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.eventNotifier = (0, node_opcua_basic_types_1.decodeByte)(stream, this.eventNotifier);
    }
    get schema() { return schemaObjectAttributes; }
}
exports.ObjectAttributes = ObjectAttributes;
ObjectAttributes.possibleFields = [
    "eventNotifier"
];
ObjectAttributes.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(352, 0);
ObjectAttributes.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(354, 0);
ObjectAttributes.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(353, 0);
ObjectAttributes.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15152, 0);
ObjectAttributes.schema.dataTypeNodeId = ObjectAttributes.dataTypeNodeId;
ObjectAttributes.schema.encodingDefaultBinary = ObjectAttributes.encodingDefaultBinary;
ObjectAttributes.schema.encodingDefaultXml = ObjectAttributes.encodingDefaultXml;
ObjectAttributes.schema.encodingDefaultJson = ObjectAttributes.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ObjectAttributes.dataTypeNodeId, "ObjectAttributes", ObjectAttributes);
// --------------------------------------------------------------------------------------------
const schemaObjectNode = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ObjectNode",
    baseType: "InstanceNode",
    fields: [
        {
            name: "rolePermissions",
            fieldType: "RolePermissionType",
            isArray: true
        },
        {
            name: "userRolePermissions",
            fieldType: "RolePermissionType",
            isArray: true
        },
        {
            name: "references",
            fieldType: "ReferenceNode",
            isArray: true
        },
        {
            name: "eventNotifier",
            fieldType: "Byte",
        },
    ]
});
class ObjectNode extends InstanceNode {
    constructor(options) {
        super(options);
        if (options === null) {
            this.rolePermissions = null; /* null array */
            this.userRolePermissions = null; /* null array */
            this.references = null; /* null array */
            this.eventNotifier = 0;
            return;
        }
        const schema = ObjectNode.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.rolePermissions = []; // should default
        if (options.rolePermissions) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.rolePermissions));
            this.rolePermissions = options.rolePermissions.map((e) => new RolePermissionType(e));
        }
        this.userRolePermissions = []; // should default
        if (options.userRolePermissions) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.userRolePermissions));
            this.userRolePermissions = options.userRolePermissions.map((e) => new RolePermissionType(e));
        }
        this.references = []; // should default
        if (options.references) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.references));
            this.references = options.references.map((e) => new ReferenceNode(e));
        }
        this.eventNotifier = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.eventNotifier);
    }
    static get schema() { return schemaObjectNode; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.rolePermissions, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.userRolePermissions, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.references, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeByte)(this.eventNotifier, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.rolePermissions = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new RolePermissionType(null);
            obj.decode(stream1);
            return obj;
        });
        this.userRolePermissions = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new RolePermissionType(null);
            obj.decode(stream1);
            return obj;
        });
        this.references = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new ReferenceNode(null);
            obj.decode(stream1);
            return obj;
        });
        this.eventNotifier = (0, node_opcua_basic_types_1.decodeByte)(stream, this.eventNotifier);
    }
    get schema() { return schemaObjectNode; }
}
exports.ObjectNode = ObjectNode;
ObjectNode.possibleFields = [
    "rolePermissions",
    "userRolePermissions",
    "references",
    "eventNotifier"
];
ObjectNode.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(261, 0);
ObjectNode.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(263, 0);
ObjectNode.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(262, 0);
ObjectNode.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15071, 0);
ObjectNode.schema.dataTypeNodeId = ObjectNode.dataTypeNodeId;
ObjectNode.schema.encodingDefaultBinary = ObjectNode.encodingDefaultBinary;
ObjectNode.schema.encodingDefaultXml = ObjectNode.encodingDefaultXml;
ObjectNode.schema.encodingDefaultJson = ObjectNode.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ObjectNode.dataTypeNodeId, "ObjectNode", ObjectNode);
// --------------------------------------------------------------------------------------------
const schemaObjectTypeAttributes = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ObjectTypeAttributes",
    baseType: "NodeAttributes",
    fields: [
        {
            name: "isAbstract",
            fieldType: "UABoolean",
        },
    ]
});
class ObjectTypeAttributes extends NodeAttributes {
    constructor(options) {
        super(options);
        if (options === null) {
            this.isAbstract = false;
            return;
        }
        const schema = ObjectTypeAttributes.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.isAbstract = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.isAbstract);
    }
    static get schema() { return schemaObjectTypeAttributes; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.isAbstract, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.isAbstract = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.isAbstract);
    }
    get schema() { return schemaObjectTypeAttributes; }
}
exports.ObjectTypeAttributes = ObjectTypeAttributes;
ObjectTypeAttributes.possibleFields = [
    "isAbstract"
];
ObjectTypeAttributes.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(361, 0);
ObjectTypeAttributes.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(363, 0);
ObjectTypeAttributes.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(362, 0);
ObjectTypeAttributes.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15158, 0);
ObjectTypeAttributes.schema.dataTypeNodeId = ObjectTypeAttributes.dataTypeNodeId;
ObjectTypeAttributes.schema.encodingDefaultBinary = ObjectTypeAttributes.encodingDefaultBinary;
ObjectTypeAttributes.schema.encodingDefaultXml = ObjectTypeAttributes.encodingDefaultXml;
ObjectTypeAttributes.schema.encodingDefaultJson = ObjectTypeAttributes.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ObjectTypeAttributes.dataTypeNodeId, "ObjectTypeAttributes", ObjectTypeAttributes);
// --------------------------------------------------------------------------------------------
const schemaObjectTypeNode = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ObjectTypeNode",
    baseType: "TypeNode",
    fields: [
        {
            name: "rolePermissions",
            fieldType: "RolePermissionType",
            isArray: true
        },
        {
            name: "userRolePermissions",
            fieldType: "RolePermissionType",
            isArray: true
        },
        {
            name: "references",
            fieldType: "ReferenceNode",
            isArray: true
        },
        {
            name: "isAbstract",
            fieldType: "UABoolean",
        },
    ]
});
class ObjectTypeNode extends TypeNode {
    constructor(options) {
        super(options);
        if (options === null) {
            this.rolePermissions = null; /* null array */
            this.userRolePermissions = null; /* null array */
            this.references = null; /* null array */
            this.isAbstract = false;
            return;
        }
        const schema = ObjectTypeNode.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.rolePermissions = []; // should default
        if (options.rolePermissions) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.rolePermissions));
            this.rolePermissions = options.rolePermissions.map((e) => new RolePermissionType(e));
        }
        this.userRolePermissions = []; // should default
        if (options.userRolePermissions) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.userRolePermissions));
            this.userRolePermissions = options.userRolePermissions.map((e) => new RolePermissionType(e));
        }
        this.references = []; // should default
        if (options.references) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.references));
            this.references = options.references.map((e) => new ReferenceNode(e));
        }
        this.isAbstract = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.isAbstract);
    }
    static get schema() { return schemaObjectTypeNode; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.rolePermissions, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.userRolePermissions, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.references, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.isAbstract, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.rolePermissions = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new RolePermissionType(null);
            obj.decode(stream1);
            return obj;
        });
        this.userRolePermissions = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new RolePermissionType(null);
            obj.decode(stream1);
            return obj;
        });
        this.references = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new ReferenceNode(null);
            obj.decode(stream1);
            return obj;
        });
        this.isAbstract = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.isAbstract);
    }
    get schema() { return schemaObjectTypeNode; }
}
exports.ObjectTypeNode = ObjectTypeNode;
ObjectTypeNode.possibleFields = [
    "rolePermissions",
    "userRolePermissions",
    "references",
    "isAbstract"
];
ObjectTypeNode.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(264, 0);
ObjectTypeNode.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(266, 0);
ObjectTypeNode.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(265, 0);
ObjectTypeNode.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15073, 0);
ObjectTypeNode.schema.dataTypeNodeId = ObjectTypeNode.dataTypeNodeId;
ObjectTypeNode.schema.encodingDefaultBinary = ObjectTypeNode.encodingDefaultBinary;
ObjectTypeNode.schema.encodingDefaultXml = ObjectTypeNode.encodingDefaultXml;
ObjectTypeNode.schema.encodingDefaultJson = ObjectTypeNode.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ObjectTypeNode.dataTypeNodeId, "ObjectTypeNode", ObjectTypeNode);
// --------------------------------------------------------------------------------------------
var SecurityTokenRequestType;
(function (SecurityTokenRequestType) {
    SecurityTokenRequestType[SecurityTokenRequestType["Issue"] = 0] = "Issue";
    SecurityTokenRequestType[SecurityTokenRequestType["Renew"] = 1] = "Renew";
    SecurityTokenRequestType[SecurityTokenRequestType["Invalid"] = 4294967295] = "Invalid";
})(SecurityTokenRequestType = exports.SecurityTokenRequestType || (exports.SecurityTokenRequestType = {}));
const schemaSecurityTokenRequestType = {
    enumValues: SecurityTokenRequestType,
    flaggable: false,
    minValue: 0,
    maxValue: 1,
    name: "SecurityTokenRequestType"
};
function decodeSecurityTokenRequestType(stream, _value) {
    let value = stream.readUInt32();
    value = (value < schemaSecurityTokenRequestType.minValue || value > schemaSecurityTokenRequestType.maxValue) ? SecurityTokenRequestType.Invalid : value;
    return value;
}
function encodeSecurityTokenRequestType(value, stream) {
    stream.writeUInt32(value);
}
exports._enumerationSecurityTokenRequestType = (0, node_opcua_factory_1.registerEnumeration)(schemaSecurityTokenRequestType);
(0, node_opcua_assert_1.assert)(exports._enumerationSecurityTokenRequestType.isFlaggable === false);
// --------------------------------------------------------------------------------------------
const schemaOpenSecureChannelRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "OpenSecureChannelRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "clientProtocolVersion",
            fieldType: "UInt32",
        },
        {
            name: "requestType",
            fieldType: "SecurityTokenRequestType",
        },
        {
            name: "securityMode",
            fieldType: "MessageSecurityMode",
        },
        {
            name: "clientNonce",
            fieldType: "ByteString",
        },
        {
            name: "requestedLifetime",
            fieldType: "UInt32",
        },
    ]
});
class OpenSecureChannelRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.clientProtocolVersion = 0;
            this.requestType = 0;
            this.securityMode = 0;
            this.clientNonce = Buffer.alloc(0);
            this.requestedLifetime = 0;
            return;
        }
        const schema = OpenSecureChannelRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.clientProtocolVersion = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.clientProtocolVersion);
        this.requestType = this.setRequestType((0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.requestType));
        this.securityMode = this.setSecurityMode((0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.securityMode));
        this.clientNonce = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.clientNonce);
        this.requestedLifetime = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.requestedLifetime);
    }
    static get schema() { return schemaOpenSecureChannelRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.clientProtocolVersion, stream);
        encodeSecurityTokenRequestType(this.requestType, stream);
        encodeMessageSecurityMode(this.securityMode, stream);
        (0, node_opcua_basic_types_1.encodeByteString)(this.clientNonce, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.requestedLifetime, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.clientProtocolVersion = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.clientProtocolVersion);
        this.requestType = decodeSecurityTokenRequestType(stream, this.requestType);
        this.securityMode = decodeMessageSecurityMode(stream, this.securityMode);
        this.clientNonce = (0, node_opcua_basic_types_1.decodeByteString)(stream, this.clientNonce);
        this.requestedLifetime = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.requestedLifetime);
    }
    // Define Enumeration setters
    setRequestType(value) {
        const coercedValue = exports._enumerationSecurityTokenRequestType.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to SecurityTokenRequestType :" + value);
        }
        this.requestType = coercedValue.value;
        return this.requestType;
    }
    setSecurityMode(value) {
        const coercedValue = exports._enumerationMessageSecurityMode.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to MessageSecurityMode :" + value);
        }
        this.securityMode = coercedValue.value;
        return this.securityMode;
    }
    get schema() { return schemaOpenSecureChannelRequest; }
}
exports.OpenSecureChannelRequest = OpenSecureChannelRequest;
OpenSecureChannelRequest.possibleFields = [
    "requestHeader",
    "clientProtocolVersion",
    "requestType",
    "securityMode",
    "clientNonce",
    "requestedLifetime"
];
OpenSecureChannelRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(444, 0);
OpenSecureChannelRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(446, 0);
OpenSecureChannelRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(445, 0);
OpenSecureChannelRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15132, 0);
OpenSecureChannelRequest.schema.dataTypeNodeId = OpenSecureChannelRequest.dataTypeNodeId;
OpenSecureChannelRequest.schema.encodingDefaultBinary = OpenSecureChannelRequest.encodingDefaultBinary;
OpenSecureChannelRequest.schema.encodingDefaultXml = OpenSecureChannelRequest.encodingDefaultXml;
OpenSecureChannelRequest.schema.encodingDefaultJson = OpenSecureChannelRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(OpenSecureChannelRequest.dataTypeNodeId, "OpenSecureChannelRequest", OpenSecureChannelRequest);
// --------------------------------------------------------------------------------------------
const schemaOpenSecureChannelResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "OpenSecureChannelResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "serverProtocolVersion",
            fieldType: "UInt32",
        },
        {
            name: "securityToken",
            fieldType: "ChannelSecurityToken",
        },
        {
            name: "serverNonce",
            fieldType: "ByteString",
        },
    ]
});
class OpenSecureChannelResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.serverProtocolVersion = 0;
            this.securityToken = new ChannelSecurityToken(null);
            this.serverNonce = Buffer.alloc(0);
            return;
        }
        const schema = OpenSecureChannelResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.serverProtocolVersion = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.serverProtocolVersion);
        this.securityToken = new ChannelSecurityToken(options.securityToken);
        this.serverNonce = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.serverNonce);
    }
    static get schema() { return schemaOpenSecureChannelResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.serverProtocolVersion, stream);
        this.securityToken.encode(stream);
        (0, node_opcua_basic_types_1.encodeByteString)(this.serverNonce, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.serverProtocolVersion = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.serverProtocolVersion);
        this.securityToken.decode(stream);
        this.serverNonce = (0, node_opcua_basic_types_1.decodeByteString)(stream, this.serverNonce);
    }
    get schema() { return schemaOpenSecureChannelResponse; }
}
exports.OpenSecureChannelResponse = OpenSecureChannelResponse;
OpenSecureChannelResponse.possibleFields = [
    "responseHeader",
    "serverProtocolVersion",
    "securityToken",
    "serverNonce"
];
OpenSecureChannelResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(447, 0);
OpenSecureChannelResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(449, 0);
OpenSecureChannelResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(448, 0);
OpenSecureChannelResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15133, 0);
OpenSecureChannelResponse.schema.dataTypeNodeId = OpenSecureChannelResponse.dataTypeNodeId;
OpenSecureChannelResponse.schema.encodingDefaultBinary = OpenSecureChannelResponse.encodingDefaultBinary;
OpenSecureChannelResponse.schema.encodingDefaultXml = OpenSecureChannelResponse.encodingDefaultXml;
OpenSecureChannelResponse.schema.encodingDefaultJson = OpenSecureChannelResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(OpenSecureChannelResponse.dataTypeNodeId, "OpenSecureChannelResponse", OpenSecureChannelResponse);
// --------------------------------------------------------------------------------------------
const schemaOptionSet = (0, node_opcua_factory_1.buildStructuredType)({
    name: "OptionSet",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "value",
            fieldType: "ByteString",
        },
        {
            name: "validBits",
            fieldType: "ByteString",
        },
    ]
});
class OptionSet extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.value = Buffer.alloc(0);
            this.validBits = Buffer.alloc(0);
            return;
        }
        const schema = OptionSet.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.value = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.value);
        this.validBits = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.validBits);
    }
    static get schema() { return schemaOptionSet; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeByteString)(this.value, stream);
        (0, node_opcua_basic_types_1.encodeByteString)(this.validBits, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.value = (0, node_opcua_basic_types_1.decodeByteString)(stream, this.value);
        this.validBits = (0, node_opcua_basic_types_1.decodeByteString)(stream, this.validBits);
    }
    get schema() { return schemaOptionSet; }
}
exports.OptionSet = OptionSet;
OptionSet.possibleFields = [
    "value",
    "validBits"
];
OptionSet.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12755, 0);
OptionSet.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12765, 0);
OptionSet.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12757, 0);
OptionSet.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15084, 0);
OptionSet.schema.dataTypeNodeId = OptionSet.dataTypeNodeId;
OptionSet.schema.encodingDefaultBinary = OptionSet.encodingDefaultBinary;
OptionSet.schema.encodingDefaultXml = OptionSet.encodingDefaultXml;
OptionSet.schema.encodingDefaultJson = OptionSet.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(OptionSet.dataTypeNodeId, "OptionSet", OptionSet);
// --------------------------------------------------------------------------------------------
const schemaOrientation = (0, node_opcua_factory_1.buildStructuredType)({
    name: "Orientation",
    baseType: "ExtensionObject",
    fields: []
});
class Orientation extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            return;
        }
        const schema = Orientation.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
    }
    static get schema() { return schemaOrientation; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
    }
    get schema() { return schemaOrientation; }
}
exports.Orientation = Orientation;
Orientation.possibleFields = [];
Orientation.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18811, 0);
Orientation.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18820, 0);
Orientation.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18856, 0);
Orientation.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(19069, 0);
Orientation.schema.dataTypeNodeId = Orientation.dataTypeNodeId;
Orientation.schema.encodingDefaultBinary = Orientation.encodingDefaultBinary;
Orientation.schema.encodingDefaultXml = Orientation.encodingDefaultXml;
Orientation.schema.encodingDefaultJson = Orientation.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(Orientation.dataTypeNodeId, "Orientation", Orientation);
// --------------------------------------------------------------------------------------------
const schemaParsingResult = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ParsingResult",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "statusCode",
            fieldType: "StatusCode",
        },
        {
            name: "dataStatusCodes",
            fieldType: "StatusCode",
            isArray: true
        },
        {
            name: "dataDiagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class ParsingResult extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.statusCode = node_opcua_status_code_1.StatusCodes.Good;
            this.dataStatusCodes = [];
            this.dataDiagnosticInfos = [];
            return;
        }
        const schema = ParsingResult.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.statusCode = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.statusCode);
        this.dataStatusCodes = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.dataStatusCodes);
        this.dataDiagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.dataDiagnosticInfos);
    }
    static get schema() { return schemaParsingResult; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_status_code_1.encodeStatusCode)(this.statusCode, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.dataStatusCodes, stream, node_opcua_status_code_1.encodeStatusCode);
        (0, node_opcua_basic_types_1.encodeArray)(this.dataDiagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.statusCode = (0, node_opcua_status_code_1.decodeStatusCode)(stream, this.statusCode);
        this.dataStatusCodes = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_status_code_1.decodeStatusCode);
        this.dataDiagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaParsingResult; }
}
exports.ParsingResult = ParsingResult;
ParsingResult.possibleFields = [
    "statusCode",
    "dataStatusCodes",
    "dataDiagnosticInfos"
];
ParsingResult.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(610, 0);
ParsingResult.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(612, 0);
ParsingResult.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(611, 0);
ParsingResult.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15236, 0);
ParsingResult.schema.dataTypeNodeId = ParsingResult.dataTypeNodeId;
ParsingResult.schema.encodingDefaultBinary = ParsingResult.encodingDefaultBinary;
ParsingResult.schema.encodingDefaultXml = ParsingResult.encodingDefaultXml;
ParsingResult.schema.encodingDefaultJson = ParsingResult.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ParsingResult.dataTypeNodeId, "ParsingResult", ParsingResult);
// --------------------------------------------------------------------------------------------
const schemaStatusResult = (0, node_opcua_factory_1.buildStructuredType)({
    name: "StatusResult",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "statusCode",
            fieldType: "StatusCode",
        },
        {
            name: "diagnosticInfo",
            fieldType: "DiagnosticInfo",
        },
    ]
});
class StatusResult extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.statusCode = node_opcua_status_code_1.StatusCodes.Good;
            this.diagnosticInfo = null;
            return;
        }
        const schema = StatusResult.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.statusCode = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.statusCode);
        this.diagnosticInfo = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.diagnosticInfo);
    }
    static get schema() { return schemaStatusResult; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_status_code_1.encodeStatusCode)(this.statusCode, stream);
        (0, node_opcua_data_model_1.encodeDiagnosticInfo)(this.diagnosticInfo, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.statusCode = (0, node_opcua_status_code_1.decodeStatusCode)(stream, this.statusCode);
        this.diagnosticInfo = (0, node_opcua_data_model_1.decodeDiagnosticInfo)(stream, this.diagnosticInfo);
    }
    get schema() { return schemaStatusResult; }
}
exports.StatusResult = StatusResult;
StatusResult.possibleFields = [
    "statusCode",
    "diagnosticInfo"
];
StatusResult.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(299, 0);
StatusResult.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(301, 0);
StatusResult.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(300, 0);
StatusResult.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15371, 0);
StatusResult.schema.dataTypeNodeId = StatusResult.dataTypeNodeId;
StatusResult.schema.encodingDefaultBinary = StatusResult.encodingDefaultBinary;
StatusResult.schema.encodingDefaultXml = StatusResult.encodingDefaultXml;
StatusResult.schema.encodingDefaultJson = StatusResult.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(StatusResult.dataTypeNodeId, "StatusResult", StatusResult);
// --------------------------------------------------------------------------------------------
const schemaProgramDiagnostic2DataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ProgramDiagnostic2DataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "createSessionId",
            fieldType: "NodeId",
        },
        {
            name: "createClientName",
            fieldType: "UAString",
        },
        {
            name: "invocationCreationTime",
            fieldType: "DateTime",
        },
        {
            name: "lastTransitionTime",
            fieldType: "DateTime",
        },
        {
            name: "lastMethodCall",
            fieldType: "UAString",
        },
        {
            name: "lastMethodSessionId",
            fieldType: "NodeId",
        },
        {
            name: "lastMethodInputArguments",
            fieldType: "Argument",
            isArray: true
        },
        {
            name: "lastMethodOutputArguments",
            fieldType: "Argument",
            isArray: true
        },
        {
            name: "lastMethodInputValues",
            fieldType: "Variant",
            isArray: true
        },
        {
            name: "lastMethodOutputValues",
            fieldType: "Variant",
            isArray: true
        },
        {
            name: "lastMethodCallTime",
            fieldType: "DateTime",
        },
        {
            name: "lastMethodReturnStatus",
            fieldType: "StatusResult",
        },
    ]
});
class ProgramDiagnostic2DataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.createSessionId = new node_opcua_nodeid_1.NodeId(null);
            this.createClientName = null;
            this.invocationCreationTime = new Date();
            this.lastTransitionTime = new Date();
            this.lastMethodCall = null;
            this.lastMethodSessionId = new node_opcua_nodeid_1.NodeId(null);
            this.lastMethodInputArguments = null; /* null array */
            this.lastMethodOutputArguments = null; /* null array */
            this.lastMethodInputValues = [];
            this.lastMethodOutputValues = [];
            this.lastMethodCallTime = new Date();
            this.lastMethodReturnStatus = new StatusResult(null);
            return;
        }
        const schema = ProgramDiagnostic2DataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.createSessionId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.createSessionId);
        this.createClientName = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.createClientName);
        this.invocationCreationTime = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.invocationCreationTime);
        this.lastTransitionTime = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.lastTransitionTime);
        this.lastMethodCall = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.lastMethodCall);
        this.lastMethodSessionId = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.lastMethodSessionId);
        this.lastMethodInputArguments = []; // should default
        if (options.lastMethodInputArguments) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.lastMethodInputArguments));
            this.lastMethodInputArguments = options.lastMethodInputArguments.map((e) => new Argument(e));
        }
        this.lastMethodOutputArguments = []; // should default
        if (options.lastMethodOutputArguments) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.lastMethodOutputArguments));
            this.lastMethodOutputArguments = options.lastMethodOutputArguments.map((e) => new Argument(e));
        }
        this.lastMethodInputValues = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[8], options === null || options === void 0 ? void 0 : options.lastMethodInputValues);
        this.lastMethodOutputValues = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[9], options === null || options === void 0 ? void 0 : options.lastMethodOutputValues);
        this.lastMethodCallTime = (0, node_opcua_factory_1.initialize_field)(schema.fields[10], options === null || options === void 0 ? void 0 : options.lastMethodCallTime);
        this.lastMethodReturnStatus = new StatusResult(options.lastMethodReturnStatus);
    }
    static get schema() { return schemaProgramDiagnostic2DataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.createSessionId, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.createClientName, stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.invocationCreationTime, stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.lastTransitionTime, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.lastMethodCall, stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.lastMethodSessionId, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.lastMethodInputArguments, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.lastMethodOutputArguments, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.lastMethodInputValues, stream, node_opcua_variant_1.encodeVariant);
        (0, node_opcua_basic_types_1.encodeArray)(this.lastMethodOutputValues, stream, node_opcua_variant_1.encodeVariant);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.lastMethodCallTime, stream);
        this.lastMethodReturnStatus.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.createSessionId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.createSessionId);
        this.createClientName = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.createClientName);
        this.invocationCreationTime = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.invocationCreationTime);
        this.lastTransitionTime = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.lastTransitionTime);
        this.lastMethodCall = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.lastMethodCall);
        this.lastMethodSessionId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.lastMethodSessionId);
        this.lastMethodInputArguments = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new Argument(null);
            obj.decode(stream1);
            return obj;
        });
        this.lastMethodOutputArguments = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new Argument(null);
            obj.decode(stream1);
            return obj;
        });
        this.lastMethodInputValues = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_variant_1.decodeVariant);
        this.lastMethodOutputValues = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_variant_1.decodeVariant);
        this.lastMethodCallTime = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.lastMethodCallTime);
        this.lastMethodReturnStatus.decode(stream);
    }
    get schema() { return schemaProgramDiagnostic2DataType; }
}
exports.ProgramDiagnostic2DataType = ProgramDiagnostic2DataType;
ProgramDiagnostic2DataType.possibleFields = [
    "createSessionId",
    "createClientName",
    "invocationCreationTime",
    "lastTransitionTime",
    "lastMethodCall",
    "lastMethodSessionId",
    "lastMethodInputArguments",
    "lastMethodOutputArguments",
    "lastMethodInputValues",
    "lastMethodOutputValues",
    "lastMethodCallTime",
    "lastMethodReturnStatus"
];
ProgramDiagnostic2DataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(24033, 0);
ProgramDiagnostic2DataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(24034, 0);
ProgramDiagnostic2DataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(24038, 0);
ProgramDiagnostic2DataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(24042, 0);
ProgramDiagnostic2DataType.schema.dataTypeNodeId = ProgramDiagnostic2DataType.dataTypeNodeId;
ProgramDiagnostic2DataType.schema.encodingDefaultBinary = ProgramDiagnostic2DataType.encodingDefaultBinary;
ProgramDiagnostic2DataType.schema.encodingDefaultXml = ProgramDiagnostic2DataType.encodingDefaultXml;
ProgramDiagnostic2DataType.schema.encodingDefaultJson = ProgramDiagnostic2DataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ProgramDiagnostic2DataType.dataTypeNodeId, "ProgramDiagnostic2DataType", ProgramDiagnostic2DataType);
// --------------------------------------------------------------------------------------------
const schemaProgramDiagnosticDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ProgramDiagnosticDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "createSessionId",
            fieldType: "NodeId",
        },
        {
            name: "createClientName",
            fieldType: "UAString",
        },
        {
            name: "invocationCreationTime",
            fieldType: "DateTime",
        },
        {
            name: "lastTransitionTime",
            fieldType: "DateTime",
        },
        {
            name: "lastMethodCall",
            fieldType: "UAString",
        },
        {
            name: "lastMethodSessionId",
            fieldType: "NodeId",
        },
        {
            name: "lastMethodInputArguments",
            fieldType: "Argument",
            isArray: true
        },
        {
            name: "lastMethodOutputArguments",
            fieldType: "Argument",
            isArray: true
        },
        {
            name: "lastMethodCallTime",
            fieldType: "DateTime",
        },
        {
            name: "lastMethodReturnStatus",
            fieldType: "StatusResult",
        },
    ]
});
class ProgramDiagnosticDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.createSessionId = new node_opcua_nodeid_1.NodeId(null);
            this.createClientName = null;
            this.invocationCreationTime = new Date();
            this.lastTransitionTime = new Date();
            this.lastMethodCall = null;
            this.lastMethodSessionId = new node_opcua_nodeid_1.NodeId(null);
            this.lastMethodInputArguments = null; /* null array */
            this.lastMethodOutputArguments = null; /* null array */
            this.lastMethodCallTime = new Date();
            this.lastMethodReturnStatus = new StatusResult(null);
            return;
        }
        const schema = ProgramDiagnosticDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.createSessionId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.createSessionId);
        this.createClientName = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.createClientName);
        this.invocationCreationTime = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.invocationCreationTime);
        this.lastTransitionTime = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.lastTransitionTime);
        this.lastMethodCall = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.lastMethodCall);
        this.lastMethodSessionId = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.lastMethodSessionId);
        this.lastMethodInputArguments = []; // should default
        if (options.lastMethodInputArguments) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.lastMethodInputArguments));
            this.lastMethodInputArguments = options.lastMethodInputArguments.map((e) => new Argument(e));
        }
        this.lastMethodOutputArguments = []; // should default
        if (options.lastMethodOutputArguments) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.lastMethodOutputArguments));
            this.lastMethodOutputArguments = options.lastMethodOutputArguments.map((e) => new Argument(e));
        }
        this.lastMethodCallTime = (0, node_opcua_factory_1.initialize_field)(schema.fields[8], options === null || options === void 0 ? void 0 : options.lastMethodCallTime);
        this.lastMethodReturnStatus = new StatusResult(options.lastMethodReturnStatus);
    }
    static get schema() { return schemaProgramDiagnosticDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.createSessionId, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.createClientName, stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.invocationCreationTime, stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.lastTransitionTime, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.lastMethodCall, stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.lastMethodSessionId, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.lastMethodInputArguments, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.lastMethodOutputArguments, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeDateTime)(this.lastMethodCallTime, stream);
        this.lastMethodReturnStatus.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.createSessionId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.createSessionId);
        this.createClientName = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.createClientName);
        this.invocationCreationTime = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.invocationCreationTime);
        this.lastTransitionTime = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.lastTransitionTime);
        this.lastMethodCall = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.lastMethodCall);
        this.lastMethodSessionId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.lastMethodSessionId);
        this.lastMethodInputArguments = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new Argument(null);
            obj.decode(stream1);
            return obj;
        });
        this.lastMethodOutputArguments = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new Argument(null);
            obj.decode(stream1);
            return obj;
        });
        this.lastMethodCallTime = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.lastMethodCallTime);
        this.lastMethodReturnStatus.decode(stream);
    }
    get schema() { return schemaProgramDiagnosticDataType; }
}
exports.ProgramDiagnosticDataType = ProgramDiagnosticDataType;
ProgramDiagnosticDataType.possibleFields = [
    "createSessionId",
    "createClientName",
    "invocationCreationTime",
    "lastTransitionTime",
    "lastMethodCall",
    "lastMethodSessionId",
    "lastMethodInputArguments",
    "lastMethodOutputArguments",
    "lastMethodCallTime",
    "lastMethodReturnStatus"
];
ProgramDiagnosticDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(894, 0);
ProgramDiagnosticDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(896, 0);
ProgramDiagnosticDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(895, 0);
ProgramDiagnosticDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15381, 0);
ProgramDiagnosticDataType.schema.dataTypeNodeId = ProgramDiagnosticDataType.dataTypeNodeId;
ProgramDiagnosticDataType.schema.encodingDefaultBinary = ProgramDiagnosticDataType.encodingDefaultBinary;
ProgramDiagnosticDataType.schema.encodingDefaultXml = ProgramDiagnosticDataType.encodingDefaultXml;
ProgramDiagnosticDataType.schema.encodingDefaultJson = ProgramDiagnosticDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ProgramDiagnosticDataType.dataTypeNodeId, "ProgramDiagnosticDataType", ProgramDiagnosticDataType);
// --------------------------------------------------------------------------------------------
const schemaPublishedDataSetDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "PublishedDataSetDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "name",
            fieldType: "UAString",
        },
        {
            name: "dataSetFolder",
            fieldType: "UAString",
            isArray: true
        },
        {
            name: "dataSetMetaData",
            fieldType: "DataSetMetaDataType",
        },
        {
            name: "extensionFields",
            fieldType: "KeyValuePair",
            isArray: true
        },
        {
            name: "dataSetSource",
            fieldType: "ExtensionObject",
        },
    ]
});
class PublishedDataSetDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.name = null;
            this.dataSetFolder = [];
            this.dataSetMetaData = new DataSetMetaDataType(null);
            this.extensionFields = null; /* null array */
            this.dataSetSource = null;
            return;
        }
        const schema = PublishedDataSetDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.name = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.name);
        this.dataSetFolder = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.dataSetFolder);
        this.dataSetMetaData = new DataSetMetaDataType(options.dataSetMetaData);
        this.extensionFields = []; // should default
        if (options.extensionFields) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.extensionFields));
            this.extensionFields = options.extensionFields.map((e) => new KeyValuePair(e));
        }
        this.dataSetSource = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.dataSetSource);
    }
    static get schema() { return schemaPublishedDataSetDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.name, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.dataSetFolder, stream, node_opcua_basic_types_1.encodeUAString);
        this.dataSetMetaData.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.extensionFields, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_extension_object_1.encodeExtensionObject)(this.dataSetSource, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.name = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.name);
        this.dataSetFolder = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUAString);
        this.dataSetMetaData.decode(stream);
        this.extensionFields = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new KeyValuePair(null);
            obj.decode(stream1);
            return obj;
        });
        this.dataSetSource = (0, node_opcua_extension_object_1.decodeExtensionObject)(stream, this.dataSetSource);
    }
    get schema() { return schemaPublishedDataSetDataType; }
}
exports.PublishedDataSetDataType = PublishedDataSetDataType;
PublishedDataSetDataType.possibleFields = [
    "name",
    "dataSetFolder",
    "dataSetMetaData",
    "extensionFields",
    "dataSetSource"
];
PublishedDataSetDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15578, 0);
PublishedDataSetDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15677, 0);
PublishedDataSetDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15951, 0);
PublishedDataSetDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16152, 0);
PublishedDataSetDataType.schema.dataTypeNodeId = PublishedDataSetDataType.dataTypeNodeId;
PublishedDataSetDataType.schema.encodingDefaultBinary = PublishedDataSetDataType.encodingDefaultBinary;
PublishedDataSetDataType.schema.encodingDefaultXml = PublishedDataSetDataType.encodingDefaultXml;
PublishedDataSetDataType.schema.encodingDefaultJson = PublishedDataSetDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(PublishedDataSetDataType.dataTypeNodeId, "PublishedDataSetDataType", PublishedDataSetDataType);
// --------------------------------------------------------------------------------------------
const schemaPubSubGroupDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "PubSubGroupDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "name",
            fieldType: "UAString",
        },
        {
            name: "enabled",
            fieldType: "UABoolean",
        },
        {
            name: "securityMode",
            fieldType: "MessageSecurityMode",
        },
        {
            name: "securityGroupId",
            fieldType: "UAString",
        },
        {
            name: "securityKeyServices",
            fieldType: "EndpointDescription",
            isArray: true
        },
        {
            name: "maxNetworkMessageSize",
            fieldType: "UInt32",
        },
        {
            name: "groupProperties",
            fieldType: "KeyValuePair",
            isArray: true
        },
    ]
});
class PubSubGroupDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.name = null;
            this.enabled = false;
            this.securityMode = 0;
            this.securityGroupId = null;
            this.securityKeyServices = null; /* null array */
            this.maxNetworkMessageSize = 0;
            this.groupProperties = null; /* null array */
            return;
        }
        const schema = PubSubGroupDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.name = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.name);
        this.enabled = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.enabled);
        this.securityMode = this.setSecurityMode((0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.securityMode));
        this.securityGroupId = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.securityGroupId);
        this.securityKeyServices = []; // should default
        if (options.securityKeyServices) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.securityKeyServices));
            this.securityKeyServices = options.securityKeyServices.map((e) => new EndpointDescription(e));
        }
        this.maxNetworkMessageSize = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.maxNetworkMessageSize);
        this.groupProperties = []; // should default
        if (options.groupProperties) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.groupProperties));
            this.groupProperties = options.groupProperties.map((e) => new KeyValuePair(e));
        }
    }
    static get schema() { return schemaPubSubGroupDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.name, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.enabled, stream);
        encodeMessageSecurityMode(this.securityMode, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.securityGroupId, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.securityKeyServices, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeUInt32)(this.maxNetworkMessageSize, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.groupProperties, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.name = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.name);
        this.enabled = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.enabled);
        this.securityMode = decodeMessageSecurityMode(stream, this.securityMode);
        this.securityGroupId = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.securityGroupId);
        this.securityKeyServices = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new EndpointDescription(null);
            obj.decode(stream1);
            return obj;
        });
        this.maxNetworkMessageSize = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.maxNetworkMessageSize);
        this.groupProperties = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new KeyValuePair(null);
            obj.decode(stream1);
            return obj;
        });
    }
    // Define Enumeration setters
    setSecurityMode(value) {
        const coercedValue = exports._enumerationMessageSecurityMode.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to MessageSecurityMode :" + value);
        }
        this.securityMode = coercedValue.value;
        return this.securityMode;
    }
    get schema() { return schemaPubSubGroupDataType; }
}
exports.PubSubGroupDataType = PubSubGroupDataType;
PubSubGroupDataType.possibleFields = [
    "name",
    "enabled",
    "securityMode",
    "securityGroupId",
    "securityKeyServices",
    "maxNetworkMessageSize",
    "groupProperties"
];
PubSubGroupDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15609, 0);
PubSubGroupDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15689, 0);
PubSubGroupDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15988, 0);
PubSubGroupDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16159, 0);
PubSubGroupDataType.schema.dataTypeNodeId = PubSubGroupDataType.dataTypeNodeId;
PubSubGroupDataType.schema.encodingDefaultBinary = PubSubGroupDataType.encodingDefaultBinary;
PubSubGroupDataType.schema.encodingDefaultXml = PubSubGroupDataType.encodingDefaultXml;
PubSubGroupDataType.schema.encodingDefaultJson = PubSubGroupDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(PubSubGroupDataType.dataTypeNodeId, "PubSubGroupDataType", PubSubGroupDataType);
// --------------------------------------------------------------------------------------------
const schemaWriterGroupDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "WriterGroupDataType",
    baseType: "PubSubGroupDataType",
    fields: [
        {
            name: "writerGroupId",
            fieldType: "UInt16",
        },
        {
            name: "publishingInterval",
            fieldType: "Double",
        },
        {
            name: "keepAliveTime",
            fieldType: "Double",
        },
        {
            name: "priority",
            fieldType: "Byte",
        },
        {
            name: "localeIds",
            fieldType: "UAString",
            isArray: true
        },
        {
            name: "headerLayoutUri",
            fieldType: "UAString",
        },
        {
            name: "transportSettings",
            fieldType: "ExtensionObject",
        },
        {
            name: "messageSettings",
            fieldType: "ExtensionObject",
        },
        {
            name: "dataSetWriters",
            fieldType: "DataSetWriterDataType",
            isArray: true
        },
    ]
});
class WriterGroupDataType extends PubSubGroupDataType {
    constructor(options) {
        super(options);
        if (options === null) {
            this.writerGroupId = 0;
            this.publishingInterval = 0;
            this.keepAliveTime = 0;
            this.priority = 0;
            this.localeIds = [];
            this.headerLayoutUri = null;
            this.transportSettings = null;
            this.messageSettings = null;
            this.dataSetWriters = null; /* null array */
            return;
        }
        const schema = WriterGroupDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.writerGroupId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.writerGroupId);
        this.publishingInterval = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.publishingInterval);
        this.keepAliveTime = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.keepAliveTime);
        this.priority = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.priority);
        this.localeIds = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[4], options === null || options === void 0 ? void 0 : options.localeIds);
        this.headerLayoutUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.headerLayoutUri);
        this.transportSettings = (0, node_opcua_factory_1.initialize_field)(schema.fields[6], options === null || options === void 0 ? void 0 : options.transportSettings);
        this.messageSettings = (0, node_opcua_factory_1.initialize_field)(schema.fields[7], options === null || options === void 0 ? void 0 : options.messageSettings);
        this.dataSetWriters = []; // should default
        if (options.dataSetWriters) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.dataSetWriters));
            this.dataSetWriters = options.dataSetWriters.map((e) => new DataSetWriterDataType(e));
        }
    }
    static get schema() { return schemaWriterGroupDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt16)(this.writerGroupId, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.publishingInterval, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.keepAliveTime, stream);
        (0, node_opcua_basic_types_1.encodeByte)(this.priority, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.localeIds, stream, node_opcua_basic_types_1.encodeUAString);
        (0, node_opcua_basic_types_1.encodeUAString)(this.headerLayoutUri, stream);
        (0, node_opcua_extension_object_1.encodeExtensionObject)(this.transportSettings, stream);
        (0, node_opcua_extension_object_1.encodeExtensionObject)(this.messageSettings, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.dataSetWriters, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.writerGroupId = (0, node_opcua_basic_types_1.decodeUInt16)(stream, this.writerGroupId);
        this.publishingInterval = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.publishingInterval);
        this.keepAliveTime = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.keepAliveTime);
        this.priority = (0, node_opcua_basic_types_1.decodeByte)(stream, this.priority);
        this.localeIds = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUAString);
        this.headerLayoutUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.headerLayoutUri);
        this.transportSettings = (0, node_opcua_extension_object_1.decodeExtensionObject)(stream, this.transportSettings);
        this.messageSettings = (0, node_opcua_extension_object_1.decodeExtensionObject)(stream, this.messageSettings);
        this.dataSetWriters = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new DataSetWriterDataType(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaWriterGroupDataType; }
}
exports.WriterGroupDataType = WriterGroupDataType;
WriterGroupDataType.possibleFields = [
    "writerGroupId",
    "publishingInterval",
    "keepAliveTime",
    "priority",
    "localeIds",
    "headerLayoutUri",
    "transportSettings",
    "messageSettings",
    "dataSetWriters"
];
WriterGroupDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15480, 0);
WriterGroupDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(21150, 0);
WriterGroupDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(21174, 0);
WriterGroupDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(21198, 0);
WriterGroupDataType.schema.dataTypeNodeId = WriterGroupDataType.dataTypeNodeId;
WriterGroupDataType.schema.encodingDefaultBinary = WriterGroupDataType.encodingDefaultBinary;
WriterGroupDataType.schema.encodingDefaultXml = WriterGroupDataType.encodingDefaultXml;
WriterGroupDataType.schema.encodingDefaultJson = WriterGroupDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(WriterGroupDataType.dataTypeNodeId, "WriterGroupDataType", WriterGroupDataType);
// --------------------------------------------------------------------------------------------
const schemaReaderGroupDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ReaderGroupDataType",
    baseType: "PubSubGroupDataType",
    fields: [
        {
            name: "transportSettings",
            fieldType: "ExtensionObject",
        },
        {
            name: "messageSettings",
            fieldType: "ExtensionObject",
        },
        {
            name: "dataSetReaders",
            fieldType: "DataSetReaderDataType",
            isArray: true
        },
    ]
});
class ReaderGroupDataType extends PubSubGroupDataType {
    constructor(options) {
        super(options);
        if (options === null) {
            this.transportSettings = null;
            this.messageSettings = null;
            this.dataSetReaders = null; /* null array */
            return;
        }
        const schema = ReaderGroupDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.transportSettings = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.transportSettings);
        this.messageSettings = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.messageSettings);
        this.dataSetReaders = []; // should default
        if (options.dataSetReaders) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.dataSetReaders));
            this.dataSetReaders = options.dataSetReaders.map((e) => new DataSetReaderDataType(e));
        }
    }
    static get schema() { return schemaReaderGroupDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_extension_object_1.encodeExtensionObject)(this.transportSettings, stream);
        (0, node_opcua_extension_object_1.encodeExtensionObject)(this.messageSettings, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.dataSetReaders, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.transportSettings = (0, node_opcua_extension_object_1.decodeExtensionObject)(stream, this.transportSettings);
        this.messageSettings = (0, node_opcua_extension_object_1.decodeExtensionObject)(stream, this.messageSettings);
        this.dataSetReaders = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new DataSetReaderDataType(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaReaderGroupDataType; }
}
exports.ReaderGroupDataType = ReaderGroupDataType;
ReaderGroupDataType.possibleFields = [
    "transportSettings",
    "messageSettings",
    "dataSetReaders"
];
ReaderGroupDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15520, 0);
ReaderGroupDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(21153, 0);
ReaderGroupDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(21177, 0);
ReaderGroupDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(21201, 0);
ReaderGroupDataType.schema.dataTypeNodeId = ReaderGroupDataType.dataTypeNodeId;
ReaderGroupDataType.schema.encodingDefaultBinary = ReaderGroupDataType.encodingDefaultBinary;
ReaderGroupDataType.schema.encodingDefaultXml = ReaderGroupDataType.encodingDefaultXml;
ReaderGroupDataType.schema.encodingDefaultJson = ReaderGroupDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ReaderGroupDataType.dataTypeNodeId, "ReaderGroupDataType", ReaderGroupDataType);
// --------------------------------------------------------------------------------------------
const schemaPubSubConnectionDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "PubSubConnectionDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "name",
            fieldType: "UAString",
        },
        {
            name: "enabled",
            fieldType: "UABoolean",
        },
        {
            name: "publisherId",
            fieldType: "Variant",
        },
        {
            name: "transportProfileUri",
            fieldType: "UAString",
        },
        {
            name: "address",
            fieldType: "ExtensionObject",
        },
        {
            name: "connectionProperties",
            fieldType: "KeyValuePair",
            isArray: true
        },
        {
            name: "transportSettings",
            fieldType: "ExtensionObject",
        },
        {
            name: "writerGroups",
            fieldType: "WriterGroupDataType",
            isArray: true
        },
        {
            name: "readerGroups",
            fieldType: "ReaderGroupDataType",
            isArray: true
        },
    ]
});
class PubSubConnectionDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.name = null;
            this.enabled = false;
            this.publisherId = new node_opcua_variant_1.Variant(null);
            this.transportProfileUri = null;
            this.address = null;
            this.connectionProperties = null; /* null array */
            this.transportSettings = null;
            this.writerGroups = null; /* null array */
            this.readerGroups = null; /* null array */
            return;
        }
        const schema = PubSubConnectionDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.name = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.name);
        this.enabled = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.enabled);
        this.publisherId = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.publisherId);
        this.transportProfileUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.transportProfileUri);
        this.address = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.address);
        this.connectionProperties = []; // should default
        if (options.connectionProperties) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.connectionProperties));
            this.connectionProperties = options.connectionProperties.map((e) => new KeyValuePair(e));
        }
        this.transportSettings = (0, node_opcua_factory_1.initialize_field)(schema.fields[6], options === null || options === void 0 ? void 0 : options.transportSettings);
        this.writerGroups = []; // should default
        if (options.writerGroups) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.writerGroups));
            this.writerGroups = options.writerGroups.map((e) => new WriterGroupDataType(e));
        }
        this.readerGroups = []; // should default
        if (options.readerGroups) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.readerGroups));
            this.readerGroups = options.readerGroups.map((e) => new ReaderGroupDataType(e));
        }
    }
    static get schema() { return schemaPubSubConnectionDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.name, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.enabled, stream);
        (0, node_opcua_variant_1.encodeVariant)(this.publisherId, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.transportProfileUri, stream);
        (0, node_opcua_extension_object_1.encodeExtensionObject)(this.address, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.connectionProperties, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_extension_object_1.encodeExtensionObject)(this.transportSettings, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.writerGroups, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.readerGroups, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.name = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.name);
        this.enabled = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.enabled);
        this.publisherId = (0, node_opcua_variant_1.decodeVariant)(stream, this.publisherId);
        this.transportProfileUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.transportProfileUri);
        this.address = (0, node_opcua_extension_object_1.decodeExtensionObject)(stream, this.address);
        this.connectionProperties = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new KeyValuePair(null);
            obj.decode(stream1);
            return obj;
        });
        this.transportSettings = (0, node_opcua_extension_object_1.decodeExtensionObject)(stream, this.transportSettings);
        this.writerGroups = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new WriterGroupDataType(null);
            obj.decode(stream1);
            return obj;
        });
        this.readerGroups = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new ReaderGroupDataType(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaPubSubConnectionDataType; }
}
exports.PubSubConnectionDataType = PubSubConnectionDataType;
PubSubConnectionDataType.possibleFields = [
    "name",
    "enabled",
    "publisherId",
    "transportProfileUri",
    "address",
    "connectionProperties",
    "transportSettings",
    "writerGroups",
    "readerGroups"
];
PubSubConnectionDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15617, 0);
PubSubConnectionDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15694, 0);
PubSubConnectionDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15992, 0);
PubSubConnectionDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16281, 0);
PubSubConnectionDataType.schema.dataTypeNodeId = PubSubConnectionDataType.dataTypeNodeId;
PubSubConnectionDataType.schema.encodingDefaultBinary = PubSubConnectionDataType.encodingDefaultBinary;
PubSubConnectionDataType.schema.encodingDefaultXml = PubSubConnectionDataType.encodingDefaultXml;
PubSubConnectionDataType.schema.encodingDefaultJson = PubSubConnectionDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(PubSubConnectionDataType.dataTypeNodeId, "PubSubConnectionDataType", PubSubConnectionDataType);
// --------------------------------------------------------------------------------------------
const schemaPubSubConfigurationDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "PubSubConfigurationDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "publishedDataSets",
            fieldType: "PublishedDataSetDataType",
            isArray: true
        },
        {
            name: "connections",
            fieldType: "PubSubConnectionDataType",
            isArray: true
        },
        {
            name: "enabled",
            fieldType: "UABoolean",
        },
    ]
});
class PubSubConfigurationDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.publishedDataSets = null; /* null array */
            this.connections = null; /* null array */
            this.enabled = false;
            return;
        }
        const schema = PubSubConfigurationDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.publishedDataSets = []; // should default
        if (options.publishedDataSets) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.publishedDataSets));
            this.publishedDataSets = options.publishedDataSets.map((e) => new PublishedDataSetDataType(e));
        }
        this.connections = []; // should default
        if (options.connections) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.connections));
            this.connections = options.connections.map((e) => new PubSubConnectionDataType(e));
        }
        this.enabled = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.enabled);
    }
    static get schema() { return schemaPubSubConfigurationDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.publishedDataSets, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.connections, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.enabled, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.publishedDataSets = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new PublishedDataSetDataType(null);
            obj.decode(stream1);
            return obj;
        });
        this.connections = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new PubSubConnectionDataType(null);
            obj.decode(stream1);
            return obj;
        });
        this.enabled = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.enabled);
    }
    get schema() { return schemaPubSubConfigurationDataType; }
}
exports.PubSubConfigurationDataType = PubSubConfigurationDataType;
PubSubConfigurationDataType.possibleFields = [
    "publishedDataSets",
    "connections",
    "enabled"
];
PubSubConfigurationDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15530, 0);
PubSubConfigurationDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(21154, 0);
PubSubConfigurationDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(21178, 0);
PubSubConfigurationDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(21202, 0);
PubSubConfigurationDataType.schema.dataTypeNodeId = PubSubConfigurationDataType.dataTypeNodeId;
PubSubConfigurationDataType.schema.encodingDefaultBinary = PubSubConfigurationDataType.encodingDefaultBinary;
PubSubConfigurationDataType.schema.encodingDefaultXml = PubSubConfigurationDataType.encodingDefaultXml;
PubSubConfigurationDataType.schema.encodingDefaultJson = PubSubConfigurationDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(PubSubConfigurationDataType.dataTypeNodeId, "PubSubConfigurationDataType", PubSubConfigurationDataType);
// --------------------------------------------------------------------------------------------
const schemaSubscriptionAcknowledgement = (0, node_opcua_factory_1.buildStructuredType)({
    name: "SubscriptionAcknowledgement",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "subscriptionId",
            fieldType: "UInt32",
        },
        {
            name: "sequenceNumber",
            fieldType: "UInt32",
        },
    ]
});
class SubscriptionAcknowledgement extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.subscriptionId = 0;
            this.sequenceNumber = 0;
            return;
        }
        const schema = SubscriptionAcknowledgement.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.subscriptionId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.subscriptionId);
        this.sequenceNumber = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.sequenceNumber);
    }
    static get schema() { return schemaSubscriptionAcknowledgement; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.subscriptionId, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.sequenceNumber, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.subscriptionId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.subscriptionId);
        this.sequenceNumber = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.sequenceNumber);
    }
    get schema() { return schemaSubscriptionAcknowledgement; }
}
exports.SubscriptionAcknowledgement = SubscriptionAcknowledgement;
SubscriptionAcknowledgement.possibleFields = [
    "subscriptionId",
    "sequenceNumber"
];
SubscriptionAcknowledgement.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(821, 0);
SubscriptionAcknowledgement.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(823, 0);
SubscriptionAcknowledgement.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(822, 0);
SubscriptionAcknowledgement.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15351, 0);
SubscriptionAcknowledgement.schema.dataTypeNodeId = SubscriptionAcknowledgement.dataTypeNodeId;
SubscriptionAcknowledgement.schema.encodingDefaultBinary = SubscriptionAcknowledgement.encodingDefaultBinary;
SubscriptionAcknowledgement.schema.encodingDefaultXml = SubscriptionAcknowledgement.encodingDefaultXml;
SubscriptionAcknowledgement.schema.encodingDefaultJson = SubscriptionAcknowledgement.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(SubscriptionAcknowledgement.dataTypeNodeId, "SubscriptionAcknowledgement", SubscriptionAcknowledgement);
// --------------------------------------------------------------------------------------------
const schemaPublishRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "PublishRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "subscriptionAcknowledgements",
            fieldType: "SubscriptionAcknowledgement",
            isArray: true
        },
    ]
});
class PublishRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.subscriptionAcknowledgements = null; /* null array */
            return;
        }
        const schema = PublishRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.subscriptionAcknowledgements = []; // should default
        if (options.subscriptionAcknowledgements) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.subscriptionAcknowledgements));
            this.subscriptionAcknowledgements = options.subscriptionAcknowledgements.map((e) => new SubscriptionAcknowledgement(e));
        }
    }
    static get schema() { return schemaPublishRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.subscriptionAcknowledgements, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.subscriptionAcknowledgements = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new SubscriptionAcknowledgement(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaPublishRequest; }
}
exports.PublishRequest = PublishRequest;
PublishRequest.possibleFields = [
    "requestHeader",
    "subscriptionAcknowledgements"
];
PublishRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(824, 0);
PublishRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(826, 0);
PublishRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(825, 0);
PublishRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15352, 0);
PublishRequest.schema.dataTypeNodeId = PublishRequest.dataTypeNodeId;
PublishRequest.schema.encodingDefaultBinary = PublishRequest.encodingDefaultBinary;
PublishRequest.schema.encodingDefaultXml = PublishRequest.encodingDefaultXml;
PublishRequest.schema.encodingDefaultJson = PublishRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(PublishRequest.dataTypeNodeId, "PublishRequest", PublishRequest);
// --------------------------------------------------------------------------------------------
const schemaPublishResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "PublishResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "subscriptionId",
            fieldType: "UInt32",
        },
        {
            name: "availableSequenceNumbers",
            fieldType: "UInt32",
            isArray: true
        },
        {
            name: "moreNotifications",
            fieldType: "UABoolean",
        },
        {
            name: "notificationMessage",
            fieldType: "NotificationMessage",
        },
        {
            name: "results",
            fieldType: "StatusCode",
            isArray: true
        },
        {
            name: "diagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class PublishResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.subscriptionId = 0;
            this.availableSequenceNumbers = [];
            this.moreNotifications = false;
            this.notificationMessage = new NotificationMessage(null);
            this.results = [];
            this.diagnosticInfos = [];
            return;
        }
        const schema = PublishResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.subscriptionId = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.subscriptionId);
        this.availableSequenceNumbers = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.availableSequenceNumbers);
        this.moreNotifications = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.moreNotifications);
        this.notificationMessage = new NotificationMessage(options.notificationMessage);
        this.results = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[5], options === null || options === void 0 ? void 0 : options.results);
        this.diagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[6], options === null || options === void 0 ? void 0 : options.diagnosticInfos);
    }
    static get schema() { return schemaPublishResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.subscriptionId, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.availableSequenceNumbers, stream, node_opcua_basic_types_1.encodeUInt32);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.moreNotifications, stream);
        this.notificationMessage.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.results, stream, node_opcua_status_code_1.encodeStatusCode);
        (0, node_opcua_basic_types_1.encodeArray)(this.diagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.subscriptionId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.subscriptionId);
        this.availableSequenceNumbers = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUInt32);
        this.moreNotifications = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.moreNotifications);
        this.notificationMessage.decode(stream);
        this.results = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_status_code_1.decodeStatusCode);
        this.diagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaPublishResponse; }
}
exports.PublishResponse = PublishResponse;
PublishResponse.possibleFields = [
    "responseHeader",
    "subscriptionId",
    "availableSequenceNumbers",
    "moreNotifications",
    "notificationMessage",
    "results",
    "diagnosticInfos"
];
PublishResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(827, 0);
PublishResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(829, 0);
PublishResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(828, 0);
PublishResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15353, 0);
PublishResponse.schema.dataTypeNodeId = PublishResponse.dataTypeNodeId;
PublishResponse.schema.encodingDefaultBinary = PublishResponse.encodingDefaultBinary;
PublishResponse.schema.encodingDefaultXml = PublishResponse.encodingDefaultXml;
PublishResponse.schema.encodingDefaultJson = PublishResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(PublishResponse.dataTypeNodeId, "PublishResponse", PublishResponse);
// --------------------------------------------------------------------------------------------
const schemaPublishedDataSetSourceDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "PublishedDataSetSourceDataType",
    baseType: "ExtensionObject",
    fields: []
});
class PublishedDataSetSourceDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            return;
        }
        const schema = PublishedDataSetSourceDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
    }
    static get schema() { return schemaPublishedDataSetSourceDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
    }
    get schema() { return schemaPublishedDataSetSourceDataType; }
}
exports.PublishedDataSetSourceDataType = PublishedDataSetSourceDataType;
PublishedDataSetSourceDataType.possibleFields = [];
PublishedDataSetSourceDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15580, 0);
PublishedDataSetSourceDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15678, 0);
PublishedDataSetSourceDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15952, 0);
PublishedDataSetSourceDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16153, 0);
PublishedDataSetSourceDataType.schema.dataTypeNodeId = PublishedDataSetSourceDataType.dataTypeNodeId;
PublishedDataSetSourceDataType.schema.encodingDefaultBinary = PublishedDataSetSourceDataType.encodingDefaultBinary;
PublishedDataSetSourceDataType.schema.encodingDefaultXml = PublishedDataSetSourceDataType.encodingDefaultXml;
PublishedDataSetSourceDataType.schema.encodingDefaultJson = PublishedDataSetSourceDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(PublishedDataSetSourceDataType.dataTypeNodeId, "PublishedDataSetSourceDataType", PublishedDataSetSourceDataType);
// --------------------------------------------------------------------------------------------
const schemaPublishedVariableDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "PublishedVariableDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "publishedVariable",
            fieldType: "NodeId",
        },
        {
            name: "attributeId",
            fieldType: "UInt32",
        },
        {
            name: "samplingIntervalHint",
            fieldType: "Double",
        },
        {
            name: "deadbandType",
            fieldType: "UInt32",
        },
        {
            name: "deadbandValue",
            fieldType: "Double",
        },
        {
            name: "indexRange",
            fieldType: "NumericRange",
        },
        {
            name: "substituteValue",
            fieldType: "Variant",
        },
        {
            name: "metaDataProperties",
            fieldType: "QualifiedName",
            isArray: true
        },
    ]
});
class PublishedVariableDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.publishedVariable = new node_opcua_nodeid_1.NodeId(null);
            this.attributeId = 0;
            this.samplingIntervalHint = 0;
            this.deadbandType = 0;
            this.deadbandValue = 0;
            this.indexRange = new node_opcua_numeric_range_1.NumericRange(null);
            this.substituteValue = new node_opcua_variant_1.Variant(null);
            this.metaDataProperties = [];
            return;
        }
        const schema = PublishedVariableDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.publishedVariable = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.publishedVariable);
        this.attributeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.attributeId);
        this.samplingIntervalHint = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.samplingIntervalHint);
        this.deadbandType = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.deadbandType);
        this.deadbandValue = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.deadbandValue);
        this.indexRange = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.indexRange);
        this.substituteValue = (0, node_opcua_factory_1.initialize_field)(schema.fields[6], options === null || options === void 0 ? void 0 : options.substituteValue);
        this.metaDataProperties = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[7], options === null || options === void 0 ? void 0 : options.metaDataProperties);
    }
    static get schema() { return schemaPublishedVariableDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.publishedVariable, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.attributeId, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.samplingIntervalHint, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.deadbandType, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.deadbandValue, stream);
        (0, node_opcua_numeric_range_1.encodeNumericRange)(this.indexRange, stream);
        (0, node_opcua_variant_1.encodeVariant)(this.substituteValue, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.metaDataProperties, stream, node_opcua_data_model_1.encodeQualifiedName);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.publishedVariable = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.publishedVariable);
        this.attributeId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.attributeId);
        this.samplingIntervalHint = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.samplingIntervalHint);
        this.deadbandType = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.deadbandType);
        this.deadbandValue = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.deadbandValue);
        this.indexRange = (0, node_opcua_numeric_range_1.decodeNumericRange)(stream, this.indexRange);
        this.substituteValue = (0, node_opcua_variant_1.decodeVariant)(stream, this.substituteValue);
        this.metaDataProperties = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeQualifiedName);
    }
    get schema() { return schemaPublishedVariableDataType; }
}
exports.PublishedVariableDataType = PublishedVariableDataType;
PublishedVariableDataType.possibleFields = [
    "publishedVariable",
    "attributeId",
    "samplingIntervalHint",
    "deadbandType",
    "deadbandValue",
    "indexRange",
    "substituteValue",
    "metaDataProperties"
];
PublishedVariableDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(14273, 0);
PublishedVariableDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(14323, 0);
PublishedVariableDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(14319, 0);
PublishedVariableDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15060, 0);
PublishedVariableDataType.schema.dataTypeNodeId = PublishedVariableDataType.dataTypeNodeId;
PublishedVariableDataType.schema.encodingDefaultBinary = PublishedVariableDataType.encodingDefaultBinary;
PublishedVariableDataType.schema.encodingDefaultXml = PublishedVariableDataType.encodingDefaultXml;
PublishedVariableDataType.schema.encodingDefaultJson = PublishedVariableDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(PublishedVariableDataType.dataTypeNodeId, "PublishedVariableDataType", PublishedVariableDataType);
// --------------------------------------------------------------------------------------------
const schemaPublishedDataItemsDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "PublishedDataItemsDataType",
    baseType: "PublishedDataSetSourceDataType",
    fields: [
        {
            name: "publishedData",
            fieldType: "PublishedVariableDataType",
            isArray: true
        },
    ]
});
class PublishedDataItemsDataType extends PublishedDataSetSourceDataType {
    constructor(options) {
        super(options);
        if (options === null) {
            this.publishedData = null; /* null array */
            return;
        }
        const schema = PublishedDataItemsDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.publishedData = []; // should default
        if (options.publishedData) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.publishedData));
            this.publishedData = options.publishedData.map((e) => new PublishedVariableDataType(e));
        }
    }
    static get schema() { return schemaPublishedDataItemsDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.publishedData, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.publishedData = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new PublishedVariableDataType(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaPublishedDataItemsDataType; }
}
exports.PublishedDataItemsDataType = PublishedDataItemsDataType;
PublishedDataItemsDataType.possibleFields = [
    "publishedData"
];
PublishedDataItemsDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15581, 0);
PublishedDataItemsDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15679, 0);
PublishedDataItemsDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15953, 0);
PublishedDataItemsDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16154, 0);
PublishedDataItemsDataType.schema.dataTypeNodeId = PublishedDataItemsDataType.dataTypeNodeId;
PublishedDataItemsDataType.schema.encodingDefaultBinary = PublishedDataItemsDataType.encodingDefaultBinary;
PublishedDataItemsDataType.schema.encodingDefaultXml = PublishedDataItemsDataType.encodingDefaultXml;
PublishedDataItemsDataType.schema.encodingDefaultJson = PublishedDataItemsDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(PublishedDataItemsDataType.dataTypeNodeId, "PublishedDataItemsDataType", PublishedDataItemsDataType);
// --------------------------------------------------------------------------------------------
const schemaPublishedEventsDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "PublishedEventsDataType",
    baseType: "PublishedDataSetSourceDataType",
    fields: [
        {
            name: "eventNotifier",
            fieldType: "NodeId",
        },
        {
            name: "selectedFields",
            fieldType: "SimpleAttributeOperand",
            isArray: true
        },
        {
            name: "filter",
            fieldType: "ContentFilter",
        },
    ]
});
class PublishedEventsDataType extends PublishedDataSetSourceDataType {
    constructor(options) {
        super(options);
        if (options === null) {
            this.eventNotifier = new node_opcua_nodeid_1.NodeId(null);
            this.selectedFields = null; /* null array */
            this.filter = new ContentFilter(null);
            return;
        }
        const schema = PublishedEventsDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.eventNotifier = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.eventNotifier);
        this.selectedFields = []; // should default
        if (options.selectedFields) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.selectedFields));
            this.selectedFields = options.selectedFields.map((e) => new SimpleAttributeOperand(e));
        }
        this.filter = new ContentFilter(options.filter);
    }
    static get schema() { return schemaPublishedEventsDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.eventNotifier, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.selectedFields, stream, (obj, stream1) => { obj.encode(stream1); });
        this.filter.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.eventNotifier = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.eventNotifier);
        this.selectedFields = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new SimpleAttributeOperand(null);
            obj.decode(stream1);
            return obj;
        });
        this.filter.decode(stream);
    }
    get schema() { return schemaPublishedEventsDataType; }
}
exports.PublishedEventsDataType = PublishedEventsDataType;
PublishedEventsDataType.possibleFields = [
    "eventNotifier",
    "selectedFields",
    "filter"
];
PublishedEventsDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15582, 0);
PublishedEventsDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15681, 0);
PublishedEventsDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15954, 0);
PublishedEventsDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16155, 0);
PublishedEventsDataType.schema.dataTypeNodeId = PublishedEventsDataType.dataTypeNodeId;
PublishedEventsDataType.schema.encodingDefaultBinary = PublishedEventsDataType.encodingDefaultBinary;
PublishedEventsDataType.schema.encodingDefaultXml = PublishedEventsDataType.encodingDefaultXml;
PublishedEventsDataType.schema.encodingDefaultJson = PublishedEventsDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(PublishedEventsDataType.dataTypeNodeId, "PublishedEventsDataType", PublishedEventsDataType);
// --------------------------------------------------------------------------------------------
const schemaQueryDataSet = (0, node_opcua_factory_1.buildStructuredType)({
    name: "QueryDataSet",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "nodeId",
            fieldType: "ExpandedNodeId",
        },
        {
            name: "typeDefinitionNode",
            fieldType: "ExpandedNodeId",
        },
        {
            name: "values",
            fieldType: "Variant",
            isArray: true
        },
    ]
});
class QueryDataSet extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.nodeId = new node_opcua_nodeid_1.ExpandedNodeId(null);
            this.typeDefinitionNode = new node_opcua_nodeid_1.ExpandedNodeId(null);
            this.values = [];
            return;
        }
        const schema = QueryDataSet.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.nodeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.nodeId);
        this.typeDefinitionNode = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.typeDefinitionNode);
        this.values = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.values);
    }
    static get schema() { return schemaQueryDataSet; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeExpandedNodeId)(this.nodeId, stream);
        (0, node_opcua_basic_types_1.encodeExpandedNodeId)(this.typeDefinitionNode, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.values, stream, node_opcua_variant_1.encodeVariant);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.nodeId = (0, node_opcua_basic_types_1.decodeExpandedNodeId)(stream, this.nodeId);
        this.typeDefinitionNode = (0, node_opcua_basic_types_1.decodeExpandedNodeId)(stream, this.typeDefinitionNode);
        this.values = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_variant_1.decodeVariant);
    }
    get schema() { return schemaQueryDataSet; }
}
exports.QueryDataSet = QueryDataSet;
QueryDataSet.possibleFields = [
    "nodeId",
    "typeDefinitionNode",
    "values"
];
QueryDataSet.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(577, 0);
QueryDataSet.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(579, 0);
QueryDataSet.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(578, 0);
QueryDataSet.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15202, 0);
QueryDataSet.schema.dataTypeNodeId = QueryDataSet.dataTypeNodeId;
QueryDataSet.schema.encodingDefaultBinary = QueryDataSet.encodingDefaultBinary;
QueryDataSet.schema.encodingDefaultXml = QueryDataSet.encodingDefaultXml;
QueryDataSet.schema.encodingDefaultJson = QueryDataSet.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(QueryDataSet.dataTypeNodeId, "QueryDataSet", QueryDataSet);
// --------------------------------------------------------------------------------------------
const schemaQueryFirstRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "QueryFirstRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "view",
            fieldType: "ViewDescription",
        },
        {
            name: "nodeTypes",
            fieldType: "NodeTypeDescription",
            isArray: true
        },
        {
            name: "filter",
            fieldType: "ContentFilter",
        },
        {
            name: "maxDataSetsToReturn",
            fieldType: "UInt32",
        },
        {
            name: "maxReferencesToReturn",
            fieldType: "UInt32",
        },
    ]
});
class QueryFirstRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.view = new ViewDescription(null);
            this.nodeTypes = null; /* null array */
            this.filter = new ContentFilter(null);
            this.maxDataSetsToReturn = 0;
            this.maxReferencesToReturn = 0;
            return;
        }
        const schema = QueryFirstRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.view = new ViewDescription(options.view);
        this.nodeTypes = []; // should default
        if (options.nodeTypes) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.nodeTypes));
            this.nodeTypes = options.nodeTypes.map((e) => new NodeTypeDescription(e));
        }
        this.filter = new ContentFilter(options.filter);
        this.maxDataSetsToReturn = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.maxDataSetsToReturn);
        this.maxReferencesToReturn = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.maxReferencesToReturn);
    }
    static get schema() { return schemaQueryFirstRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        this.view.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.nodeTypes, stream, (obj, stream1) => { obj.encode(stream1); });
        this.filter.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.maxDataSetsToReturn, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.maxReferencesToReturn, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.view.decode(stream);
        this.nodeTypes = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new NodeTypeDescription(null);
            obj.decode(stream1);
            return obj;
        });
        this.filter.decode(stream);
        this.maxDataSetsToReturn = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.maxDataSetsToReturn);
        this.maxReferencesToReturn = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.maxReferencesToReturn);
    }
    get schema() { return schemaQueryFirstRequest; }
}
exports.QueryFirstRequest = QueryFirstRequest;
QueryFirstRequest.possibleFields = [
    "requestHeader",
    "view",
    "nodeTypes",
    "filter",
    "maxDataSetsToReturn",
    "maxReferencesToReturn"
];
QueryFirstRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(613, 0);
QueryFirstRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(615, 0);
QueryFirstRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(614, 0);
QueryFirstRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15244, 0);
QueryFirstRequest.schema.dataTypeNodeId = QueryFirstRequest.dataTypeNodeId;
QueryFirstRequest.schema.encodingDefaultBinary = QueryFirstRequest.encodingDefaultBinary;
QueryFirstRequest.schema.encodingDefaultXml = QueryFirstRequest.encodingDefaultXml;
QueryFirstRequest.schema.encodingDefaultJson = QueryFirstRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(QueryFirstRequest.dataTypeNodeId, "QueryFirstRequest", QueryFirstRequest);
// --------------------------------------------------------------------------------------------
const schemaQueryFirstResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "QueryFirstResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "queryDataSets",
            fieldType: "QueryDataSet",
            isArray: true
        },
        {
            name: "continuationPoint",
            fieldType: "ByteString",
        },
        {
            name: "parsingResults",
            fieldType: "ParsingResult",
            isArray: true
        },
        {
            name: "diagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
        {
            name: "filterResult",
            fieldType: "ContentFilterResult",
        },
    ]
});
class QueryFirstResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.queryDataSets = null; /* null array */
            this.continuationPoint = Buffer.alloc(0);
            this.parsingResults = null; /* null array */
            this.diagnosticInfos = [];
            this.filterResult = new ContentFilterResult(null);
            return;
        }
        const schema = QueryFirstResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.queryDataSets = []; // should default
        if (options.queryDataSets) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.queryDataSets));
            this.queryDataSets = options.queryDataSets.map((e) => new QueryDataSet(e));
        }
        this.continuationPoint = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.continuationPoint);
        this.parsingResults = []; // should default
        if (options.parsingResults) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.parsingResults));
            this.parsingResults = options.parsingResults.map((e) => new ParsingResult(e));
        }
        this.diagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[4], options === null || options === void 0 ? void 0 : options.diagnosticInfos);
        this.filterResult = new ContentFilterResult(options.filterResult);
    }
    static get schema() { return schemaQueryFirstResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.queryDataSets, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeByteString)(this.continuationPoint, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.parsingResults, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.diagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
        this.filterResult.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.queryDataSets = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new QueryDataSet(null);
            obj.decode(stream1);
            return obj;
        });
        this.continuationPoint = (0, node_opcua_basic_types_1.decodeByteString)(stream, this.continuationPoint);
        this.parsingResults = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new ParsingResult(null);
            obj.decode(stream1);
            return obj;
        });
        this.diagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
        this.filterResult.decode(stream);
    }
    get schema() { return schemaQueryFirstResponse; }
}
exports.QueryFirstResponse = QueryFirstResponse;
QueryFirstResponse.possibleFields = [
    "responseHeader",
    "queryDataSets",
    "continuationPoint",
    "parsingResults",
    "diagnosticInfos",
    "filterResult"
];
QueryFirstResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(616, 0);
QueryFirstResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(618, 0);
QueryFirstResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(617, 0);
QueryFirstResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15252, 0);
QueryFirstResponse.schema.dataTypeNodeId = QueryFirstResponse.dataTypeNodeId;
QueryFirstResponse.schema.encodingDefaultBinary = QueryFirstResponse.encodingDefaultBinary;
QueryFirstResponse.schema.encodingDefaultXml = QueryFirstResponse.encodingDefaultXml;
QueryFirstResponse.schema.encodingDefaultJson = QueryFirstResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(QueryFirstResponse.dataTypeNodeId, "QueryFirstResponse", QueryFirstResponse);
// --------------------------------------------------------------------------------------------
const schemaQueryNextRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "QueryNextRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "releaseContinuationPoint",
            fieldType: "UABoolean",
        },
        {
            name: "continuationPoint",
            fieldType: "ByteString",
        },
    ]
});
class QueryNextRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.releaseContinuationPoint = false;
            this.continuationPoint = Buffer.alloc(0);
            return;
        }
        const schema = QueryNextRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.releaseContinuationPoint = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.releaseContinuationPoint);
        this.continuationPoint = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.continuationPoint);
    }
    static get schema() { return schemaQueryNextRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.releaseContinuationPoint, stream);
        (0, node_opcua_basic_types_1.encodeByteString)(this.continuationPoint, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.releaseContinuationPoint = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.releaseContinuationPoint);
        this.continuationPoint = (0, node_opcua_basic_types_1.decodeByteString)(stream, this.continuationPoint);
    }
    get schema() { return schemaQueryNextRequest; }
}
exports.QueryNextRequest = QueryNextRequest;
QueryNextRequest.possibleFields = [
    "requestHeader",
    "releaseContinuationPoint",
    "continuationPoint"
];
QueryNextRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(619, 0);
QueryNextRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(621, 0);
QueryNextRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(620, 0);
QueryNextRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15254, 0);
QueryNextRequest.schema.dataTypeNodeId = QueryNextRequest.dataTypeNodeId;
QueryNextRequest.schema.encodingDefaultBinary = QueryNextRequest.encodingDefaultBinary;
QueryNextRequest.schema.encodingDefaultXml = QueryNextRequest.encodingDefaultXml;
QueryNextRequest.schema.encodingDefaultJson = QueryNextRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(QueryNextRequest.dataTypeNodeId, "QueryNextRequest", QueryNextRequest);
// --------------------------------------------------------------------------------------------
const schemaQueryNextResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "QueryNextResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "queryDataSets",
            fieldType: "QueryDataSet",
            isArray: true
        },
        {
            name: "revisedContinuationPoint",
            fieldType: "ByteString",
        },
    ]
});
class QueryNextResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.queryDataSets = null; /* null array */
            this.revisedContinuationPoint = Buffer.alloc(0);
            return;
        }
        const schema = QueryNextResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.queryDataSets = []; // should default
        if (options.queryDataSets) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.queryDataSets));
            this.queryDataSets = options.queryDataSets.map((e) => new QueryDataSet(e));
        }
        this.revisedContinuationPoint = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.revisedContinuationPoint);
    }
    static get schema() { return schemaQueryNextResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.queryDataSets, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeByteString)(this.revisedContinuationPoint, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.queryDataSets = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new QueryDataSet(null);
            obj.decode(stream1);
            return obj;
        });
        this.revisedContinuationPoint = (0, node_opcua_basic_types_1.decodeByteString)(stream, this.revisedContinuationPoint);
    }
    get schema() { return schemaQueryNextResponse; }
}
exports.QueryNextResponse = QueryNextResponse;
QueryNextResponse.possibleFields = [
    "responseHeader",
    "queryDataSets",
    "revisedContinuationPoint"
];
QueryNextResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(622, 0);
QueryNextResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(624, 0);
QueryNextResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(623, 0);
QueryNextResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15255, 0);
QueryNextResponse.schema.dataTypeNodeId = QueryNextResponse.dataTypeNodeId;
QueryNextResponse.schema.encodingDefaultBinary = QueryNextResponse.encodingDefaultBinary;
QueryNextResponse.schema.encodingDefaultXml = QueryNextResponse.encodingDefaultXml;
QueryNextResponse.schema.encodingDefaultJson = QueryNextResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(QueryNextResponse.dataTypeNodeId, "QueryNextResponse", QueryNextResponse);
// --------------------------------------------------------------------------------------------
const schemaRationalNumber = (0, node_opcua_factory_1.buildStructuredType)({
    name: "RationalNumber",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "numerator",
            fieldType: "Int32",
        },
        {
            name: "denominator",
            fieldType: "UInt32",
        },
    ]
});
class RationalNumber extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.numerator = 0;
            this.denominator = 0;
            return;
        }
        const schema = RationalNumber.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.numerator = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.numerator);
        this.denominator = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.denominator);
    }
    static get schema() { return schemaRationalNumber; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeInt32)(this.numerator, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.denominator, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.numerator = (0, node_opcua_basic_types_1.decodeInt32)(stream, this.numerator);
        this.denominator = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.denominator);
    }
    get schema() { return schemaRationalNumber; }
}
exports.RationalNumber = RationalNumber;
RationalNumber.possibleFields = [
    "numerator",
    "denominator"
];
RationalNumber.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18806, 0);
RationalNumber.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18815, 0);
RationalNumber.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18851, 0);
RationalNumber.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(19064, 0);
RationalNumber.schema.dataTypeNodeId = RationalNumber.dataTypeNodeId;
RationalNumber.schema.encodingDefaultBinary = RationalNumber.encodingDefaultBinary;
RationalNumber.schema.encodingDefaultXml = RationalNumber.encodingDefaultXml;
RationalNumber.schema.encodingDefaultJson = RationalNumber.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(RationalNumber.dataTypeNodeId, "RationalNumber", RationalNumber);
// --------------------------------------------------------------------------------------------
const schemaReadAnnotationDataDetails = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ReadAnnotationDataDetails",
    baseType: "HistoryReadDetails",
    fields: [
        {
            name: "reqTimes",
            fieldType: "DateTime",
            isArray: true
        },
    ]
});
class ReadAnnotationDataDetails extends HistoryReadDetails {
    constructor(options) {
        super(options);
        if (options === null) {
            this.reqTimes = [];
            return;
        }
        const schema = ReadAnnotationDataDetails.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.reqTimes = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[0], options === null || options === void 0 ? void 0 : options.reqTimes);
    }
    static get schema() { return schemaReadAnnotationDataDetails; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.reqTimes, stream, node_opcua_basic_types_1.encodeDateTime);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.reqTimes = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeDateTime);
    }
    get schema() { return schemaReadAnnotationDataDetails; }
}
exports.ReadAnnotationDataDetails = ReadAnnotationDataDetails;
ReadAnnotationDataDetails.possibleFields = [
    "reqTimes"
];
ReadAnnotationDataDetails.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(23497, 0);
ReadAnnotationDataDetails.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(23500, 0);
ReadAnnotationDataDetails.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(23506, 0);
ReadAnnotationDataDetails.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(23512, 0);
ReadAnnotationDataDetails.schema.dataTypeNodeId = ReadAnnotationDataDetails.dataTypeNodeId;
ReadAnnotationDataDetails.schema.encodingDefaultBinary = ReadAnnotationDataDetails.encodingDefaultBinary;
ReadAnnotationDataDetails.schema.encodingDefaultXml = ReadAnnotationDataDetails.encodingDefaultXml;
ReadAnnotationDataDetails.schema.encodingDefaultJson = ReadAnnotationDataDetails.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ReadAnnotationDataDetails.dataTypeNodeId, "ReadAnnotationDataDetails", ReadAnnotationDataDetails);
// --------------------------------------------------------------------------------------------
const schemaReadAtTimeDetails = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ReadAtTimeDetails",
    baseType: "HistoryReadDetails",
    fields: [
        {
            name: "reqTimes",
            fieldType: "DateTime",
            isArray: true
        },
        {
            name: "useSimpleBounds",
            fieldType: "UABoolean",
        },
    ]
});
class ReadAtTimeDetails extends HistoryReadDetails {
    constructor(options) {
        super(options);
        if (options === null) {
            this.reqTimes = [];
            this.useSimpleBounds = false;
            return;
        }
        const schema = ReadAtTimeDetails.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.reqTimes = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[0], options === null || options === void 0 ? void 0 : options.reqTimes);
        this.useSimpleBounds = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.useSimpleBounds);
    }
    static get schema() { return schemaReadAtTimeDetails; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.reqTimes, stream, node_opcua_basic_types_1.encodeDateTime);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.useSimpleBounds, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.reqTimes = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeDateTime);
        this.useSimpleBounds = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.useSimpleBounds);
    }
    get schema() { return schemaReadAtTimeDetails; }
}
exports.ReadAtTimeDetails = ReadAtTimeDetails;
ReadAtTimeDetails.possibleFields = [
    "reqTimes",
    "useSimpleBounds"
];
ReadAtTimeDetails.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(653, 0);
ReadAtTimeDetails.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(655, 0);
ReadAtTimeDetails.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(654, 0);
ReadAtTimeDetails.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15269, 0);
ReadAtTimeDetails.schema.dataTypeNodeId = ReadAtTimeDetails.dataTypeNodeId;
ReadAtTimeDetails.schema.encodingDefaultBinary = ReadAtTimeDetails.encodingDefaultBinary;
ReadAtTimeDetails.schema.encodingDefaultXml = ReadAtTimeDetails.encodingDefaultXml;
ReadAtTimeDetails.schema.encodingDefaultJson = ReadAtTimeDetails.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ReadAtTimeDetails.dataTypeNodeId, "ReadAtTimeDetails", ReadAtTimeDetails);
// --------------------------------------------------------------------------------------------
const schemaReadEventDetails = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ReadEventDetails",
    baseType: "HistoryReadDetails",
    fields: [
        {
            name: "numValuesPerNode",
            fieldType: "UInt32",
        },
        {
            name: "startTime",
            fieldType: "DateTime",
        },
        {
            name: "endTime",
            fieldType: "DateTime",
        },
        {
            name: "filter",
            fieldType: "EventFilter",
        },
    ]
});
class ReadEventDetails extends HistoryReadDetails {
    constructor(options) {
        super(options);
        if (options === null) {
            this.numValuesPerNode = 0;
            this.startTime = new Date();
            this.endTime = new Date();
            this.filter = new EventFilter(null);
            return;
        }
        const schema = ReadEventDetails.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.numValuesPerNode = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.numValuesPerNode);
        this.startTime = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.startTime);
        this.endTime = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.endTime);
        this.filter = new EventFilter(options.filter);
    }
    static get schema() { return schemaReadEventDetails; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.numValuesPerNode, stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.startTime, stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.endTime, stream);
        this.filter.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.numValuesPerNode = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.numValuesPerNode);
        this.startTime = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.startTime);
        this.endTime = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.endTime);
        this.filter.decode(stream);
    }
    get schema() { return schemaReadEventDetails; }
}
exports.ReadEventDetails = ReadEventDetails;
ReadEventDetails.possibleFields = [
    "numValuesPerNode",
    "startTime",
    "endTime",
    "filter"
];
ReadEventDetails.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(644, 0);
ReadEventDetails.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(646, 0);
ReadEventDetails.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(645, 0);
ReadEventDetails.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15262, 0);
ReadEventDetails.schema.dataTypeNodeId = ReadEventDetails.dataTypeNodeId;
ReadEventDetails.schema.encodingDefaultBinary = ReadEventDetails.encodingDefaultBinary;
ReadEventDetails.schema.encodingDefaultXml = ReadEventDetails.encodingDefaultXml;
ReadEventDetails.schema.encodingDefaultJson = ReadEventDetails.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ReadEventDetails.dataTypeNodeId, "ReadEventDetails", ReadEventDetails);
// --------------------------------------------------------------------------------------------
const schemaReadProcessedDetails = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ReadProcessedDetails",
    baseType: "HistoryReadDetails",
    fields: [
        {
            name: "startTime",
            fieldType: "DateTime",
        },
        {
            name: "endTime",
            fieldType: "DateTime",
        },
        {
            name: "processingInterval",
            fieldType: "Double",
        },
        {
            name: "aggregateType",
            fieldType: "NodeId",
            isArray: true
        },
        {
            name: "aggregateConfiguration",
            fieldType: "AggregateConfiguration",
        },
    ]
});
class ReadProcessedDetails extends HistoryReadDetails {
    constructor(options) {
        super(options);
        if (options === null) {
            this.startTime = new Date();
            this.endTime = new Date();
            this.processingInterval = 0;
            this.aggregateType = [];
            this.aggregateConfiguration = new AggregateConfiguration(null);
            return;
        }
        const schema = ReadProcessedDetails.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.startTime = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.startTime);
        this.endTime = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.endTime);
        this.processingInterval = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.processingInterval);
        this.aggregateType = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[3], options === null || options === void 0 ? void 0 : options.aggregateType);
        this.aggregateConfiguration = new AggregateConfiguration(options.aggregateConfiguration);
    }
    static get schema() { return schemaReadProcessedDetails; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.startTime, stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.endTime, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.processingInterval, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.aggregateType, stream, node_opcua_basic_types_1.encodeNodeId);
        this.aggregateConfiguration.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.startTime = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.startTime);
        this.endTime = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.endTime);
        this.processingInterval = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.processingInterval);
        this.aggregateType = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeNodeId);
        this.aggregateConfiguration.decode(stream);
    }
    get schema() { return schemaReadProcessedDetails; }
}
exports.ReadProcessedDetails = ReadProcessedDetails;
ReadProcessedDetails.possibleFields = [
    "startTime",
    "endTime",
    "processingInterval",
    "aggregateType",
    "aggregateConfiguration"
];
ReadProcessedDetails.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(650, 0);
ReadProcessedDetails.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(652, 0);
ReadProcessedDetails.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(651, 0);
ReadProcessedDetails.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15264, 0);
ReadProcessedDetails.schema.dataTypeNodeId = ReadProcessedDetails.dataTypeNodeId;
ReadProcessedDetails.schema.encodingDefaultBinary = ReadProcessedDetails.encodingDefaultBinary;
ReadProcessedDetails.schema.encodingDefaultXml = ReadProcessedDetails.encodingDefaultXml;
ReadProcessedDetails.schema.encodingDefaultJson = ReadProcessedDetails.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ReadProcessedDetails.dataTypeNodeId, "ReadProcessedDetails", ReadProcessedDetails);
// --------------------------------------------------------------------------------------------
const schemaReadRawModifiedDetails = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ReadRawModifiedDetails",
    baseType: "HistoryReadDetails",
    fields: [
        {
            name: "isReadModified",
            fieldType: "UABoolean",
        },
        {
            name: "startTime",
            fieldType: "DateTime",
        },
        {
            name: "endTime",
            fieldType: "DateTime",
        },
        {
            name: "numValuesPerNode",
            fieldType: "UInt32",
        },
        {
            name: "returnBounds",
            fieldType: "UABoolean",
        },
    ]
});
class ReadRawModifiedDetails extends HistoryReadDetails {
    constructor(options) {
        super(options);
        if (options === null) {
            this.isReadModified = false;
            this.startTime = new Date();
            this.endTime = new Date();
            this.numValuesPerNode = 0;
            this.returnBounds = false;
            return;
        }
        const schema = ReadRawModifiedDetails.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.isReadModified = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.isReadModified);
        this.startTime = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.startTime);
        this.endTime = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.endTime);
        this.numValuesPerNode = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.numValuesPerNode);
        this.returnBounds = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.returnBounds);
    }
    static get schema() { return schemaReadRawModifiedDetails; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.isReadModified, stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.startTime, stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.endTime, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.numValuesPerNode, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.returnBounds, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.isReadModified = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.isReadModified);
        this.startTime = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.startTime);
        this.endTime = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.endTime);
        this.numValuesPerNode = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.numValuesPerNode);
        this.returnBounds = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.returnBounds);
    }
    get schema() { return schemaReadRawModifiedDetails; }
}
exports.ReadRawModifiedDetails = ReadRawModifiedDetails;
ReadRawModifiedDetails.possibleFields = [
    "isReadModified",
    "startTime",
    "endTime",
    "numValuesPerNode",
    "returnBounds"
];
ReadRawModifiedDetails.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(647, 0);
ReadRawModifiedDetails.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(649, 0);
ReadRawModifiedDetails.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(648, 0);
ReadRawModifiedDetails.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15263, 0);
ReadRawModifiedDetails.schema.dataTypeNodeId = ReadRawModifiedDetails.dataTypeNodeId;
ReadRawModifiedDetails.schema.encodingDefaultBinary = ReadRawModifiedDetails.encodingDefaultBinary;
ReadRawModifiedDetails.schema.encodingDefaultXml = ReadRawModifiedDetails.encodingDefaultXml;
ReadRawModifiedDetails.schema.encodingDefaultJson = ReadRawModifiedDetails.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ReadRawModifiedDetails.dataTypeNodeId, "ReadRawModifiedDetails", ReadRawModifiedDetails);
// --------------------------------------------------------------------------------------------
const schemaReadRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ReadRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "maxAge",
            fieldType: "Double",
        },
        {
            name: "timestampsToReturn",
            fieldType: "TimestampsToReturn",
        },
        {
            name: "nodesToRead",
            fieldType: "ReadValueId",
            isArray: true
        },
    ]
});
class ReadRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.maxAge = 0;
            this.timestampsToReturn = 0;
            this.nodesToRead = null; /* null array */
            return;
        }
        const schema = ReadRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.maxAge = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.maxAge);
        this.timestampsToReturn = this.setTimestampsToReturn((0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.timestampsToReturn));
        this.nodesToRead = []; // should default
        if (options.nodesToRead) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.nodesToRead));
            this.nodesToRead = options.nodesToRead.map((e) => new ReadValueId(e));
        }
    }
    static get schema() { return schemaReadRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.maxAge, stream);
        (0, node_opcua_data_value_1.encodeTimestampsToReturn)(this.timestampsToReturn, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.nodesToRead, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.maxAge = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.maxAge);
        this.timestampsToReturn = (0, node_opcua_data_value_1.decodeTimestampsToReturn)(stream, this.timestampsToReturn);
        this.nodesToRead = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new ReadValueId(null);
            obj.decode(stream1);
            return obj;
        });
    }
    // Define Enumeration setters
    setTimestampsToReturn(value) {
        const coercedValue = node_opcua_data_value_1._enumerationTimestampsToReturn.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to TimestampsToReturn :" + value);
        }
        this.timestampsToReturn = coercedValue.value;
        return this.timestampsToReturn;
    }
    get schema() { return schemaReadRequest; }
}
exports.ReadRequest = ReadRequest;
ReadRequest.possibleFields = [
    "requestHeader",
    "maxAge",
    "timestampsToReturn",
    "nodesToRead"
];
ReadRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(629, 0);
ReadRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(631, 0);
ReadRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(630, 0);
ReadRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15257, 0);
ReadRequest.schema.dataTypeNodeId = ReadRequest.dataTypeNodeId;
ReadRequest.schema.encodingDefaultBinary = ReadRequest.encodingDefaultBinary;
ReadRequest.schema.encodingDefaultXml = ReadRequest.encodingDefaultXml;
ReadRequest.schema.encodingDefaultJson = ReadRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ReadRequest.dataTypeNodeId, "ReadRequest", ReadRequest);
// --------------------------------------------------------------------------------------------
const schemaReadResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ReadResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "results",
            fieldType: "DataValue",
            isArray: true
        },
        {
            name: "diagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class ReadResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.results = [];
            this.diagnosticInfos = [];
            return;
        }
        const schema = ReadResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.results = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.results);
        this.diagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.diagnosticInfos);
    }
    static get schema() { return schemaReadResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.results, stream, node_opcua_data_value_1.encodeDataValue);
        (0, node_opcua_basic_types_1.encodeArray)(this.diagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.results = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_value_1.decodeDataValue);
        this.diagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaReadResponse; }
}
exports.ReadResponse = ReadResponse;
ReadResponse.possibleFields = [
    "responseHeader",
    "results",
    "diagnosticInfos"
];
ReadResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(632, 0);
ReadResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(634, 0);
ReadResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(633, 0);
ReadResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15258, 0);
ReadResponse.schema.dataTypeNodeId = ReadResponse.dataTypeNodeId;
ReadResponse.schema.encodingDefaultBinary = ReadResponse.encodingDefaultBinary;
ReadResponse.schema.encodingDefaultXml = ReadResponse.encodingDefaultXml;
ReadResponse.schema.encodingDefaultJson = ReadResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ReadResponse.dataTypeNodeId, "ReadResponse", ReadResponse);
// --------------------------------------------------------------------------------------------
const schemaReaderGroupMessageDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ReaderGroupMessageDataType",
    baseType: "ExtensionObject",
    fields: []
});
class ReaderGroupMessageDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            return;
        }
        const schema = ReaderGroupMessageDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
    }
    static get schema() { return schemaReaderGroupMessageDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
    }
    get schema() { return schemaReaderGroupMessageDataType; }
}
exports.ReaderGroupMessageDataType = ReaderGroupMessageDataType;
ReaderGroupMessageDataType.possibleFields = [];
ReaderGroupMessageDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15622, 0);
ReaderGroupMessageDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15702, 0);
ReaderGroupMessageDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15996, 0);
ReaderGroupMessageDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16285, 0);
ReaderGroupMessageDataType.schema.dataTypeNodeId = ReaderGroupMessageDataType.dataTypeNodeId;
ReaderGroupMessageDataType.schema.encodingDefaultBinary = ReaderGroupMessageDataType.encodingDefaultBinary;
ReaderGroupMessageDataType.schema.encodingDefaultXml = ReaderGroupMessageDataType.encodingDefaultXml;
ReaderGroupMessageDataType.schema.encodingDefaultJson = ReaderGroupMessageDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ReaderGroupMessageDataType.dataTypeNodeId, "ReaderGroupMessageDataType", ReaderGroupMessageDataType);
// --------------------------------------------------------------------------------------------
const schemaReaderGroupTransportDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ReaderGroupTransportDataType",
    baseType: "ExtensionObject",
    fields: []
});
class ReaderGroupTransportDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            return;
        }
        const schema = ReaderGroupTransportDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
    }
    static get schema() { return schemaReaderGroupTransportDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
    }
    get schema() { return schemaReaderGroupTransportDataType; }
}
exports.ReaderGroupTransportDataType = ReaderGroupTransportDataType;
ReaderGroupTransportDataType.possibleFields = [];
ReaderGroupTransportDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15621, 0);
ReaderGroupTransportDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15701, 0);
ReaderGroupTransportDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15995, 0);
ReaderGroupTransportDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16284, 0);
ReaderGroupTransportDataType.schema.dataTypeNodeId = ReaderGroupTransportDataType.dataTypeNodeId;
ReaderGroupTransportDataType.schema.encodingDefaultBinary = ReaderGroupTransportDataType.encodingDefaultBinary;
ReaderGroupTransportDataType.schema.encodingDefaultXml = ReaderGroupTransportDataType.encodingDefaultXml;
ReaderGroupTransportDataType.schema.encodingDefaultJson = ReaderGroupTransportDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ReaderGroupTransportDataType.dataTypeNodeId, "ReaderGroupTransportDataType", ReaderGroupTransportDataType);
// --------------------------------------------------------------------------------------------
var ServerState;
(function (ServerState) {
    ServerState[ServerState["Running"] = 0] = "Running";
    ServerState[ServerState["Failed"] = 1] = "Failed";
    ServerState[ServerState["NoConfiguration"] = 2] = "NoConfiguration";
    ServerState[ServerState["Suspended"] = 3] = "Suspended";
    ServerState[ServerState["Shutdown"] = 4] = "Shutdown";
    ServerState[ServerState["Test"] = 5] = "Test";
    ServerState[ServerState["CommunicationFault"] = 6] = "CommunicationFault";
    ServerState[ServerState["Unknown"] = 7] = "Unknown";
    ServerState[ServerState["Invalid"] = 4294967295] = "Invalid";
})(ServerState = exports.ServerState || (exports.ServerState = {}));
const schemaServerState = {
    enumValues: ServerState,
    flaggable: false,
    minValue: 0,
    maxValue: 7,
    name: "ServerState"
};
function decodeServerState(stream, _value) {
    let value = stream.readUInt32();
    value = (value < schemaServerState.minValue || value > schemaServerState.maxValue) ? ServerState.Invalid : value;
    return value;
}
function encodeServerState(value, stream) {
    stream.writeUInt32(value);
}
exports._enumerationServerState = (0, node_opcua_factory_1.registerEnumeration)(schemaServerState);
(0, node_opcua_assert_1.assert)(exports._enumerationServerState.isFlaggable === false);
// --------------------------------------------------------------------------------------------
const schemaRedundantServerDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "RedundantServerDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "serverId",
            fieldType: "UAString",
        },
        {
            name: "serviceLevel",
            fieldType: "Byte",
        },
        {
            name: "serverState",
            fieldType: "ServerState",
        },
    ]
});
class RedundantServerDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.serverId = null;
            this.serviceLevel = 0;
            this.serverState = 0;
            return;
        }
        const schema = RedundantServerDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.serverId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.serverId);
        this.serviceLevel = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.serviceLevel);
        this.serverState = this.setServerState((0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.serverState));
    }
    static get schema() { return schemaRedundantServerDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.serverId, stream);
        (0, node_opcua_basic_types_1.encodeByte)(this.serviceLevel, stream);
        encodeServerState(this.serverState, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.serverId = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.serverId);
        this.serviceLevel = (0, node_opcua_basic_types_1.decodeByte)(stream, this.serviceLevel);
        this.serverState = decodeServerState(stream, this.serverState);
    }
    // Define Enumeration setters
    setServerState(value) {
        const coercedValue = exports._enumerationServerState.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to ServerState :" + value);
        }
        this.serverState = coercedValue.value;
        return this.serverState;
    }
    get schema() { return schemaRedundantServerDataType; }
}
exports.RedundantServerDataType = RedundantServerDataType;
RedundantServerDataType.possibleFields = [
    "serverId",
    "serviceLevel",
    "serverState"
];
RedundantServerDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(853, 0);
RedundantServerDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(855, 0);
RedundantServerDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(854, 0);
RedundantServerDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15362, 0);
RedundantServerDataType.schema.dataTypeNodeId = RedundantServerDataType.dataTypeNodeId;
RedundantServerDataType.schema.encodingDefaultBinary = RedundantServerDataType.encodingDefaultBinary;
RedundantServerDataType.schema.encodingDefaultXml = RedundantServerDataType.encodingDefaultXml;
RedundantServerDataType.schema.encodingDefaultJson = RedundantServerDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(RedundantServerDataType.dataTypeNodeId, "RedundantServerDataType", RedundantServerDataType);
// --------------------------------------------------------------------------------------------
const schemaReferenceTypeAttributes = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ReferenceTypeAttributes",
    baseType: "NodeAttributes",
    fields: [
        {
            name: "isAbstract",
            fieldType: "UABoolean",
        },
        {
            name: "symmetric",
            fieldType: "UABoolean",
        },
        {
            name: "inverseName",
            fieldType: "LocalizedText",
        },
    ]
});
class ReferenceTypeAttributes extends NodeAttributes {
    constructor(options) {
        super(options);
        if (options === null) {
            this.isAbstract = false;
            this.symmetric = false;
            this.inverseName = new node_opcua_data_model_1.LocalizedText(null);
            return;
        }
        const schema = ReferenceTypeAttributes.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.isAbstract = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.isAbstract);
        this.symmetric = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.symmetric);
        this.inverseName = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.inverseName);
    }
    static get schema() { return schemaReferenceTypeAttributes; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.isAbstract, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.symmetric, stream);
        (0, node_opcua_data_model_1.encodeLocalizedText)(this.inverseName, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.isAbstract = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.isAbstract);
        this.symmetric = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.symmetric);
        this.inverseName = (0, node_opcua_data_model_1.decodeLocalizedText)(stream, this.inverseName);
    }
    get schema() { return schemaReferenceTypeAttributes; }
}
exports.ReferenceTypeAttributes = ReferenceTypeAttributes;
ReferenceTypeAttributes.possibleFields = [
    "isAbstract",
    "symmetric",
    "inverseName"
];
ReferenceTypeAttributes.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(367, 0);
ReferenceTypeAttributes.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(369, 0);
ReferenceTypeAttributes.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(368, 0);
ReferenceTypeAttributes.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15160, 0);
ReferenceTypeAttributes.schema.dataTypeNodeId = ReferenceTypeAttributes.dataTypeNodeId;
ReferenceTypeAttributes.schema.encodingDefaultBinary = ReferenceTypeAttributes.encodingDefaultBinary;
ReferenceTypeAttributes.schema.encodingDefaultXml = ReferenceTypeAttributes.encodingDefaultXml;
ReferenceTypeAttributes.schema.encodingDefaultJson = ReferenceTypeAttributes.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ReferenceTypeAttributes.dataTypeNodeId, "ReferenceTypeAttributes", ReferenceTypeAttributes);
// --------------------------------------------------------------------------------------------
const schemaReferenceTypeNode = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ReferenceTypeNode",
    baseType: "TypeNode",
    fields: [
        {
            name: "rolePermissions",
            fieldType: "RolePermissionType",
            isArray: true
        },
        {
            name: "userRolePermissions",
            fieldType: "RolePermissionType",
            isArray: true
        },
        {
            name: "references",
            fieldType: "ReferenceNode",
            isArray: true
        },
        {
            name: "isAbstract",
            fieldType: "UABoolean",
        },
        {
            name: "symmetric",
            fieldType: "UABoolean",
        },
        {
            name: "inverseName",
            fieldType: "LocalizedText",
        },
    ]
});
class ReferenceTypeNode extends TypeNode {
    constructor(options) {
        super(options);
        if (options === null) {
            this.rolePermissions = null; /* null array */
            this.userRolePermissions = null; /* null array */
            this.references = null; /* null array */
            this.isAbstract = false;
            this.symmetric = false;
            this.inverseName = new node_opcua_data_model_1.LocalizedText(null);
            return;
        }
        const schema = ReferenceTypeNode.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.rolePermissions = []; // should default
        if (options.rolePermissions) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.rolePermissions));
            this.rolePermissions = options.rolePermissions.map((e) => new RolePermissionType(e));
        }
        this.userRolePermissions = []; // should default
        if (options.userRolePermissions) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.userRolePermissions));
            this.userRolePermissions = options.userRolePermissions.map((e) => new RolePermissionType(e));
        }
        this.references = []; // should default
        if (options.references) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.references));
            this.references = options.references.map((e) => new ReferenceNode(e));
        }
        this.isAbstract = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.isAbstract);
        this.symmetric = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.symmetric);
        this.inverseName = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.inverseName);
    }
    static get schema() { return schemaReferenceTypeNode; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.rolePermissions, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.userRolePermissions, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.references, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.isAbstract, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.symmetric, stream);
        (0, node_opcua_data_model_1.encodeLocalizedText)(this.inverseName, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.rolePermissions = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new RolePermissionType(null);
            obj.decode(stream1);
            return obj;
        });
        this.userRolePermissions = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new RolePermissionType(null);
            obj.decode(stream1);
            return obj;
        });
        this.references = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new ReferenceNode(null);
            obj.decode(stream1);
            return obj;
        });
        this.isAbstract = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.isAbstract);
        this.symmetric = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.symmetric);
        this.inverseName = (0, node_opcua_data_model_1.decodeLocalizedText)(stream, this.inverseName);
    }
    get schema() { return schemaReferenceTypeNode; }
}
exports.ReferenceTypeNode = ReferenceTypeNode;
ReferenceTypeNode.possibleFields = [
    "rolePermissions",
    "userRolePermissions",
    "references",
    "isAbstract",
    "symmetric",
    "inverseName"
];
ReferenceTypeNode.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(273, 0);
ReferenceTypeNode.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(275, 0);
ReferenceTypeNode.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(274, 0);
ReferenceTypeNode.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15076, 0);
ReferenceTypeNode.schema.dataTypeNodeId = ReferenceTypeNode.dataTypeNodeId;
ReferenceTypeNode.schema.encodingDefaultBinary = ReferenceTypeNode.encodingDefaultBinary;
ReferenceTypeNode.schema.encodingDefaultXml = ReferenceTypeNode.encodingDefaultXml;
ReferenceTypeNode.schema.encodingDefaultJson = ReferenceTypeNode.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ReferenceTypeNode.dataTypeNodeId, "ReferenceTypeNode", ReferenceTypeNode);
// --------------------------------------------------------------------------------------------
const schemaRegisterNodesRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "RegisterNodesRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "nodesToRegister",
            fieldType: "NodeId",
            isArray: true
        },
    ]
});
class RegisterNodesRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.nodesToRegister = [];
            return;
        }
        const schema = RegisterNodesRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.nodesToRegister = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.nodesToRegister);
    }
    static get schema() { return schemaRegisterNodesRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.nodesToRegister, stream, node_opcua_basic_types_1.encodeNodeId);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.nodesToRegister = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeNodeId);
    }
    get schema() { return schemaRegisterNodesRequest; }
}
exports.RegisterNodesRequest = RegisterNodesRequest;
RegisterNodesRequest.possibleFields = [
    "requestHeader",
    "nodesToRegister"
];
RegisterNodesRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(558, 0);
RegisterNodesRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(560, 0);
RegisterNodesRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(559, 0);
RegisterNodesRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15195, 0);
RegisterNodesRequest.schema.dataTypeNodeId = RegisterNodesRequest.dataTypeNodeId;
RegisterNodesRequest.schema.encodingDefaultBinary = RegisterNodesRequest.encodingDefaultBinary;
RegisterNodesRequest.schema.encodingDefaultXml = RegisterNodesRequest.encodingDefaultXml;
RegisterNodesRequest.schema.encodingDefaultJson = RegisterNodesRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(RegisterNodesRequest.dataTypeNodeId, "RegisterNodesRequest", RegisterNodesRequest);
// --------------------------------------------------------------------------------------------
const schemaRegisterNodesResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "RegisterNodesResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "registeredNodeIds",
            fieldType: "NodeId",
            isArray: true
        },
    ]
});
class RegisterNodesResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.registeredNodeIds = [];
            return;
        }
        const schema = RegisterNodesResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.registeredNodeIds = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.registeredNodeIds);
    }
    static get schema() { return schemaRegisterNodesResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.registeredNodeIds, stream, node_opcua_basic_types_1.encodeNodeId);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.registeredNodeIds = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeNodeId);
    }
    get schema() { return schemaRegisterNodesResponse; }
}
exports.RegisterNodesResponse = RegisterNodesResponse;
RegisterNodesResponse.possibleFields = [
    "responseHeader",
    "registeredNodeIds"
];
RegisterNodesResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(561, 0);
RegisterNodesResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(563, 0);
RegisterNodesResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(562, 0);
RegisterNodesResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15196, 0);
RegisterNodesResponse.schema.dataTypeNodeId = RegisterNodesResponse.dataTypeNodeId;
RegisterNodesResponse.schema.encodingDefaultBinary = RegisterNodesResponse.encodingDefaultBinary;
RegisterNodesResponse.schema.encodingDefaultXml = RegisterNodesResponse.encodingDefaultXml;
RegisterNodesResponse.schema.encodingDefaultJson = RegisterNodesResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(RegisterNodesResponse.dataTypeNodeId, "RegisterNodesResponse", RegisterNodesResponse);
// --------------------------------------------------------------------------------------------
const schemaRegisteredServer = (0, node_opcua_factory_1.buildStructuredType)({
    name: "RegisteredServer",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "serverUri",
            fieldType: "UAString",
        },
        {
            name: "productUri",
            fieldType: "UAString",
        },
        {
            name: "serverNames",
            fieldType: "LocalizedText",
            isArray: true
        },
        {
            name: "serverType",
            fieldType: "ApplicationType",
        },
        {
            name: "gatewayServerUri",
            fieldType: "UAString",
        },
        {
            name: "discoveryUrls",
            fieldType: "UAString",
            isArray: true
        },
        {
            name: "semaphoreFilePath",
            fieldType: "UAString",
        },
        {
            name: "isOnline",
            fieldType: "UABoolean",
        },
    ]
});
class RegisteredServer extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.serverUri = null;
            this.productUri = null;
            this.serverNames = [];
            this.serverType = 0;
            this.gatewayServerUri = null;
            this.discoveryUrls = [];
            this.semaphoreFilePath = null;
            this.isOnline = false;
            return;
        }
        const schema = RegisteredServer.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.serverUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.serverUri);
        this.productUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.productUri);
        this.serverNames = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.serverNames);
        this.serverType = this.setServerType((0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.serverType));
        this.gatewayServerUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.gatewayServerUri);
        this.discoveryUrls = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[5], options === null || options === void 0 ? void 0 : options.discoveryUrls);
        this.semaphoreFilePath = (0, node_opcua_factory_1.initialize_field)(schema.fields[6], options === null || options === void 0 ? void 0 : options.semaphoreFilePath);
        this.isOnline = (0, node_opcua_factory_1.initialize_field)(schema.fields[7], options === null || options === void 0 ? void 0 : options.isOnline);
    }
    static get schema() { return schemaRegisteredServer; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.serverUri, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.productUri, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.serverNames, stream, node_opcua_data_model_1.encodeLocalizedText);
        encodeApplicationType(this.serverType, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.gatewayServerUri, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.discoveryUrls, stream, node_opcua_basic_types_1.encodeUAString);
        (0, node_opcua_basic_types_1.encodeUAString)(this.semaphoreFilePath, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.isOnline, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.serverUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.serverUri);
        this.productUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.productUri);
        this.serverNames = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeLocalizedText);
        this.serverType = decodeApplicationType(stream, this.serverType);
        this.gatewayServerUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.gatewayServerUri);
        this.discoveryUrls = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUAString);
        this.semaphoreFilePath = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.semaphoreFilePath);
        this.isOnline = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.isOnline);
    }
    // Define Enumeration setters
    setServerType(value) {
        const coercedValue = exports._enumerationApplicationType.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to ApplicationType :" + value);
        }
        this.serverType = coercedValue.value;
        return this.serverType;
    }
    get schema() { return schemaRegisteredServer; }
}
exports.RegisteredServer = RegisteredServer;
RegisteredServer.possibleFields = [
    "serverUri",
    "productUri",
    "serverNames",
    "serverType",
    "gatewayServerUri",
    "discoveryUrls",
    "semaphoreFilePath",
    "isOnline"
];
RegisteredServer.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(432, 0);
RegisteredServer.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(434, 0);
RegisteredServer.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(433, 0);
RegisteredServer.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15102, 0);
RegisteredServer.schema.dataTypeNodeId = RegisteredServer.dataTypeNodeId;
RegisteredServer.schema.encodingDefaultBinary = RegisteredServer.encodingDefaultBinary;
RegisteredServer.schema.encodingDefaultXml = RegisteredServer.encodingDefaultXml;
RegisteredServer.schema.encodingDefaultJson = RegisteredServer.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(RegisteredServer.dataTypeNodeId, "RegisteredServer", RegisteredServer);
// --------------------------------------------------------------------------------------------
const schemaRegisterServer2Request = (0, node_opcua_factory_1.buildStructuredType)({
    name: "RegisterServer2Request",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "server",
            fieldType: "RegisteredServer",
        },
        {
            name: "discoveryConfiguration",
            fieldType: "ExtensionObject",
            isArray: true
        },
    ]
});
class RegisterServer2Request extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.server = new RegisteredServer(null);
            this.discoveryConfiguration = [];
            return;
        }
        const schema = RegisterServer2Request.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.server = new RegisteredServer(options.server);
        this.discoveryConfiguration = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.discoveryConfiguration);
    }
    static get schema() { return schemaRegisterServer2Request; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        this.server.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.discoveryConfiguration, stream, node_opcua_extension_object_1.encodeExtensionObject);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.server.decode(stream);
        this.discoveryConfiguration = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_extension_object_1.decodeExtensionObject);
    }
    get schema() { return schemaRegisterServer2Request; }
}
exports.RegisterServer2Request = RegisterServer2Request;
RegisterServer2Request.possibleFields = [
    "requestHeader",
    "server",
    "discoveryConfiguration"
];
RegisterServer2Request.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12193, 0);
RegisterServer2Request.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12211, 0);
RegisterServer2Request.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12199, 0);
RegisterServer2Request.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15107, 0);
RegisterServer2Request.schema.dataTypeNodeId = RegisterServer2Request.dataTypeNodeId;
RegisterServer2Request.schema.encodingDefaultBinary = RegisterServer2Request.encodingDefaultBinary;
RegisterServer2Request.schema.encodingDefaultXml = RegisterServer2Request.encodingDefaultXml;
RegisterServer2Request.schema.encodingDefaultJson = RegisterServer2Request.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(RegisterServer2Request.dataTypeNodeId, "RegisterServer2Request", RegisterServer2Request);
// --------------------------------------------------------------------------------------------
const schemaRegisterServer2Response = (0, node_opcua_factory_1.buildStructuredType)({
    name: "RegisterServer2Response",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "configurationResults",
            fieldType: "StatusCode",
            isArray: true
        },
        {
            name: "diagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class RegisterServer2Response extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.configurationResults = [];
            this.diagnosticInfos = [];
            return;
        }
        const schema = RegisterServer2Response.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.configurationResults = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.configurationResults);
        this.diagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.diagnosticInfos);
    }
    static get schema() { return schemaRegisterServer2Response; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.configurationResults, stream, node_opcua_status_code_1.encodeStatusCode);
        (0, node_opcua_basic_types_1.encodeArray)(this.diagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.configurationResults = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_status_code_1.decodeStatusCode);
        this.diagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaRegisterServer2Response; }
}
exports.RegisterServer2Response = RegisterServer2Response;
RegisterServer2Response.possibleFields = [
    "responseHeader",
    "configurationResults",
    "diagnosticInfos"
];
RegisterServer2Response.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12194, 0);
RegisterServer2Response.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12212, 0);
RegisterServer2Response.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12200, 0);
RegisterServer2Response.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15130, 0);
RegisterServer2Response.schema.dataTypeNodeId = RegisterServer2Response.dataTypeNodeId;
RegisterServer2Response.schema.encodingDefaultBinary = RegisterServer2Response.encodingDefaultBinary;
RegisterServer2Response.schema.encodingDefaultXml = RegisterServer2Response.encodingDefaultXml;
RegisterServer2Response.schema.encodingDefaultJson = RegisterServer2Response.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(RegisterServer2Response.dataTypeNodeId, "RegisterServer2Response", RegisterServer2Response);
// --------------------------------------------------------------------------------------------
const schemaRegisterServerRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "RegisterServerRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "server",
            fieldType: "RegisteredServer",
        },
    ]
});
class RegisterServerRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.server = new RegisteredServer(null);
            return;
        }
        const schema = RegisterServerRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.server = new RegisteredServer(options.server);
    }
    static get schema() { return schemaRegisterServerRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        this.server.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.server.decode(stream);
    }
    get schema() { return schemaRegisterServerRequest; }
}
exports.RegisterServerRequest = RegisterServerRequest;
RegisterServerRequest.possibleFields = [
    "requestHeader",
    "server"
];
RegisterServerRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(435, 0);
RegisterServerRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(437, 0);
RegisterServerRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(436, 0);
RegisterServerRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15103, 0);
RegisterServerRequest.schema.dataTypeNodeId = RegisterServerRequest.dataTypeNodeId;
RegisterServerRequest.schema.encodingDefaultBinary = RegisterServerRequest.encodingDefaultBinary;
RegisterServerRequest.schema.encodingDefaultXml = RegisterServerRequest.encodingDefaultXml;
RegisterServerRequest.schema.encodingDefaultJson = RegisterServerRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(RegisterServerRequest.dataTypeNodeId, "RegisterServerRequest", RegisterServerRequest);
// --------------------------------------------------------------------------------------------
const schemaRegisterServerResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "RegisterServerResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
    ]
});
class RegisterServerResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            return;
        }
        const schema = RegisterServerResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
    }
    static get schema() { return schemaRegisterServerResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
    }
    get schema() { return schemaRegisterServerResponse; }
}
exports.RegisterServerResponse = RegisterServerResponse;
RegisterServerResponse.possibleFields = [
    "responseHeader"
];
RegisterServerResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(438, 0);
RegisterServerResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(440, 0);
RegisterServerResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(439, 0);
RegisterServerResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15104, 0);
RegisterServerResponse.schema.dataTypeNodeId = RegisterServerResponse.dataTypeNodeId;
RegisterServerResponse.schema.encodingDefaultBinary = RegisterServerResponse.encodingDefaultBinary;
RegisterServerResponse.schema.encodingDefaultXml = RegisterServerResponse.encodingDefaultXml;
RegisterServerResponse.schema.encodingDefaultJson = RegisterServerResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(RegisterServerResponse.dataTypeNodeId, "RegisterServerResponse", RegisterServerResponse);
// --------------------------------------------------------------------------------------------
const schemaRepublishRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "RepublishRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "subscriptionId",
            fieldType: "UInt32",
        },
        {
            name: "retransmitSequenceNumber",
            fieldType: "UInt32",
        },
    ]
});
class RepublishRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.subscriptionId = 0;
            this.retransmitSequenceNumber = 0;
            return;
        }
        const schema = RepublishRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.subscriptionId = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.subscriptionId);
        this.retransmitSequenceNumber = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.retransmitSequenceNumber);
    }
    static get schema() { return schemaRepublishRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.subscriptionId, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.retransmitSequenceNumber, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.subscriptionId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.subscriptionId);
        this.retransmitSequenceNumber = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.retransmitSequenceNumber);
    }
    get schema() { return schemaRepublishRequest; }
}
exports.RepublishRequest = RepublishRequest;
RepublishRequest.possibleFields = [
    "requestHeader",
    "subscriptionId",
    "retransmitSequenceNumber"
];
RepublishRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(830, 0);
RepublishRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(832, 0);
RepublishRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(831, 0);
RepublishRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15354, 0);
RepublishRequest.schema.dataTypeNodeId = RepublishRequest.dataTypeNodeId;
RepublishRequest.schema.encodingDefaultBinary = RepublishRequest.encodingDefaultBinary;
RepublishRequest.schema.encodingDefaultXml = RepublishRequest.encodingDefaultXml;
RepublishRequest.schema.encodingDefaultJson = RepublishRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(RepublishRequest.dataTypeNodeId, "RepublishRequest", RepublishRequest);
// --------------------------------------------------------------------------------------------
const schemaRepublishResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "RepublishResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "notificationMessage",
            fieldType: "NotificationMessage",
        },
    ]
});
class RepublishResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.notificationMessage = new NotificationMessage(null);
            return;
        }
        const schema = RepublishResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.notificationMessage = new NotificationMessage(options.notificationMessage);
    }
    static get schema() { return schemaRepublishResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        this.notificationMessage.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.notificationMessage.decode(stream);
    }
    get schema() { return schemaRepublishResponse; }
}
exports.RepublishResponse = RepublishResponse;
RepublishResponse.possibleFields = [
    "responseHeader",
    "notificationMessage"
];
RepublishResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(833, 0);
RepublishResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(835, 0);
RepublishResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(834, 0);
RepublishResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15355, 0);
RepublishResponse.schema.dataTypeNodeId = RepublishResponse.dataTypeNodeId;
RepublishResponse.schema.encodingDefaultBinary = RepublishResponse.encodingDefaultBinary;
RepublishResponse.schema.encodingDefaultXml = RepublishResponse.encodingDefaultXml;
RepublishResponse.schema.encodingDefaultJson = RepublishResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(RepublishResponse.dataTypeNodeId, "RepublishResponse", RepublishResponse);
// --------------------------------------------------------------------------------------------
const schemaSamplingIntervalDiagnosticsDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "SamplingIntervalDiagnosticsDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "samplingInterval",
            fieldType: "Double",
        },
        {
            name: "monitoredItemCount",
            fieldType: "UInt32",
        },
        {
            name: "maxMonitoredItemCount",
            fieldType: "UInt32",
        },
        {
            name: "disabledMonitoredItemCount",
            fieldType: "UInt32",
        },
    ]
});
class SamplingIntervalDiagnosticsDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.samplingInterval = 0;
            this.monitoredItemCount = 0;
            this.maxMonitoredItemCount = 0;
            this.disabledMonitoredItemCount = 0;
            return;
        }
        const schema = SamplingIntervalDiagnosticsDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.samplingInterval = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.samplingInterval);
        this.monitoredItemCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.monitoredItemCount);
        this.maxMonitoredItemCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.maxMonitoredItemCount);
        this.disabledMonitoredItemCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.disabledMonitoredItemCount);
    }
    static get schema() { return schemaSamplingIntervalDiagnosticsDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.samplingInterval, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.monitoredItemCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.maxMonitoredItemCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.disabledMonitoredItemCount, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.samplingInterval = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.samplingInterval);
        this.monitoredItemCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.monitoredItemCount);
        this.maxMonitoredItemCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.maxMonitoredItemCount);
        this.disabledMonitoredItemCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.disabledMonitoredItemCount);
    }
    get schema() { return schemaSamplingIntervalDiagnosticsDataType; }
}
exports.SamplingIntervalDiagnosticsDataType = SamplingIntervalDiagnosticsDataType;
SamplingIntervalDiagnosticsDataType.possibleFields = [
    "samplingInterval",
    "monitoredItemCount",
    "maxMonitoredItemCount",
    "disabledMonitoredItemCount"
];
SamplingIntervalDiagnosticsDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(856, 0);
SamplingIntervalDiagnosticsDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(858, 0);
SamplingIntervalDiagnosticsDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(857, 0);
SamplingIntervalDiagnosticsDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15365, 0);
SamplingIntervalDiagnosticsDataType.schema.dataTypeNodeId = SamplingIntervalDiagnosticsDataType.dataTypeNodeId;
SamplingIntervalDiagnosticsDataType.schema.encodingDefaultBinary = SamplingIntervalDiagnosticsDataType.encodingDefaultBinary;
SamplingIntervalDiagnosticsDataType.schema.encodingDefaultXml = SamplingIntervalDiagnosticsDataType.encodingDefaultXml;
SamplingIntervalDiagnosticsDataType.schema.encodingDefaultJson = SamplingIntervalDiagnosticsDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(SamplingIntervalDiagnosticsDataType.dataTypeNodeId, "SamplingIntervalDiagnosticsDataType", SamplingIntervalDiagnosticsDataType);
// --------------------------------------------------------------------------------------------
const schemaSemanticChangeStructureDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "SemanticChangeStructureDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "affected",
            fieldType: "NodeId",
        },
        {
            name: "affectedType",
            fieldType: "NodeId",
        },
    ]
});
class SemanticChangeStructureDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.affected = new node_opcua_nodeid_1.NodeId(null);
            this.affectedType = new node_opcua_nodeid_1.NodeId(null);
            return;
        }
        const schema = SemanticChangeStructureDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.affected = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.affected);
        this.affectedType = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.affectedType);
    }
    static get schema() { return schemaSemanticChangeStructureDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.affected, stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.affectedType, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.affected = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.affected);
        this.affectedType = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.affectedType);
    }
    get schema() { return schemaSemanticChangeStructureDataType; }
}
exports.SemanticChangeStructureDataType = SemanticChangeStructureDataType;
SemanticChangeStructureDataType.possibleFields = [
    "affected",
    "affectedType"
];
SemanticChangeStructureDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(897, 0);
SemanticChangeStructureDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(899, 0);
SemanticChangeStructureDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(898, 0);
SemanticChangeStructureDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15374, 0);
SemanticChangeStructureDataType.schema.dataTypeNodeId = SemanticChangeStructureDataType.dataTypeNodeId;
SemanticChangeStructureDataType.schema.encodingDefaultBinary = SemanticChangeStructureDataType.encodingDefaultBinary;
SemanticChangeStructureDataType.schema.encodingDefaultXml = SemanticChangeStructureDataType.encodingDefaultXml;
SemanticChangeStructureDataType.schema.encodingDefaultJson = SemanticChangeStructureDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(SemanticChangeStructureDataType.dataTypeNodeId, "SemanticChangeStructureDataType", SemanticChangeStructureDataType);
// --------------------------------------------------------------------------------------------
const schemaServerDiagnosticsSummaryDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ServerDiagnosticsSummaryDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "serverViewCount",
            fieldType: "UInt32",
        },
        {
            name: "currentSessionCount",
            fieldType: "UInt32",
        },
        {
            name: "cumulatedSessionCount",
            fieldType: "UInt32",
        },
        {
            name: "securityRejectedSessionCount",
            fieldType: "UInt32",
        },
        {
            name: "rejectedSessionCount",
            fieldType: "UInt32",
        },
        {
            name: "sessionTimeoutCount",
            fieldType: "UInt32",
        },
        {
            name: "sessionAbortCount",
            fieldType: "UInt32",
        },
        {
            name: "currentSubscriptionCount",
            fieldType: "UInt32",
        },
        {
            name: "cumulatedSubscriptionCount",
            fieldType: "UInt32",
        },
        {
            name: "publishingIntervalCount",
            fieldType: "UInt32",
        },
        {
            name: "securityRejectedRequestsCount",
            fieldType: "UInt32",
        },
        {
            name: "rejectedRequestsCount",
            fieldType: "UInt32",
        },
    ]
});
class ServerDiagnosticsSummaryDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.serverViewCount = 0;
            this.currentSessionCount = 0;
            this.cumulatedSessionCount = 0;
            this.securityRejectedSessionCount = 0;
            this.rejectedSessionCount = 0;
            this.sessionTimeoutCount = 0;
            this.sessionAbortCount = 0;
            this.currentSubscriptionCount = 0;
            this.cumulatedSubscriptionCount = 0;
            this.publishingIntervalCount = 0;
            this.securityRejectedRequestsCount = 0;
            this.rejectedRequestsCount = 0;
            return;
        }
        const schema = ServerDiagnosticsSummaryDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.serverViewCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.serverViewCount);
        this.currentSessionCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.currentSessionCount);
        this.cumulatedSessionCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.cumulatedSessionCount);
        this.securityRejectedSessionCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.securityRejectedSessionCount);
        this.rejectedSessionCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.rejectedSessionCount);
        this.sessionTimeoutCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.sessionTimeoutCount);
        this.sessionAbortCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[6], options === null || options === void 0 ? void 0 : options.sessionAbortCount);
        this.currentSubscriptionCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[7], options === null || options === void 0 ? void 0 : options.currentSubscriptionCount);
        this.cumulatedSubscriptionCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[8], options === null || options === void 0 ? void 0 : options.cumulatedSubscriptionCount);
        this.publishingIntervalCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[9], options === null || options === void 0 ? void 0 : options.publishingIntervalCount);
        this.securityRejectedRequestsCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[10], options === null || options === void 0 ? void 0 : options.securityRejectedRequestsCount);
        this.rejectedRequestsCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[11], options === null || options === void 0 ? void 0 : options.rejectedRequestsCount);
    }
    static get schema() { return schemaServerDiagnosticsSummaryDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.serverViewCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.currentSessionCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.cumulatedSessionCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.securityRejectedSessionCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.rejectedSessionCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.sessionTimeoutCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.sessionAbortCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.currentSubscriptionCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.cumulatedSubscriptionCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.publishingIntervalCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.securityRejectedRequestsCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.rejectedRequestsCount, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.serverViewCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.serverViewCount);
        this.currentSessionCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.currentSessionCount);
        this.cumulatedSessionCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.cumulatedSessionCount);
        this.securityRejectedSessionCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.securityRejectedSessionCount);
        this.rejectedSessionCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.rejectedSessionCount);
        this.sessionTimeoutCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.sessionTimeoutCount);
        this.sessionAbortCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.sessionAbortCount);
        this.currentSubscriptionCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.currentSubscriptionCount);
        this.cumulatedSubscriptionCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.cumulatedSubscriptionCount);
        this.publishingIntervalCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.publishingIntervalCount);
        this.securityRejectedRequestsCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.securityRejectedRequestsCount);
        this.rejectedRequestsCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.rejectedRequestsCount);
    }
    get schema() { return schemaServerDiagnosticsSummaryDataType; }
}
exports.ServerDiagnosticsSummaryDataType = ServerDiagnosticsSummaryDataType;
ServerDiagnosticsSummaryDataType.possibleFields = [
    "serverViewCount",
    "currentSessionCount",
    "cumulatedSessionCount",
    "securityRejectedSessionCount",
    "rejectedSessionCount",
    "sessionTimeoutCount",
    "sessionAbortCount",
    "currentSubscriptionCount",
    "cumulatedSubscriptionCount",
    "publishingIntervalCount",
    "securityRejectedRequestsCount",
    "rejectedRequestsCount"
];
ServerDiagnosticsSummaryDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(859, 0);
ServerDiagnosticsSummaryDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(861, 0);
ServerDiagnosticsSummaryDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(860, 0);
ServerDiagnosticsSummaryDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15366, 0);
ServerDiagnosticsSummaryDataType.schema.dataTypeNodeId = ServerDiagnosticsSummaryDataType.dataTypeNodeId;
ServerDiagnosticsSummaryDataType.schema.encodingDefaultBinary = ServerDiagnosticsSummaryDataType.encodingDefaultBinary;
ServerDiagnosticsSummaryDataType.schema.encodingDefaultXml = ServerDiagnosticsSummaryDataType.encodingDefaultXml;
ServerDiagnosticsSummaryDataType.schema.encodingDefaultJson = ServerDiagnosticsSummaryDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ServerDiagnosticsSummaryDataType.dataTypeNodeId, "ServerDiagnosticsSummaryDataType", ServerDiagnosticsSummaryDataType);
// --------------------------------------------------------------------------------------------
const schemaServerStatusDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ServerStatusDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "startTime",
            fieldType: "DateTime",
        },
        {
            name: "currentTime",
            fieldType: "DateTime",
        },
        {
            name: "state",
            fieldType: "ServerState",
        },
        {
            name: "buildInfo",
            fieldType: "BuildInfo",
        },
        {
            name: "secondsTillShutdown",
            fieldType: "UInt32",
        },
        {
            name: "shutdownReason",
            fieldType: "LocalizedText",
        },
    ]
});
class ServerStatusDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.startTime = new Date();
            this.currentTime = new Date();
            this.state = 0;
            this.buildInfo = new BuildInfo(null);
            this.secondsTillShutdown = 0;
            this.shutdownReason = new node_opcua_data_model_1.LocalizedText(null);
            return;
        }
        const schema = ServerStatusDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.startTime = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.startTime);
        this.currentTime = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.currentTime);
        this.state = this.setState((0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.state));
        this.buildInfo = new BuildInfo(options.buildInfo);
        this.secondsTillShutdown = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.secondsTillShutdown);
        this.shutdownReason = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.shutdownReason);
    }
    static get schema() { return schemaServerStatusDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.startTime, stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.currentTime, stream);
        encodeServerState(this.state, stream);
        this.buildInfo.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.secondsTillShutdown, stream);
        (0, node_opcua_data_model_1.encodeLocalizedText)(this.shutdownReason, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.startTime = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.startTime);
        this.currentTime = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.currentTime);
        this.state = decodeServerState(stream, this.state);
        this.buildInfo.decode(stream);
        this.secondsTillShutdown = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.secondsTillShutdown);
        this.shutdownReason = (0, node_opcua_data_model_1.decodeLocalizedText)(stream, this.shutdownReason);
    }
    // Define Enumeration setters
    setState(value) {
        const coercedValue = exports._enumerationServerState.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to ServerState :" + value);
        }
        this.state = coercedValue.value;
        return this.state;
    }
    get schema() { return schemaServerStatusDataType; }
}
exports.ServerStatusDataType = ServerStatusDataType;
ServerStatusDataType.possibleFields = [
    "startTime",
    "currentTime",
    "state",
    "buildInfo",
    "secondsTillShutdown",
    "shutdownReason"
];
ServerStatusDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(862, 0);
ServerStatusDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(864, 0);
ServerStatusDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(863, 0);
ServerStatusDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15367, 0);
ServerStatusDataType.schema.dataTypeNodeId = ServerStatusDataType.dataTypeNodeId;
ServerStatusDataType.schema.encodingDefaultBinary = ServerStatusDataType.encodingDefaultBinary;
ServerStatusDataType.schema.encodingDefaultXml = ServerStatusDataType.encodingDefaultXml;
ServerStatusDataType.schema.encodingDefaultJson = ServerStatusDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ServerStatusDataType.dataTypeNodeId, "ServerStatusDataType", ServerStatusDataType);
// --------------------------------------------------------------------------------------------
const schemaServiceCounterDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ServiceCounterDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "totalCount",
            fieldType: "UInt32",
        },
        {
            name: "errorCount",
            fieldType: "UInt32",
        },
    ]
});
class ServiceCounterDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.totalCount = 0;
            this.errorCount = 0;
            return;
        }
        const schema = ServiceCounterDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.totalCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.totalCount);
        this.errorCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.errorCount);
    }
    static get schema() { return schemaServiceCounterDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.totalCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.errorCount, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.totalCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.totalCount);
        this.errorCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.errorCount);
    }
    get schema() { return schemaServiceCounterDataType; }
}
exports.ServiceCounterDataType = ServiceCounterDataType;
ServiceCounterDataType.possibleFields = [
    "totalCount",
    "errorCount"
];
ServiceCounterDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(871, 0);
ServiceCounterDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(873, 0);
ServiceCounterDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(872, 0);
ServiceCounterDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15370, 0);
ServiceCounterDataType.schema.dataTypeNodeId = ServiceCounterDataType.dataTypeNodeId;
ServiceCounterDataType.schema.encodingDefaultBinary = ServiceCounterDataType.encodingDefaultBinary;
ServiceCounterDataType.schema.encodingDefaultXml = ServiceCounterDataType.encodingDefaultXml;
ServiceCounterDataType.schema.encodingDefaultJson = ServiceCounterDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ServiceCounterDataType.dataTypeNodeId, "ServiceCounterDataType", ServiceCounterDataType);
// --------------------------------------------------------------------------------------------
const schemaServiceFault = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ServiceFault",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
    ]
});
class ServiceFault extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            return;
        }
        const schema = ServiceFault.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
    }
    static get schema() { return schemaServiceFault; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
    }
    get schema() { return schemaServiceFault; }
}
exports.ServiceFault = ServiceFault;
ServiceFault.possibleFields = [
    "responseHeader"
];
ServiceFault.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(395, 0);
ServiceFault.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(397, 0);
ServiceFault.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(396, 0);
ServiceFault.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15090, 0);
ServiceFault.schema.dataTypeNodeId = ServiceFault.dataTypeNodeId;
ServiceFault.schema.encodingDefaultBinary = ServiceFault.encodingDefaultBinary;
ServiceFault.schema.encodingDefaultXml = ServiceFault.encodingDefaultXml;
ServiceFault.schema.encodingDefaultJson = ServiceFault.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ServiceFault.dataTypeNodeId, "ServiceFault", ServiceFault);
// --------------------------------------------------------------------------------------------
const schemaSessionDiagnosticsDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "SessionDiagnosticsDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "sessionId",
            fieldType: "NodeId",
        },
        {
            name: "sessionName",
            fieldType: "UAString",
        },
        {
            name: "clientDescription",
            fieldType: "ApplicationDescription",
        },
        {
            name: "serverUri",
            fieldType: "UAString",
        },
        {
            name: "endpointUrl",
            fieldType: "UAString",
        },
        {
            name: "localeIds",
            fieldType: "UAString",
            isArray: true
        },
        {
            name: "actualSessionTimeout",
            fieldType: "Double",
        },
        {
            name: "maxResponseMessageSize",
            fieldType: "UInt32",
        },
        {
            name: "clientConnectionTime",
            fieldType: "DateTime",
        },
        {
            name: "clientLastContactTime",
            fieldType: "DateTime",
        },
        {
            name: "currentSubscriptionsCount",
            fieldType: "UInt32",
        },
        {
            name: "currentMonitoredItemsCount",
            fieldType: "UInt32",
        },
        {
            name: "currentPublishRequestsInQueue",
            fieldType: "UInt32",
        },
        {
            name: "totalRequestCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "unauthorizedRequestCount",
            fieldType: "UInt32",
        },
        {
            name: "readCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "historyReadCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "writeCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "historyUpdateCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "callCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "createMonitoredItemsCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "modifyMonitoredItemsCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "setMonitoringModeCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "setTriggeringCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "deleteMonitoredItemsCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "createSubscriptionCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "modifySubscriptionCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "setPublishingModeCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "publishCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "republishCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "transferSubscriptionsCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "deleteSubscriptionsCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "addNodesCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "addReferencesCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "deleteNodesCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "deleteReferencesCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "browseCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "browseNextCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "translateBrowsePathsToNodeIdsCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "queryFirstCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "queryNextCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "registerNodesCount",
            fieldType: "ServiceCounterDataType",
        },
        {
            name: "unregisterNodesCount",
            fieldType: "ServiceCounterDataType",
        },
    ]
});
class SessionDiagnosticsDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.sessionId = new node_opcua_nodeid_1.NodeId(null);
            this.sessionName = null;
            this.clientDescription = new ApplicationDescription(null);
            this.serverUri = null;
            this.endpointUrl = null;
            this.localeIds = [];
            this.actualSessionTimeout = 0;
            this.maxResponseMessageSize = 0;
            this.clientConnectionTime = new Date();
            this.clientLastContactTime = new Date();
            this.currentSubscriptionsCount = 0;
            this.currentMonitoredItemsCount = 0;
            this.currentPublishRequestsInQueue = 0;
            this.totalRequestCount = new ServiceCounterDataType(null);
            this.unauthorizedRequestCount = 0;
            this.readCount = new ServiceCounterDataType(null);
            this.historyReadCount = new ServiceCounterDataType(null);
            this.writeCount = new ServiceCounterDataType(null);
            this.historyUpdateCount = new ServiceCounterDataType(null);
            this.callCount = new ServiceCounterDataType(null);
            this.createMonitoredItemsCount = new ServiceCounterDataType(null);
            this.modifyMonitoredItemsCount = new ServiceCounterDataType(null);
            this.setMonitoringModeCount = new ServiceCounterDataType(null);
            this.setTriggeringCount = new ServiceCounterDataType(null);
            this.deleteMonitoredItemsCount = new ServiceCounterDataType(null);
            this.createSubscriptionCount = new ServiceCounterDataType(null);
            this.modifySubscriptionCount = new ServiceCounterDataType(null);
            this.setPublishingModeCount = new ServiceCounterDataType(null);
            this.publishCount = new ServiceCounterDataType(null);
            this.republishCount = new ServiceCounterDataType(null);
            this.transferSubscriptionsCount = new ServiceCounterDataType(null);
            this.deleteSubscriptionsCount = new ServiceCounterDataType(null);
            this.addNodesCount = new ServiceCounterDataType(null);
            this.addReferencesCount = new ServiceCounterDataType(null);
            this.deleteNodesCount = new ServiceCounterDataType(null);
            this.deleteReferencesCount = new ServiceCounterDataType(null);
            this.browseCount = new ServiceCounterDataType(null);
            this.browseNextCount = new ServiceCounterDataType(null);
            this.translateBrowsePathsToNodeIdsCount = new ServiceCounterDataType(null);
            this.queryFirstCount = new ServiceCounterDataType(null);
            this.queryNextCount = new ServiceCounterDataType(null);
            this.registerNodesCount = new ServiceCounterDataType(null);
            this.unregisterNodesCount = new ServiceCounterDataType(null);
            return;
        }
        const schema = SessionDiagnosticsDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.sessionId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.sessionId);
        this.sessionName = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.sessionName);
        this.clientDescription = new ApplicationDescription(options.clientDescription);
        this.serverUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.serverUri);
        this.endpointUrl = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.endpointUrl);
        this.localeIds = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[5], options === null || options === void 0 ? void 0 : options.localeIds);
        this.actualSessionTimeout = (0, node_opcua_factory_1.initialize_field)(schema.fields[6], options === null || options === void 0 ? void 0 : options.actualSessionTimeout);
        this.maxResponseMessageSize = (0, node_opcua_factory_1.initialize_field)(schema.fields[7], options === null || options === void 0 ? void 0 : options.maxResponseMessageSize);
        this.clientConnectionTime = (0, node_opcua_factory_1.initialize_field)(schema.fields[8], options === null || options === void 0 ? void 0 : options.clientConnectionTime);
        this.clientLastContactTime = (0, node_opcua_factory_1.initialize_field)(schema.fields[9], options === null || options === void 0 ? void 0 : options.clientLastContactTime);
        this.currentSubscriptionsCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[10], options === null || options === void 0 ? void 0 : options.currentSubscriptionsCount);
        this.currentMonitoredItemsCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[11], options === null || options === void 0 ? void 0 : options.currentMonitoredItemsCount);
        this.currentPublishRequestsInQueue = (0, node_opcua_factory_1.initialize_field)(schema.fields[12], options === null || options === void 0 ? void 0 : options.currentPublishRequestsInQueue);
        this.totalRequestCount = new ServiceCounterDataType(options.totalRequestCount);
        this.unauthorizedRequestCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[14], options === null || options === void 0 ? void 0 : options.unauthorizedRequestCount);
        this.readCount = new ServiceCounterDataType(options.readCount);
        this.historyReadCount = new ServiceCounterDataType(options.historyReadCount);
        this.writeCount = new ServiceCounterDataType(options.writeCount);
        this.historyUpdateCount = new ServiceCounterDataType(options.historyUpdateCount);
        this.callCount = new ServiceCounterDataType(options.callCount);
        this.createMonitoredItemsCount = new ServiceCounterDataType(options.createMonitoredItemsCount);
        this.modifyMonitoredItemsCount = new ServiceCounterDataType(options.modifyMonitoredItemsCount);
        this.setMonitoringModeCount = new ServiceCounterDataType(options.setMonitoringModeCount);
        this.setTriggeringCount = new ServiceCounterDataType(options.setTriggeringCount);
        this.deleteMonitoredItemsCount = new ServiceCounterDataType(options.deleteMonitoredItemsCount);
        this.createSubscriptionCount = new ServiceCounterDataType(options.createSubscriptionCount);
        this.modifySubscriptionCount = new ServiceCounterDataType(options.modifySubscriptionCount);
        this.setPublishingModeCount = new ServiceCounterDataType(options.setPublishingModeCount);
        this.publishCount = new ServiceCounterDataType(options.publishCount);
        this.republishCount = new ServiceCounterDataType(options.republishCount);
        this.transferSubscriptionsCount = new ServiceCounterDataType(options.transferSubscriptionsCount);
        this.deleteSubscriptionsCount = new ServiceCounterDataType(options.deleteSubscriptionsCount);
        this.addNodesCount = new ServiceCounterDataType(options.addNodesCount);
        this.addReferencesCount = new ServiceCounterDataType(options.addReferencesCount);
        this.deleteNodesCount = new ServiceCounterDataType(options.deleteNodesCount);
        this.deleteReferencesCount = new ServiceCounterDataType(options.deleteReferencesCount);
        this.browseCount = new ServiceCounterDataType(options.browseCount);
        this.browseNextCount = new ServiceCounterDataType(options.browseNextCount);
        this.translateBrowsePathsToNodeIdsCount = new ServiceCounterDataType(options.translateBrowsePathsToNodeIdsCount);
        this.queryFirstCount = new ServiceCounterDataType(options.queryFirstCount);
        this.queryNextCount = new ServiceCounterDataType(options.queryNextCount);
        this.registerNodesCount = new ServiceCounterDataType(options.registerNodesCount);
        this.unregisterNodesCount = new ServiceCounterDataType(options.unregisterNodesCount);
    }
    static get schema() { return schemaSessionDiagnosticsDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.sessionId, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.sessionName, stream);
        this.clientDescription.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.serverUri, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.endpointUrl, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.localeIds, stream, node_opcua_basic_types_1.encodeUAString);
        (0, node_opcua_basic_types_1.encodeDouble)(this.actualSessionTimeout, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.maxResponseMessageSize, stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.clientConnectionTime, stream);
        (0, node_opcua_basic_types_1.encodeDateTime)(this.clientLastContactTime, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.currentSubscriptionsCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.currentMonitoredItemsCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.currentPublishRequestsInQueue, stream);
        this.totalRequestCount.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.unauthorizedRequestCount, stream);
        this.readCount.encode(stream);
        this.historyReadCount.encode(stream);
        this.writeCount.encode(stream);
        this.historyUpdateCount.encode(stream);
        this.callCount.encode(stream);
        this.createMonitoredItemsCount.encode(stream);
        this.modifyMonitoredItemsCount.encode(stream);
        this.setMonitoringModeCount.encode(stream);
        this.setTriggeringCount.encode(stream);
        this.deleteMonitoredItemsCount.encode(stream);
        this.createSubscriptionCount.encode(stream);
        this.modifySubscriptionCount.encode(stream);
        this.setPublishingModeCount.encode(stream);
        this.publishCount.encode(stream);
        this.republishCount.encode(stream);
        this.transferSubscriptionsCount.encode(stream);
        this.deleteSubscriptionsCount.encode(stream);
        this.addNodesCount.encode(stream);
        this.addReferencesCount.encode(stream);
        this.deleteNodesCount.encode(stream);
        this.deleteReferencesCount.encode(stream);
        this.browseCount.encode(stream);
        this.browseNextCount.encode(stream);
        this.translateBrowsePathsToNodeIdsCount.encode(stream);
        this.queryFirstCount.encode(stream);
        this.queryNextCount.encode(stream);
        this.registerNodesCount.encode(stream);
        this.unregisterNodesCount.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.sessionId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.sessionId);
        this.sessionName = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.sessionName);
        this.clientDescription.decode(stream);
        this.serverUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.serverUri);
        this.endpointUrl = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.endpointUrl);
        this.localeIds = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUAString);
        this.actualSessionTimeout = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.actualSessionTimeout);
        this.maxResponseMessageSize = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.maxResponseMessageSize);
        this.clientConnectionTime = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.clientConnectionTime);
        this.clientLastContactTime = (0, node_opcua_basic_types_1.decodeDateTime)(stream, this.clientLastContactTime);
        this.currentSubscriptionsCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.currentSubscriptionsCount);
        this.currentMonitoredItemsCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.currentMonitoredItemsCount);
        this.currentPublishRequestsInQueue = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.currentPublishRequestsInQueue);
        this.totalRequestCount.decode(stream);
        this.unauthorizedRequestCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.unauthorizedRequestCount);
        this.readCount.decode(stream);
        this.historyReadCount.decode(stream);
        this.writeCount.decode(stream);
        this.historyUpdateCount.decode(stream);
        this.callCount.decode(stream);
        this.createMonitoredItemsCount.decode(stream);
        this.modifyMonitoredItemsCount.decode(stream);
        this.setMonitoringModeCount.decode(stream);
        this.setTriggeringCount.decode(stream);
        this.deleteMonitoredItemsCount.decode(stream);
        this.createSubscriptionCount.decode(stream);
        this.modifySubscriptionCount.decode(stream);
        this.setPublishingModeCount.decode(stream);
        this.publishCount.decode(stream);
        this.republishCount.decode(stream);
        this.transferSubscriptionsCount.decode(stream);
        this.deleteSubscriptionsCount.decode(stream);
        this.addNodesCount.decode(stream);
        this.addReferencesCount.decode(stream);
        this.deleteNodesCount.decode(stream);
        this.deleteReferencesCount.decode(stream);
        this.browseCount.decode(stream);
        this.browseNextCount.decode(stream);
        this.translateBrowsePathsToNodeIdsCount.decode(stream);
        this.queryFirstCount.decode(stream);
        this.queryNextCount.decode(stream);
        this.registerNodesCount.decode(stream);
        this.unregisterNodesCount.decode(stream);
    }
    get schema() { return schemaSessionDiagnosticsDataType; }
}
exports.SessionDiagnosticsDataType = SessionDiagnosticsDataType;
SessionDiagnosticsDataType.possibleFields = [
    "sessionId",
    "sessionName",
    "clientDescription",
    "serverUri",
    "endpointUrl",
    "localeIds",
    "actualSessionTimeout",
    "maxResponseMessageSize",
    "clientConnectionTime",
    "clientLastContactTime",
    "currentSubscriptionsCount",
    "currentMonitoredItemsCount",
    "currentPublishRequestsInQueue",
    "totalRequestCount",
    "unauthorizedRequestCount",
    "readCount",
    "historyReadCount",
    "writeCount",
    "historyUpdateCount",
    "callCount",
    "createMonitoredItemsCount",
    "modifyMonitoredItemsCount",
    "setMonitoringModeCount",
    "setTriggeringCount",
    "deleteMonitoredItemsCount",
    "createSubscriptionCount",
    "modifySubscriptionCount",
    "setPublishingModeCount",
    "publishCount",
    "republishCount",
    "transferSubscriptionsCount",
    "deleteSubscriptionsCount",
    "addNodesCount",
    "addReferencesCount",
    "deleteNodesCount",
    "deleteReferencesCount",
    "browseCount",
    "browseNextCount",
    "translateBrowsePathsToNodeIdsCount",
    "queryFirstCount",
    "queryNextCount",
    "registerNodesCount",
    "unregisterNodesCount"
];
SessionDiagnosticsDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(865, 0);
SessionDiagnosticsDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(867, 0);
SessionDiagnosticsDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(866, 0);
SessionDiagnosticsDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15368, 0);
SessionDiagnosticsDataType.schema.dataTypeNodeId = SessionDiagnosticsDataType.dataTypeNodeId;
SessionDiagnosticsDataType.schema.encodingDefaultBinary = SessionDiagnosticsDataType.encodingDefaultBinary;
SessionDiagnosticsDataType.schema.encodingDefaultXml = SessionDiagnosticsDataType.encodingDefaultXml;
SessionDiagnosticsDataType.schema.encodingDefaultJson = SessionDiagnosticsDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(SessionDiagnosticsDataType.dataTypeNodeId, "SessionDiagnosticsDataType", SessionDiagnosticsDataType);
// --------------------------------------------------------------------------------------------
const schemaSessionSecurityDiagnosticsDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "SessionSecurityDiagnosticsDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "sessionId",
            fieldType: "NodeId",
        },
        {
            name: "clientUserIdOfSession",
            fieldType: "UAString",
        },
        {
            name: "clientUserIdHistory",
            fieldType: "UAString",
            isArray: true
        },
        {
            name: "authenticationMechanism",
            fieldType: "UAString",
        },
        {
            name: "encoding",
            fieldType: "UAString",
        },
        {
            name: "transportProtocol",
            fieldType: "UAString",
        },
        {
            name: "securityMode",
            fieldType: "MessageSecurityMode",
        },
        {
            name: "securityPolicyUri",
            fieldType: "UAString",
        },
        {
            name: "clientCertificate",
            fieldType: "ByteString",
        },
    ]
});
class SessionSecurityDiagnosticsDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.sessionId = new node_opcua_nodeid_1.NodeId(null);
            this.clientUserIdOfSession = null;
            this.clientUserIdHistory = [];
            this.authenticationMechanism = null;
            this.encoding = null;
            this.transportProtocol = null;
            this.securityMode = 0;
            this.securityPolicyUri = null;
            this.clientCertificate = Buffer.alloc(0);
            return;
        }
        const schema = SessionSecurityDiagnosticsDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.sessionId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.sessionId);
        this.clientUserIdOfSession = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.clientUserIdOfSession);
        this.clientUserIdHistory = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.clientUserIdHistory);
        this.authenticationMechanism = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.authenticationMechanism);
        this.encoding = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.encoding);
        this.transportProtocol = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.transportProtocol);
        this.securityMode = this.setSecurityMode((0, node_opcua_factory_1.initialize_field)(schema.fields[6], options === null || options === void 0 ? void 0 : options.securityMode));
        this.securityPolicyUri = (0, node_opcua_factory_1.initialize_field)(schema.fields[7], options === null || options === void 0 ? void 0 : options.securityPolicyUri);
        this.clientCertificate = (0, node_opcua_factory_1.initialize_field)(schema.fields[8], options === null || options === void 0 ? void 0 : options.clientCertificate);
    }
    static get schema() { return schemaSessionSecurityDiagnosticsDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.sessionId, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.clientUserIdOfSession, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.clientUserIdHistory, stream, node_opcua_basic_types_1.encodeUAString);
        (0, node_opcua_basic_types_1.encodeUAString)(this.authenticationMechanism, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.encoding, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.transportProtocol, stream);
        encodeMessageSecurityMode(this.securityMode, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.securityPolicyUri, stream);
        (0, node_opcua_basic_types_1.encodeByteString)(this.clientCertificate, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.sessionId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.sessionId);
        this.clientUserIdOfSession = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.clientUserIdOfSession);
        this.clientUserIdHistory = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUAString);
        this.authenticationMechanism = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.authenticationMechanism);
        this.encoding = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.encoding);
        this.transportProtocol = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.transportProtocol);
        this.securityMode = decodeMessageSecurityMode(stream, this.securityMode);
        this.securityPolicyUri = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.securityPolicyUri);
        this.clientCertificate = (0, node_opcua_basic_types_1.decodeByteString)(stream, this.clientCertificate);
    }
    // Define Enumeration setters
    setSecurityMode(value) {
        const coercedValue = exports._enumerationMessageSecurityMode.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to MessageSecurityMode :" + value);
        }
        this.securityMode = coercedValue.value;
        return this.securityMode;
    }
    get schema() { return schemaSessionSecurityDiagnosticsDataType; }
}
exports.SessionSecurityDiagnosticsDataType = SessionSecurityDiagnosticsDataType;
SessionSecurityDiagnosticsDataType.possibleFields = [
    "sessionId",
    "clientUserIdOfSession",
    "clientUserIdHistory",
    "authenticationMechanism",
    "encoding",
    "transportProtocol",
    "securityMode",
    "securityPolicyUri",
    "clientCertificate"
];
SessionSecurityDiagnosticsDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(868, 0);
SessionSecurityDiagnosticsDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(870, 0);
SessionSecurityDiagnosticsDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(869, 0);
SessionSecurityDiagnosticsDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15369, 0);
SessionSecurityDiagnosticsDataType.schema.dataTypeNodeId = SessionSecurityDiagnosticsDataType.dataTypeNodeId;
SessionSecurityDiagnosticsDataType.schema.encodingDefaultBinary = SessionSecurityDiagnosticsDataType.encodingDefaultBinary;
SessionSecurityDiagnosticsDataType.schema.encodingDefaultXml = SessionSecurityDiagnosticsDataType.encodingDefaultXml;
SessionSecurityDiagnosticsDataType.schema.encodingDefaultJson = SessionSecurityDiagnosticsDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(SessionSecurityDiagnosticsDataType.dataTypeNodeId, "SessionSecurityDiagnosticsDataType", SessionSecurityDiagnosticsDataType);
// --------------------------------------------------------------------------------------------
const schemaSessionlessInvokeRequestType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "SessionlessInvokeRequestType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "urisVersion",
            fieldType: "UInt32",
        },
        {
            name: "namespaceUris",
            fieldType: "UAString",
            isArray: true
        },
        {
            name: "serverUris",
            fieldType: "UAString",
            isArray: true
        },
        {
            name: "localeIds",
            fieldType: "UAString",
            isArray: true
        },
        {
            name: "serviceId",
            fieldType: "UInt32",
        },
    ]
});
class SessionlessInvokeRequestType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.urisVersion = 0;
            this.namespaceUris = [];
            this.serverUris = [];
            this.localeIds = [];
            this.serviceId = 0;
            return;
        }
        const schema = SessionlessInvokeRequestType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.urisVersion = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.urisVersion);
        this.namespaceUris = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.namespaceUris);
        this.serverUris = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.serverUris);
        this.localeIds = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[3], options === null || options === void 0 ? void 0 : options.localeIds);
        this.serviceId = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.serviceId);
    }
    static get schema() { return schemaSessionlessInvokeRequestType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.urisVersion, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.namespaceUris, stream, node_opcua_basic_types_1.encodeUAString);
        (0, node_opcua_basic_types_1.encodeArray)(this.serverUris, stream, node_opcua_basic_types_1.encodeUAString);
        (0, node_opcua_basic_types_1.encodeArray)(this.localeIds, stream, node_opcua_basic_types_1.encodeUAString);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.serviceId, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.urisVersion = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.urisVersion);
        this.namespaceUris = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUAString);
        this.serverUris = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUAString);
        this.localeIds = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUAString);
        this.serviceId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.serviceId);
    }
    get schema() { return schemaSessionlessInvokeRequestType; }
}
exports.SessionlessInvokeRequestType = SessionlessInvokeRequestType;
SessionlessInvokeRequestType.possibleFields = [
    "urisVersion",
    "namespaceUris",
    "serverUris",
    "localeIds",
    "serviceId"
];
SessionlessInvokeRequestType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15901, 0);
SessionlessInvokeRequestType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15903, 0);
SessionlessInvokeRequestType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15902, 0);
SessionlessInvokeRequestType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15091, 0);
SessionlessInvokeRequestType.schema.dataTypeNodeId = SessionlessInvokeRequestType.dataTypeNodeId;
SessionlessInvokeRequestType.schema.encodingDefaultBinary = SessionlessInvokeRequestType.encodingDefaultBinary;
SessionlessInvokeRequestType.schema.encodingDefaultXml = SessionlessInvokeRequestType.encodingDefaultXml;
SessionlessInvokeRequestType.schema.encodingDefaultJson = SessionlessInvokeRequestType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(SessionlessInvokeRequestType.dataTypeNodeId, "SessionlessInvokeRequestType", SessionlessInvokeRequestType);
// --------------------------------------------------------------------------------------------
const schemaSessionlessInvokeResponseType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "SessionlessInvokeResponseType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "namespaceUris",
            fieldType: "UAString",
            isArray: true
        },
        {
            name: "serverUris",
            fieldType: "UAString",
            isArray: true
        },
        {
            name: "serviceId",
            fieldType: "UInt32",
        },
    ]
});
class SessionlessInvokeResponseType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.namespaceUris = [];
            this.serverUris = [];
            this.serviceId = 0;
            return;
        }
        const schema = SessionlessInvokeResponseType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.namespaceUris = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[0], options === null || options === void 0 ? void 0 : options.namespaceUris);
        this.serverUris = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.serverUris);
        this.serviceId = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.serviceId);
    }
    static get schema() { return schemaSessionlessInvokeResponseType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.namespaceUris, stream, node_opcua_basic_types_1.encodeUAString);
        (0, node_opcua_basic_types_1.encodeArray)(this.serverUris, stream, node_opcua_basic_types_1.encodeUAString);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.serviceId, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.namespaceUris = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUAString);
        this.serverUris = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUAString);
        this.serviceId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.serviceId);
    }
    get schema() { return schemaSessionlessInvokeResponseType; }
}
exports.SessionlessInvokeResponseType = SessionlessInvokeResponseType;
SessionlessInvokeResponseType.possibleFields = [
    "namespaceUris",
    "serverUris",
    "serviceId"
];
SessionlessInvokeResponseType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(20999, 0);
SessionlessInvokeResponseType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(21001, 0);
SessionlessInvokeResponseType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(21000, 0);
SessionlessInvokeResponseType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15092, 0);
SessionlessInvokeResponseType.schema.dataTypeNodeId = SessionlessInvokeResponseType.dataTypeNodeId;
SessionlessInvokeResponseType.schema.encodingDefaultBinary = SessionlessInvokeResponseType.encodingDefaultBinary;
SessionlessInvokeResponseType.schema.encodingDefaultXml = SessionlessInvokeResponseType.encodingDefaultXml;
SessionlessInvokeResponseType.schema.encodingDefaultJson = SessionlessInvokeResponseType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(SessionlessInvokeResponseType.dataTypeNodeId, "SessionlessInvokeResponseType", SessionlessInvokeResponseType);
// --------------------------------------------------------------------------------------------
const schemaSetMonitoringModeRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "SetMonitoringModeRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "subscriptionId",
            fieldType: "UInt32",
        },
        {
            name: "monitoringMode",
            fieldType: "MonitoringMode",
        },
        {
            name: "monitoredItemIds",
            fieldType: "UInt32",
            isArray: true
        },
    ]
});
class SetMonitoringModeRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.subscriptionId = 0;
            this.monitoringMode = 0;
            this.monitoredItemIds = [];
            return;
        }
        const schema = SetMonitoringModeRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.subscriptionId = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.subscriptionId);
        this.monitoringMode = this.setMonitoringMode((0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.monitoringMode));
        this.monitoredItemIds = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[3], options === null || options === void 0 ? void 0 : options.monitoredItemIds);
    }
    static get schema() { return schemaSetMonitoringModeRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.subscriptionId, stream);
        encodeMonitoringMode(this.monitoringMode, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.monitoredItemIds, stream, node_opcua_basic_types_1.encodeUInt32);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.subscriptionId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.subscriptionId);
        this.monitoringMode = decodeMonitoringMode(stream, this.monitoringMode);
        this.monitoredItemIds = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUInt32);
    }
    // Define Enumeration setters
    setMonitoringMode(value) {
        const coercedValue = exports._enumerationMonitoringMode.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to MonitoringMode :" + value);
        }
        this.monitoringMode = coercedValue.value;
        return this.monitoringMode;
    }
    get schema() { return schemaSetMonitoringModeRequest; }
}
exports.SetMonitoringModeRequest = SetMonitoringModeRequest;
SetMonitoringModeRequest.possibleFields = [
    "requestHeader",
    "subscriptionId",
    "monitoringMode",
    "monitoredItemIds"
];
SetMonitoringModeRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(767, 0);
SetMonitoringModeRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(769, 0);
SetMonitoringModeRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(768, 0);
SetMonitoringModeRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15329, 0);
SetMonitoringModeRequest.schema.dataTypeNodeId = SetMonitoringModeRequest.dataTypeNodeId;
SetMonitoringModeRequest.schema.encodingDefaultBinary = SetMonitoringModeRequest.encodingDefaultBinary;
SetMonitoringModeRequest.schema.encodingDefaultXml = SetMonitoringModeRequest.encodingDefaultXml;
SetMonitoringModeRequest.schema.encodingDefaultJson = SetMonitoringModeRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(SetMonitoringModeRequest.dataTypeNodeId, "SetMonitoringModeRequest", SetMonitoringModeRequest);
// --------------------------------------------------------------------------------------------
const schemaSetMonitoringModeResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "SetMonitoringModeResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "results",
            fieldType: "StatusCode",
            isArray: true
        },
        {
            name: "diagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class SetMonitoringModeResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.results = [];
            this.diagnosticInfos = [];
            return;
        }
        const schema = SetMonitoringModeResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.results = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.results);
        this.diagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.diagnosticInfos);
    }
    static get schema() { return schemaSetMonitoringModeResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.results, stream, node_opcua_status_code_1.encodeStatusCode);
        (0, node_opcua_basic_types_1.encodeArray)(this.diagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.results = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_status_code_1.decodeStatusCode);
        this.diagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaSetMonitoringModeResponse; }
}
exports.SetMonitoringModeResponse = SetMonitoringModeResponse;
SetMonitoringModeResponse.possibleFields = [
    "responseHeader",
    "results",
    "diagnosticInfos"
];
SetMonitoringModeResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(770, 0);
SetMonitoringModeResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(772, 0);
SetMonitoringModeResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(771, 0);
SetMonitoringModeResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15331, 0);
SetMonitoringModeResponse.schema.dataTypeNodeId = SetMonitoringModeResponse.dataTypeNodeId;
SetMonitoringModeResponse.schema.encodingDefaultBinary = SetMonitoringModeResponse.encodingDefaultBinary;
SetMonitoringModeResponse.schema.encodingDefaultXml = SetMonitoringModeResponse.encodingDefaultXml;
SetMonitoringModeResponse.schema.encodingDefaultJson = SetMonitoringModeResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(SetMonitoringModeResponse.dataTypeNodeId, "SetMonitoringModeResponse", SetMonitoringModeResponse);
// --------------------------------------------------------------------------------------------
const schemaSetPublishingModeRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "SetPublishingModeRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "publishingEnabled",
            fieldType: "UABoolean",
        },
        {
            name: "subscriptionIds",
            fieldType: "UInt32",
            isArray: true
        },
    ]
});
class SetPublishingModeRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.publishingEnabled = false;
            this.subscriptionIds = [];
            return;
        }
        const schema = SetPublishingModeRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.publishingEnabled = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.publishingEnabled);
        this.subscriptionIds = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.subscriptionIds);
    }
    static get schema() { return schemaSetPublishingModeRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.publishingEnabled, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.subscriptionIds, stream, node_opcua_basic_types_1.encodeUInt32);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.publishingEnabled = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.publishingEnabled);
        this.subscriptionIds = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUInt32);
    }
    get schema() { return schemaSetPublishingModeRequest; }
}
exports.SetPublishingModeRequest = SetPublishingModeRequest;
SetPublishingModeRequest.possibleFields = [
    "requestHeader",
    "publishingEnabled",
    "subscriptionIds"
];
SetPublishingModeRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(797, 0);
SetPublishingModeRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(799, 0);
SetPublishingModeRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(798, 0);
SetPublishingModeRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15341, 0);
SetPublishingModeRequest.schema.dataTypeNodeId = SetPublishingModeRequest.dataTypeNodeId;
SetPublishingModeRequest.schema.encodingDefaultBinary = SetPublishingModeRequest.encodingDefaultBinary;
SetPublishingModeRequest.schema.encodingDefaultXml = SetPublishingModeRequest.encodingDefaultXml;
SetPublishingModeRequest.schema.encodingDefaultJson = SetPublishingModeRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(SetPublishingModeRequest.dataTypeNodeId, "SetPublishingModeRequest", SetPublishingModeRequest);
// --------------------------------------------------------------------------------------------
const schemaSetPublishingModeResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "SetPublishingModeResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "results",
            fieldType: "StatusCode",
            isArray: true
        },
        {
            name: "diagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class SetPublishingModeResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.results = [];
            this.diagnosticInfos = [];
            return;
        }
        const schema = SetPublishingModeResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.results = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.results);
        this.diagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.diagnosticInfos);
    }
    static get schema() { return schemaSetPublishingModeResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.results, stream, node_opcua_status_code_1.encodeStatusCode);
        (0, node_opcua_basic_types_1.encodeArray)(this.diagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.results = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_status_code_1.decodeStatusCode);
        this.diagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaSetPublishingModeResponse; }
}
exports.SetPublishingModeResponse = SetPublishingModeResponse;
SetPublishingModeResponse.possibleFields = [
    "responseHeader",
    "results",
    "diagnosticInfos"
];
SetPublishingModeResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(800, 0);
SetPublishingModeResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(802, 0);
SetPublishingModeResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(801, 0);
SetPublishingModeResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15342, 0);
SetPublishingModeResponse.schema.dataTypeNodeId = SetPublishingModeResponse.dataTypeNodeId;
SetPublishingModeResponse.schema.encodingDefaultBinary = SetPublishingModeResponse.encodingDefaultBinary;
SetPublishingModeResponse.schema.encodingDefaultXml = SetPublishingModeResponse.encodingDefaultXml;
SetPublishingModeResponse.schema.encodingDefaultJson = SetPublishingModeResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(SetPublishingModeResponse.dataTypeNodeId, "SetPublishingModeResponse", SetPublishingModeResponse);
// --------------------------------------------------------------------------------------------
const schemaSetTriggeringRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "SetTriggeringRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "subscriptionId",
            fieldType: "UInt32",
        },
        {
            name: "triggeringItemId",
            fieldType: "UInt32",
        },
        {
            name: "linksToAdd",
            fieldType: "UInt32",
            isArray: true
        },
        {
            name: "linksToRemove",
            fieldType: "UInt32",
            isArray: true
        },
    ]
});
class SetTriggeringRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.subscriptionId = 0;
            this.triggeringItemId = 0;
            this.linksToAdd = [];
            this.linksToRemove = [];
            return;
        }
        const schema = SetTriggeringRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.subscriptionId = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.subscriptionId);
        this.triggeringItemId = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.triggeringItemId);
        this.linksToAdd = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[3], options === null || options === void 0 ? void 0 : options.linksToAdd);
        this.linksToRemove = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[4], options === null || options === void 0 ? void 0 : options.linksToRemove);
    }
    static get schema() { return schemaSetTriggeringRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.subscriptionId, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.triggeringItemId, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.linksToAdd, stream, node_opcua_basic_types_1.encodeUInt32);
        (0, node_opcua_basic_types_1.encodeArray)(this.linksToRemove, stream, node_opcua_basic_types_1.encodeUInt32);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.subscriptionId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.subscriptionId);
        this.triggeringItemId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.triggeringItemId);
        this.linksToAdd = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUInt32);
        this.linksToRemove = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUInt32);
    }
    get schema() { return schemaSetTriggeringRequest; }
}
exports.SetTriggeringRequest = SetTriggeringRequest;
SetTriggeringRequest.possibleFields = [
    "requestHeader",
    "subscriptionId",
    "triggeringItemId",
    "linksToAdd",
    "linksToRemove"
];
SetTriggeringRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(773, 0);
SetTriggeringRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(775, 0);
SetTriggeringRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(774, 0);
SetTriggeringRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15332, 0);
SetTriggeringRequest.schema.dataTypeNodeId = SetTriggeringRequest.dataTypeNodeId;
SetTriggeringRequest.schema.encodingDefaultBinary = SetTriggeringRequest.encodingDefaultBinary;
SetTriggeringRequest.schema.encodingDefaultXml = SetTriggeringRequest.encodingDefaultXml;
SetTriggeringRequest.schema.encodingDefaultJson = SetTriggeringRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(SetTriggeringRequest.dataTypeNodeId, "SetTriggeringRequest", SetTriggeringRequest);
// --------------------------------------------------------------------------------------------
const schemaSetTriggeringResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "SetTriggeringResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "addResults",
            fieldType: "StatusCode",
            isArray: true
        },
        {
            name: "addDiagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
        {
            name: "removeResults",
            fieldType: "StatusCode",
            isArray: true
        },
        {
            name: "removeDiagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class SetTriggeringResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.addResults = [];
            this.addDiagnosticInfos = [];
            this.removeResults = [];
            this.removeDiagnosticInfos = [];
            return;
        }
        const schema = SetTriggeringResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.addResults = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.addResults);
        this.addDiagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.addDiagnosticInfos);
        this.removeResults = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[3], options === null || options === void 0 ? void 0 : options.removeResults);
        this.removeDiagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[4], options === null || options === void 0 ? void 0 : options.removeDiagnosticInfos);
    }
    static get schema() { return schemaSetTriggeringResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.addResults, stream, node_opcua_status_code_1.encodeStatusCode);
        (0, node_opcua_basic_types_1.encodeArray)(this.addDiagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
        (0, node_opcua_basic_types_1.encodeArray)(this.removeResults, stream, node_opcua_status_code_1.encodeStatusCode);
        (0, node_opcua_basic_types_1.encodeArray)(this.removeDiagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.addResults = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_status_code_1.decodeStatusCode);
        this.addDiagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
        this.removeResults = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_status_code_1.decodeStatusCode);
        this.removeDiagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaSetTriggeringResponse; }
}
exports.SetTriggeringResponse = SetTriggeringResponse;
SetTriggeringResponse.possibleFields = [
    "responseHeader",
    "addResults",
    "addDiagnosticInfos",
    "removeResults",
    "removeDiagnosticInfos"
];
SetTriggeringResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(776, 0);
SetTriggeringResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(778, 0);
SetTriggeringResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(777, 0);
SetTriggeringResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15333, 0);
SetTriggeringResponse.schema.dataTypeNodeId = SetTriggeringResponse.dataTypeNodeId;
SetTriggeringResponse.schema.encodingDefaultBinary = SetTriggeringResponse.encodingDefaultBinary;
SetTriggeringResponse.schema.encodingDefaultXml = SetTriggeringResponse.encodingDefaultXml;
SetTriggeringResponse.schema.encodingDefaultJson = SetTriggeringResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(SetTriggeringResponse.dataTypeNodeId, "SetTriggeringResponse", SetTriggeringResponse);
// --------------------------------------------------------------------------------------------
const schemaStatusChangeNotification = (0, node_opcua_factory_1.buildStructuredType)({
    name: "StatusChangeNotification",
    baseType: "NotificationData",
    fields: [
        {
            name: "status",
            fieldType: "StatusCode",
        },
        {
            name: "diagnosticInfo",
            fieldType: "DiagnosticInfo",
        },
    ]
});
class StatusChangeNotification extends NotificationData {
    constructor(options) {
        super(options);
        if (options === null) {
            this.status = node_opcua_status_code_1.StatusCodes.Good;
            this.diagnosticInfo = null;
            return;
        }
        const schema = StatusChangeNotification.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.status = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.status);
        this.diagnosticInfo = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.diagnosticInfo);
    }
    static get schema() { return schemaStatusChangeNotification; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_status_code_1.encodeStatusCode)(this.status, stream);
        (0, node_opcua_data_model_1.encodeDiagnosticInfo)(this.diagnosticInfo, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.status = (0, node_opcua_status_code_1.decodeStatusCode)(stream, this.status);
        this.diagnosticInfo = (0, node_opcua_data_model_1.decodeDiagnosticInfo)(stream, this.diagnosticInfo);
    }
    get schema() { return schemaStatusChangeNotification; }
}
exports.StatusChangeNotification = StatusChangeNotification;
StatusChangeNotification.possibleFields = [
    "status",
    "diagnosticInfo"
];
StatusChangeNotification.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(818, 0);
StatusChangeNotification.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(820, 0);
StatusChangeNotification.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(819, 0);
StatusChangeNotification.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15350, 0);
StatusChangeNotification.schema.dataTypeNodeId = StatusChangeNotification.dataTypeNodeId;
StatusChangeNotification.schema.encodingDefaultBinary = StatusChangeNotification.encodingDefaultBinary;
StatusChangeNotification.schema.encodingDefaultXml = StatusChangeNotification.encodingDefaultXml;
StatusChangeNotification.schema.encodingDefaultJson = StatusChangeNotification.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(StatusChangeNotification.dataTypeNodeId, "StatusChangeNotification", StatusChangeNotification);
// --------------------------------------------------------------------------------------------
const schemaSubscribedDataSetDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "SubscribedDataSetDataType",
    baseType: "ExtensionObject",
    fields: []
});
class SubscribedDataSetDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            return;
        }
        const schema = SubscribedDataSetDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
    }
    static get schema() { return schemaSubscribedDataSetDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
    }
    get schema() { return schemaSubscribedDataSetDataType; }
}
exports.SubscribedDataSetDataType = SubscribedDataSetDataType;
SubscribedDataSetDataType.possibleFields = [];
SubscribedDataSetDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15630, 0);
SubscribedDataSetDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15707, 0);
SubscribedDataSetDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16010, 0);
SubscribedDataSetDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16308, 0);
SubscribedDataSetDataType.schema.dataTypeNodeId = SubscribedDataSetDataType.dataTypeNodeId;
SubscribedDataSetDataType.schema.encodingDefaultBinary = SubscribedDataSetDataType.encodingDefaultBinary;
SubscribedDataSetDataType.schema.encodingDefaultXml = SubscribedDataSetDataType.encodingDefaultXml;
SubscribedDataSetDataType.schema.encodingDefaultJson = SubscribedDataSetDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(SubscribedDataSetDataType.dataTypeNodeId, "SubscribedDataSetDataType", SubscribedDataSetDataType);
// --------------------------------------------------------------------------------------------
const schemaSubscribedDataSetMirrorDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "SubscribedDataSetMirrorDataType",
    baseType: "SubscribedDataSetDataType",
    fields: [
        {
            name: "parentNodeName",
            fieldType: "UAString",
        },
        {
            name: "rolePermissions",
            fieldType: "RolePermissionType",
            isArray: true
        },
    ]
});
class SubscribedDataSetMirrorDataType extends SubscribedDataSetDataType {
    constructor(options) {
        super(options);
        if (options === null) {
            this.parentNodeName = null;
            this.rolePermissions = null; /* null array */
            return;
        }
        const schema = SubscribedDataSetMirrorDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.parentNodeName = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.parentNodeName);
        this.rolePermissions = []; // should default
        if (options.rolePermissions) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.rolePermissions));
            this.rolePermissions = options.rolePermissions.map((e) => new RolePermissionType(e));
        }
    }
    static get schema() { return schemaSubscribedDataSetMirrorDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.parentNodeName, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.rolePermissions, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.parentNodeName = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.parentNodeName);
        this.rolePermissions = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new RolePermissionType(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaSubscribedDataSetMirrorDataType; }
}
exports.SubscribedDataSetMirrorDataType = SubscribedDataSetMirrorDataType;
SubscribedDataSetMirrorDataType.possibleFields = [
    "parentNodeName",
    "rolePermissions"
];
SubscribedDataSetMirrorDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15635, 0);
SubscribedDataSetMirrorDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15713, 0);
SubscribedDataSetMirrorDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16012, 0);
SubscribedDataSetMirrorDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16311, 0);
SubscribedDataSetMirrorDataType.schema.dataTypeNodeId = SubscribedDataSetMirrorDataType.dataTypeNodeId;
SubscribedDataSetMirrorDataType.schema.encodingDefaultBinary = SubscribedDataSetMirrorDataType.encodingDefaultBinary;
SubscribedDataSetMirrorDataType.schema.encodingDefaultXml = SubscribedDataSetMirrorDataType.encodingDefaultXml;
SubscribedDataSetMirrorDataType.schema.encodingDefaultJson = SubscribedDataSetMirrorDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(SubscribedDataSetMirrorDataType.dataTypeNodeId, "SubscribedDataSetMirrorDataType", SubscribedDataSetMirrorDataType);
// --------------------------------------------------------------------------------------------
const schemaSubscriptionDiagnosticsDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "SubscriptionDiagnosticsDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "sessionId",
            fieldType: "NodeId",
        },
        {
            name: "subscriptionId",
            fieldType: "UInt32",
        },
        {
            name: "priority",
            fieldType: "Byte",
        },
        {
            name: "publishingInterval",
            fieldType: "Double",
        },
        {
            name: "maxKeepAliveCount",
            fieldType: "UInt32",
        },
        {
            name: "maxLifetimeCount",
            fieldType: "UInt32",
        },
        {
            name: "maxNotificationsPerPublish",
            fieldType: "UInt32",
        },
        {
            name: "publishingEnabled",
            fieldType: "UABoolean",
        },
        {
            name: "modifyCount",
            fieldType: "UInt32",
        },
        {
            name: "enableCount",
            fieldType: "UInt32",
        },
        {
            name: "disableCount",
            fieldType: "UInt32",
        },
        {
            name: "republishRequestCount",
            fieldType: "UInt32",
        },
        {
            name: "republishMessageRequestCount",
            fieldType: "UInt32",
        },
        {
            name: "republishMessageCount",
            fieldType: "UInt32",
        },
        {
            name: "transferRequestCount",
            fieldType: "UInt32",
        },
        {
            name: "transferredToAltClientCount",
            fieldType: "UInt32",
        },
        {
            name: "transferredToSameClientCount",
            fieldType: "UInt32",
        },
        {
            name: "publishRequestCount",
            fieldType: "UInt32",
        },
        {
            name: "dataChangeNotificationsCount",
            fieldType: "UInt32",
        },
        {
            name: "eventNotificationsCount",
            fieldType: "UInt32",
        },
        {
            name: "notificationsCount",
            fieldType: "UInt32",
        },
        {
            name: "latePublishRequestCount",
            fieldType: "UInt32",
        },
        {
            name: "currentKeepAliveCount",
            fieldType: "UInt32",
        },
        {
            name: "currentLifetimeCount",
            fieldType: "UInt32",
        },
        {
            name: "unacknowledgedMessageCount",
            fieldType: "UInt32",
        },
        {
            name: "discardedMessageCount",
            fieldType: "UInt32",
        },
        {
            name: "monitoredItemCount",
            fieldType: "UInt32",
        },
        {
            name: "disabledMonitoredItemCount",
            fieldType: "UInt32",
        },
        {
            name: "monitoringQueueOverflowCount",
            fieldType: "UInt32",
        },
        {
            name: "nextSequenceNumber",
            fieldType: "UInt32",
        },
        {
            name: "eventQueueOverFlowCount",
            fieldType: "UInt32",
        },
    ]
});
class SubscriptionDiagnosticsDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.sessionId = new node_opcua_nodeid_1.NodeId(null);
            this.subscriptionId = 0;
            this.priority = 0;
            this.publishingInterval = 0;
            this.maxKeepAliveCount = 0;
            this.maxLifetimeCount = 0;
            this.maxNotificationsPerPublish = 0;
            this.publishingEnabled = false;
            this.modifyCount = 0;
            this.enableCount = 0;
            this.disableCount = 0;
            this.republishRequestCount = 0;
            this.republishMessageRequestCount = 0;
            this.republishMessageCount = 0;
            this.transferRequestCount = 0;
            this.transferredToAltClientCount = 0;
            this.transferredToSameClientCount = 0;
            this.publishRequestCount = 0;
            this.dataChangeNotificationsCount = 0;
            this.eventNotificationsCount = 0;
            this.notificationsCount = 0;
            this.latePublishRequestCount = 0;
            this.currentKeepAliveCount = 0;
            this.currentLifetimeCount = 0;
            this.unacknowledgedMessageCount = 0;
            this.discardedMessageCount = 0;
            this.monitoredItemCount = 0;
            this.disabledMonitoredItemCount = 0;
            this.monitoringQueueOverflowCount = 0;
            this.nextSequenceNumber = 0;
            this.eventQueueOverFlowCount = 0;
            return;
        }
        const schema = SubscriptionDiagnosticsDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.sessionId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.sessionId);
        this.subscriptionId = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.subscriptionId);
        this.priority = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.priority);
        this.publishingInterval = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.publishingInterval);
        this.maxKeepAliveCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.maxKeepAliveCount);
        this.maxLifetimeCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.maxLifetimeCount);
        this.maxNotificationsPerPublish = (0, node_opcua_factory_1.initialize_field)(schema.fields[6], options === null || options === void 0 ? void 0 : options.maxNotificationsPerPublish);
        this.publishingEnabled = (0, node_opcua_factory_1.initialize_field)(schema.fields[7], options === null || options === void 0 ? void 0 : options.publishingEnabled);
        this.modifyCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[8], options === null || options === void 0 ? void 0 : options.modifyCount);
        this.enableCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[9], options === null || options === void 0 ? void 0 : options.enableCount);
        this.disableCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[10], options === null || options === void 0 ? void 0 : options.disableCount);
        this.republishRequestCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[11], options === null || options === void 0 ? void 0 : options.republishRequestCount);
        this.republishMessageRequestCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[12], options === null || options === void 0 ? void 0 : options.republishMessageRequestCount);
        this.republishMessageCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[13], options === null || options === void 0 ? void 0 : options.republishMessageCount);
        this.transferRequestCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[14], options === null || options === void 0 ? void 0 : options.transferRequestCount);
        this.transferredToAltClientCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[15], options === null || options === void 0 ? void 0 : options.transferredToAltClientCount);
        this.transferredToSameClientCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[16], options === null || options === void 0 ? void 0 : options.transferredToSameClientCount);
        this.publishRequestCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[17], options === null || options === void 0 ? void 0 : options.publishRequestCount);
        this.dataChangeNotificationsCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[18], options === null || options === void 0 ? void 0 : options.dataChangeNotificationsCount);
        this.eventNotificationsCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[19], options === null || options === void 0 ? void 0 : options.eventNotificationsCount);
        this.notificationsCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[20], options === null || options === void 0 ? void 0 : options.notificationsCount);
        this.latePublishRequestCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[21], options === null || options === void 0 ? void 0 : options.latePublishRequestCount);
        this.currentKeepAliveCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[22], options === null || options === void 0 ? void 0 : options.currentKeepAliveCount);
        this.currentLifetimeCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[23], options === null || options === void 0 ? void 0 : options.currentLifetimeCount);
        this.unacknowledgedMessageCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[24], options === null || options === void 0 ? void 0 : options.unacknowledgedMessageCount);
        this.discardedMessageCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[25], options === null || options === void 0 ? void 0 : options.discardedMessageCount);
        this.monitoredItemCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[26], options === null || options === void 0 ? void 0 : options.monitoredItemCount);
        this.disabledMonitoredItemCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[27], options === null || options === void 0 ? void 0 : options.disabledMonitoredItemCount);
        this.monitoringQueueOverflowCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[28], options === null || options === void 0 ? void 0 : options.monitoringQueueOverflowCount);
        this.nextSequenceNumber = (0, node_opcua_factory_1.initialize_field)(schema.fields[29], options === null || options === void 0 ? void 0 : options.nextSequenceNumber);
        this.eventQueueOverFlowCount = (0, node_opcua_factory_1.initialize_field)(schema.fields[30], options === null || options === void 0 ? void 0 : options.eventQueueOverFlowCount);
    }
    static get schema() { return schemaSubscriptionDiagnosticsDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.sessionId, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.subscriptionId, stream);
        (0, node_opcua_basic_types_1.encodeByte)(this.priority, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.publishingInterval, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.maxKeepAliveCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.maxLifetimeCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.maxNotificationsPerPublish, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.publishingEnabled, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.modifyCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.enableCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.disableCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.republishRequestCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.republishMessageRequestCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.republishMessageCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.transferRequestCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.transferredToAltClientCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.transferredToSameClientCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.publishRequestCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.dataChangeNotificationsCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.eventNotificationsCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.notificationsCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.latePublishRequestCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.currentKeepAliveCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.currentLifetimeCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.unacknowledgedMessageCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.discardedMessageCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.monitoredItemCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.disabledMonitoredItemCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.monitoringQueueOverflowCount, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.nextSequenceNumber, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.eventQueueOverFlowCount, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.sessionId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.sessionId);
        this.subscriptionId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.subscriptionId);
        this.priority = (0, node_opcua_basic_types_1.decodeByte)(stream, this.priority);
        this.publishingInterval = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.publishingInterval);
        this.maxKeepAliveCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.maxKeepAliveCount);
        this.maxLifetimeCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.maxLifetimeCount);
        this.maxNotificationsPerPublish = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.maxNotificationsPerPublish);
        this.publishingEnabled = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.publishingEnabled);
        this.modifyCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.modifyCount);
        this.enableCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.enableCount);
        this.disableCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.disableCount);
        this.republishRequestCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.republishRequestCount);
        this.republishMessageRequestCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.republishMessageRequestCount);
        this.republishMessageCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.republishMessageCount);
        this.transferRequestCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.transferRequestCount);
        this.transferredToAltClientCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.transferredToAltClientCount);
        this.transferredToSameClientCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.transferredToSameClientCount);
        this.publishRequestCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.publishRequestCount);
        this.dataChangeNotificationsCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.dataChangeNotificationsCount);
        this.eventNotificationsCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.eventNotificationsCount);
        this.notificationsCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.notificationsCount);
        this.latePublishRequestCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.latePublishRequestCount);
        this.currentKeepAliveCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.currentKeepAliveCount);
        this.currentLifetimeCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.currentLifetimeCount);
        this.unacknowledgedMessageCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.unacknowledgedMessageCount);
        this.discardedMessageCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.discardedMessageCount);
        this.monitoredItemCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.monitoredItemCount);
        this.disabledMonitoredItemCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.disabledMonitoredItemCount);
        this.monitoringQueueOverflowCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.monitoringQueueOverflowCount);
        this.nextSequenceNumber = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.nextSequenceNumber);
        this.eventQueueOverFlowCount = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.eventQueueOverFlowCount);
    }
    get schema() { return schemaSubscriptionDiagnosticsDataType; }
}
exports.SubscriptionDiagnosticsDataType = SubscriptionDiagnosticsDataType;
SubscriptionDiagnosticsDataType.possibleFields = [
    "sessionId",
    "subscriptionId",
    "priority",
    "publishingInterval",
    "maxKeepAliveCount",
    "maxLifetimeCount",
    "maxNotificationsPerPublish",
    "publishingEnabled",
    "modifyCount",
    "enableCount",
    "disableCount",
    "republishRequestCount",
    "republishMessageRequestCount",
    "republishMessageCount",
    "transferRequestCount",
    "transferredToAltClientCount",
    "transferredToSameClientCount",
    "publishRequestCount",
    "dataChangeNotificationsCount",
    "eventNotificationsCount",
    "notificationsCount",
    "latePublishRequestCount",
    "currentKeepAliveCount",
    "currentLifetimeCount",
    "unacknowledgedMessageCount",
    "discardedMessageCount",
    "monitoredItemCount",
    "disabledMonitoredItemCount",
    "monitoringQueueOverflowCount",
    "nextSequenceNumber",
    "eventQueueOverFlowCount"
];
SubscriptionDiagnosticsDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(874, 0);
SubscriptionDiagnosticsDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(876, 0);
SubscriptionDiagnosticsDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(875, 0);
SubscriptionDiagnosticsDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15372, 0);
SubscriptionDiagnosticsDataType.schema.dataTypeNodeId = SubscriptionDiagnosticsDataType.dataTypeNodeId;
SubscriptionDiagnosticsDataType.schema.encodingDefaultBinary = SubscriptionDiagnosticsDataType.encodingDefaultBinary;
SubscriptionDiagnosticsDataType.schema.encodingDefaultXml = SubscriptionDiagnosticsDataType.encodingDefaultXml;
SubscriptionDiagnosticsDataType.schema.encodingDefaultJson = SubscriptionDiagnosticsDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(SubscriptionDiagnosticsDataType.dataTypeNodeId, "SubscriptionDiagnosticsDataType", SubscriptionDiagnosticsDataType);
// --------------------------------------------------------------------------------------------
const schemaTargetVariablesDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "TargetVariablesDataType",
    baseType: "SubscribedDataSetDataType",
    fields: [
        {
            name: "targetVariables",
            fieldType: "FieldTargetDataType",
            isArray: true
        },
    ]
});
class TargetVariablesDataType extends SubscribedDataSetDataType {
    constructor(options) {
        super(options);
        if (options === null) {
            this.targetVariables = null; /* null array */
            return;
        }
        const schema = TargetVariablesDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.targetVariables = []; // should default
        if (options.targetVariables) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.targetVariables));
            this.targetVariables = options.targetVariables.map((e) => new FieldTargetDataType(e));
        }
    }
    static get schema() { return schemaTargetVariablesDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.targetVariables, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.targetVariables = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new FieldTargetDataType(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaTargetVariablesDataType; }
}
exports.TargetVariablesDataType = TargetVariablesDataType;
TargetVariablesDataType.possibleFields = [
    "targetVariables"
];
TargetVariablesDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15631, 0);
TargetVariablesDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15712, 0);
TargetVariablesDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16011, 0);
TargetVariablesDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16310, 0);
TargetVariablesDataType.schema.dataTypeNodeId = TargetVariablesDataType.dataTypeNodeId;
TargetVariablesDataType.schema.encodingDefaultBinary = TargetVariablesDataType.encodingDefaultBinary;
TargetVariablesDataType.schema.encodingDefaultXml = TargetVariablesDataType.encodingDefaultXml;
TargetVariablesDataType.schema.encodingDefaultJson = TargetVariablesDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(TargetVariablesDataType.dataTypeNodeId, "TargetVariablesDataType", TargetVariablesDataType);
// --------------------------------------------------------------------------------------------
const schemaThreeDCartesianCoordinates = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ThreeDCartesianCoordinates",
    baseType: "CartesianCoordinates",
    fields: [
        {
            name: "x",
            fieldType: "Double",
        },
        {
            name: "y",
            fieldType: "Double",
        },
        {
            name: "z",
            fieldType: "Double",
        },
    ]
});
class ThreeDCartesianCoordinates extends CartesianCoordinates {
    constructor(options) {
        super(options);
        if (options === null) {
            this.x = 0;
            this.y = 0;
            this.z = 0;
            return;
        }
        const schema = ThreeDCartesianCoordinates.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.x = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.x);
        this.y = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.y);
        this.z = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.z);
    }
    static get schema() { return schemaThreeDCartesianCoordinates; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.x, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.y, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.z, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.x = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.x);
        this.y = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.y);
        this.z = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.z);
    }
    get schema() { return schemaThreeDCartesianCoordinates; }
}
exports.ThreeDCartesianCoordinates = ThreeDCartesianCoordinates;
ThreeDCartesianCoordinates.possibleFields = [
    "x",
    "y",
    "z"
];
ThreeDCartesianCoordinates.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18810, 0);
ThreeDCartesianCoordinates.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18819, 0);
ThreeDCartesianCoordinates.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18855, 0);
ThreeDCartesianCoordinates.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(19068, 0);
ThreeDCartesianCoordinates.schema.dataTypeNodeId = ThreeDCartesianCoordinates.dataTypeNodeId;
ThreeDCartesianCoordinates.schema.encodingDefaultBinary = ThreeDCartesianCoordinates.encodingDefaultBinary;
ThreeDCartesianCoordinates.schema.encodingDefaultXml = ThreeDCartesianCoordinates.encodingDefaultXml;
ThreeDCartesianCoordinates.schema.encodingDefaultJson = ThreeDCartesianCoordinates.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ThreeDCartesianCoordinates.dataTypeNodeId, "ThreeDCartesianCoordinates", ThreeDCartesianCoordinates);
// --------------------------------------------------------------------------------------------
const schemaThreeDOrientation = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ThreeDOrientation",
    baseType: "Orientation",
    fields: [
        {
            name: "a",
            fieldType: "Double",
        },
        {
            name: "b",
            fieldType: "Double",
        },
        {
            name: "c",
            fieldType: "Double",
        },
    ]
});
class ThreeDOrientation extends Orientation {
    constructor(options) {
        super(options);
        if (options === null) {
            this.a = 0;
            this.b = 0;
            this.c = 0;
            return;
        }
        const schema = ThreeDOrientation.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.a = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.a);
        this.b = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.b);
        this.c = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.c);
    }
    static get schema() { return schemaThreeDOrientation; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.a, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.b, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.c, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.a = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.a);
        this.b = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.b);
        this.c = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.c);
    }
    get schema() { return schemaThreeDOrientation; }
}
exports.ThreeDOrientation = ThreeDOrientation;
ThreeDOrientation.possibleFields = [
    "a",
    "b",
    "c"
];
ThreeDOrientation.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18812, 0);
ThreeDOrientation.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18821, 0);
ThreeDOrientation.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18857, 0);
ThreeDOrientation.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(19070, 0);
ThreeDOrientation.schema.dataTypeNodeId = ThreeDOrientation.dataTypeNodeId;
ThreeDOrientation.schema.encodingDefaultBinary = ThreeDOrientation.encodingDefaultBinary;
ThreeDOrientation.schema.encodingDefaultXml = ThreeDOrientation.encodingDefaultXml;
ThreeDOrientation.schema.encodingDefaultJson = ThreeDOrientation.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ThreeDOrientation.dataTypeNodeId, "ThreeDOrientation", ThreeDOrientation);
// --------------------------------------------------------------------------------------------
const schemaThreeDFrame = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ThreeDFrame",
    baseType: "Frame",
    fields: [
        {
            name: "cartesianCoordinates",
            fieldType: "ThreeDCartesianCoordinates",
        },
        {
            name: "orientation",
            fieldType: "ThreeDOrientation",
        },
    ]
});
class ThreeDFrame extends Frame {
    constructor(options) {
        super(options);
        if (options === null) {
            this.cartesianCoordinates = new ThreeDCartesianCoordinates(null);
            this.orientation = new ThreeDOrientation(null);
            return;
        }
        const schema = ThreeDFrame.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.cartesianCoordinates = new ThreeDCartesianCoordinates(options.cartesianCoordinates);
        this.orientation = new ThreeDOrientation(options.orientation);
    }
    static get schema() { return schemaThreeDFrame; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.cartesianCoordinates.encode(stream);
        this.orientation.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.cartesianCoordinates.decode(stream);
        this.orientation.decode(stream);
    }
    get schema() { return schemaThreeDFrame; }
}
exports.ThreeDFrame = ThreeDFrame;
ThreeDFrame.possibleFields = [
    "cartesianCoordinates",
    "orientation"
];
ThreeDFrame.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18814, 0);
ThreeDFrame.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18823, 0);
ThreeDFrame.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18859, 0);
ThreeDFrame.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(19072, 0);
ThreeDFrame.schema.dataTypeNodeId = ThreeDFrame.dataTypeNodeId;
ThreeDFrame.schema.encodingDefaultBinary = ThreeDFrame.encodingDefaultBinary;
ThreeDFrame.schema.encodingDefaultXml = ThreeDFrame.encodingDefaultXml;
ThreeDFrame.schema.encodingDefaultJson = ThreeDFrame.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ThreeDFrame.dataTypeNodeId, "ThreeDFrame", ThreeDFrame);
// --------------------------------------------------------------------------------------------
const schemaVector = (0, node_opcua_factory_1.buildStructuredType)({
    name: "Vector",
    baseType: "ExtensionObject",
    fields: []
});
class Vector extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            return;
        }
        const schema = Vector.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
    }
    static get schema() { return schemaVector; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
    }
    get schema() { return schemaVector; }
}
exports.Vector = Vector;
Vector.possibleFields = [];
Vector.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18807, 0);
Vector.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18816, 0);
Vector.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18852, 0);
Vector.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(19065, 0);
Vector.schema.dataTypeNodeId = Vector.dataTypeNodeId;
Vector.schema.encodingDefaultBinary = Vector.encodingDefaultBinary;
Vector.schema.encodingDefaultXml = Vector.encodingDefaultXml;
Vector.schema.encodingDefaultJson = Vector.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(Vector.dataTypeNodeId, "Vector", Vector);
// --------------------------------------------------------------------------------------------
const schemaThreeDVector = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ThreeDVector",
    baseType: "Vector",
    fields: [
        {
            name: "x",
            fieldType: "Double",
        },
        {
            name: "y",
            fieldType: "Double",
        },
        {
            name: "z",
            fieldType: "Double",
        },
    ]
});
class ThreeDVector extends Vector {
    constructor(options) {
        super(options);
        if (options === null) {
            this.x = 0;
            this.y = 0;
            this.z = 0;
            return;
        }
        const schema = ThreeDVector.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.x = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.x);
        this.y = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.y);
        this.z = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.z);
    }
    static get schema() { return schemaThreeDVector; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.x, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.y, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.z, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.x = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.x);
        this.y = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.y);
        this.z = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.z);
    }
    get schema() { return schemaThreeDVector; }
}
exports.ThreeDVector = ThreeDVector;
ThreeDVector.possibleFields = [
    "x",
    "y",
    "z"
];
ThreeDVector.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18808, 0);
ThreeDVector.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18817, 0);
ThreeDVector.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(18853, 0);
ThreeDVector.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(19066, 0);
ThreeDVector.schema.dataTypeNodeId = ThreeDVector.dataTypeNodeId;
ThreeDVector.schema.encodingDefaultBinary = ThreeDVector.encodingDefaultBinary;
ThreeDVector.schema.encodingDefaultXml = ThreeDVector.encodingDefaultXml;
ThreeDVector.schema.encodingDefaultJson = ThreeDVector.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ThreeDVector.dataTypeNodeId, "ThreeDVector", ThreeDVector);
// --------------------------------------------------------------------------------------------
const schemaTimeZoneDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "TimeZoneDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "offset",
            fieldType: "Int16",
        },
        {
            name: "daylightSavingInOffset",
            fieldType: "UABoolean",
        },
    ]
});
class TimeZoneDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.offset = 0;
            this.daylightSavingInOffset = false;
            return;
        }
        const schema = TimeZoneDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.offset = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.offset);
        this.daylightSavingInOffset = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.daylightSavingInOffset);
    }
    static get schema() { return schemaTimeZoneDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeInt16)(this.offset, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.daylightSavingInOffset, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.offset = (0, node_opcua_basic_types_1.decodeInt16)(stream, this.offset);
        this.daylightSavingInOffset = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.daylightSavingInOffset);
    }
    get schema() { return schemaTimeZoneDataType; }
}
exports.TimeZoneDataType = TimeZoneDataType;
TimeZoneDataType.possibleFields = [
    "offset",
    "daylightSavingInOffset"
];
TimeZoneDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(8912, 0);
TimeZoneDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(8917, 0);
TimeZoneDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(8913, 0);
TimeZoneDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15086, 0);
TimeZoneDataType.schema.dataTypeNodeId = TimeZoneDataType.dataTypeNodeId;
TimeZoneDataType.schema.encodingDefaultBinary = TimeZoneDataType.encodingDefaultBinary;
TimeZoneDataType.schema.encodingDefaultXml = TimeZoneDataType.encodingDefaultXml;
TimeZoneDataType.schema.encodingDefaultJson = TimeZoneDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(TimeZoneDataType.dataTypeNodeId, "TimeZoneDataType", TimeZoneDataType);
// --------------------------------------------------------------------------------------------
const schemaTransferResult = (0, node_opcua_factory_1.buildStructuredType)({
    name: "TransferResult",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "statusCode",
            fieldType: "StatusCode",
        },
        {
            name: "availableSequenceNumbers",
            fieldType: "UInt32",
            isArray: true
        },
    ]
});
class TransferResult extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.statusCode = node_opcua_status_code_1.StatusCodes.Good;
            this.availableSequenceNumbers = [];
            return;
        }
        const schema = TransferResult.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.statusCode = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.statusCode);
        this.availableSequenceNumbers = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.availableSequenceNumbers);
    }
    static get schema() { return schemaTransferResult; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_status_code_1.encodeStatusCode)(this.statusCode, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.availableSequenceNumbers, stream, node_opcua_basic_types_1.encodeUInt32);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.statusCode = (0, node_opcua_status_code_1.decodeStatusCode)(stream, this.statusCode);
        this.availableSequenceNumbers = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUInt32);
    }
    get schema() { return schemaTransferResult; }
}
exports.TransferResult = TransferResult;
TransferResult.possibleFields = [
    "statusCode",
    "availableSequenceNumbers"
];
TransferResult.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(836, 0);
TransferResult.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(838, 0);
TransferResult.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(837, 0);
TransferResult.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15356, 0);
TransferResult.schema.dataTypeNodeId = TransferResult.dataTypeNodeId;
TransferResult.schema.encodingDefaultBinary = TransferResult.encodingDefaultBinary;
TransferResult.schema.encodingDefaultXml = TransferResult.encodingDefaultXml;
TransferResult.schema.encodingDefaultJson = TransferResult.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(TransferResult.dataTypeNodeId, "TransferResult", TransferResult);
// --------------------------------------------------------------------------------------------
const schemaTransferSubscriptionsRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "TransferSubscriptionsRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "subscriptionIds",
            fieldType: "UInt32",
            isArray: true
        },
        {
            name: "sendInitialValues",
            fieldType: "UABoolean",
        },
    ]
});
class TransferSubscriptionsRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.subscriptionIds = [];
            this.sendInitialValues = false;
            return;
        }
        const schema = TransferSubscriptionsRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.subscriptionIds = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.subscriptionIds);
        this.sendInitialValues = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.sendInitialValues);
    }
    static get schema() { return schemaTransferSubscriptionsRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.subscriptionIds, stream, node_opcua_basic_types_1.encodeUInt32);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.sendInitialValues, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.subscriptionIds = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUInt32);
        this.sendInitialValues = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.sendInitialValues);
    }
    get schema() { return schemaTransferSubscriptionsRequest; }
}
exports.TransferSubscriptionsRequest = TransferSubscriptionsRequest;
TransferSubscriptionsRequest.possibleFields = [
    "requestHeader",
    "subscriptionIds",
    "sendInitialValues"
];
TransferSubscriptionsRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(839, 0);
TransferSubscriptionsRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(841, 0);
TransferSubscriptionsRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(840, 0);
TransferSubscriptionsRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15357, 0);
TransferSubscriptionsRequest.schema.dataTypeNodeId = TransferSubscriptionsRequest.dataTypeNodeId;
TransferSubscriptionsRequest.schema.encodingDefaultBinary = TransferSubscriptionsRequest.encodingDefaultBinary;
TransferSubscriptionsRequest.schema.encodingDefaultXml = TransferSubscriptionsRequest.encodingDefaultXml;
TransferSubscriptionsRequest.schema.encodingDefaultJson = TransferSubscriptionsRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(TransferSubscriptionsRequest.dataTypeNodeId, "TransferSubscriptionsRequest", TransferSubscriptionsRequest);
// --------------------------------------------------------------------------------------------
const schemaTransferSubscriptionsResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "TransferSubscriptionsResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "results",
            fieldType: "TransferResult",
            isArray: true
        },
        {
            name: "diagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class TransferSubscriptionsResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.results = null; /* null array */
            this.diagnosticInfos = [];
            return;
        }
        const schema = TransferSubscriptionsResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.results = []; // should default
        if (options.results) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.results));
            this.results = options.results.map((e) => new TransferResult(e));
        }
        this.diagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.diagnosticInfos);
    }
    static get schema() { return schemaTransferSubscriptionsResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.results, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.diagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.results = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new TransferResult(null);
            obj.decode(stream1);
            return obj;
        });
        this.diagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaTransferSubscriptionsResponse; }
}
exports.TransferSubscriptionsResponse = TransferSubscriptionsResponse;
TransferSubscriptionsResponse.possibleFields = [
    "responseHeader",
    "results",
    "diagnosticInfos"
];
TransferSubscriptionsResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(842, 0);
TransferSubscriptionsResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(844, 0);
TransferSubscriptionsResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(843, 0);
TransferSubscriptionsResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15358, 0);
TransferSubscriptionsResponse.schema.dataTypeNodeId = TransferSubscriptionsResponse.dataTypeNodeId;
TransferSubscriptionsResponse.schema.encodingDefaultBinary = TransferSubscriptionsResponse.encodingDefaultBinary;
TransferSubscriptionsResponse.schema.encodingDefaultXml = TransferSubscriptionsResponse.encodingDefaultXml;
TransferSubscriptionsResponse.schema.encodingDefaultJson = TransferSubscriptionsResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(TransferSubscriptionsResponse.dataTypeNodeId, "TransferSubscriptionsResponse", TransferSubscriptionsResponse);
// --------------------------------------------------------------------------------------------
const schemaTranslateBrowsePathsToNodeIdsRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "TranslateBrowsePathsToNodeIdsRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "browsePaths",
            fieldType: "BrowsePath",
            isArray: true
        },
    ]
});
class TranslateBrowsePathsToNodeIdsRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.browsePaths = null; /* null array */
            return;
        }
        const schema = TranslateBrowsePathsToNodeIdsRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.browsePaths = []; // should default
        if (options.browsePaths) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.browsePaths));
            this.browsePaths = options.browsePaths.map((e) => new BrowsePath(e));
        }
    }
    static get schema() { return schemaTranslateBrowsePathsToNodeIdsRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.browsePaths, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.browsePaths = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new BrowsePath(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaTranslateBrowsePathsToNodeIdsRequest; }
}
exports.TranslateBrowsePathsToNodeIdsRequest = TranslateBrowsePathsToNodeIdsRequest;
TranslateBrowsePathsToNodeIdsRequest.possibleFields = [
    "requestHeader",
    "browsePaths"
];
TranslateBrowsePathsToNodeIdsRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(552, 0);
TranslateBrowsePathsToNodeIdsRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(554, 0);
TranslateBrowsePathsToNodeIdsRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(553, 0);
TranslateBrowsePathsToNodeIdsRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15193, 0);
TranslateBrowsePathsToNodeIdsRequest.schema.dataTypeNodeId = TranslateBrowsePathsToNodeIdsRequest.dataTypeNodeId;
TranslateBrowsePathsToNodeIdsRequest.schema.encodingDefaultBinary = TranslateBrowsePathsToNodeIdsRequest.encodingDefaultBinary;
TranslateBrowsePathsToNodeIdsRequest.schema.encodingDefaultXml = TranslateBrowsePathsToNodeIdsRequest.encodingDefaultXml;
TranslateBrowsePathsToNodeIdsRequest.schema.encodingDefaultJson = TranslateBrowsePathsToNodeIdsRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(TranslateBrowsePathsToNodeIdsRequest.dataTypeNodeId, "TranslateBrowsePathsToNodeIdsRequest", TranslateBrowsePathsToNodeIdsRequest);
// --------------------------------------------------------------------------------------------
const schemaTranslateBrowsePathsToNodeIdsResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "TranslateBrowsePathsToNodeIdsResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "results",
            fieldType: "BrowsePathResult",
            isArray: true
        },
        {
            name: "diagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class TranslateBrowsePathsToNodeIdsResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.results = null; /* null array */
            this.diagnosticInfos = [];
            return;
        }
        const schema = TranslateBrowsePathsToNodeIdsResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.results = []; // should default
        if (options.results) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.results));
            this.results = options.results.map((e) => new BrowsePathResult(e));
        }
        this.diagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.diagnosticInfos);
    }
    static get schema() { return schemaTranslateBrowsePathsToNodeIdsResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.results, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.diagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.results = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new BrowsePathResult(null);
            obj.decode(stream1);
            return obj;
        });
        this.diagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaTranslateBrowsePathsToNodeIdsResponse; }
}
exports.TranslateBrowsePathsToNodeIdsResponse = TranslateBrowsePathsToNodeIdsResponse;
TranslateBrowsePathsToNodeIdsResponse.possibleFields = [
    "responseHeader",
    "results",
    "diagnosticInfos"
];
TranslateBrowsePathsToNodeIdsResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(555, 0);
TranslateBrowsePathsToNodeIdsResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(557, 0);
TranslateBrowsePathsToNodeIdsResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(556, 0);
TranslateBrowsePathsToNodeIdsResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15194, 0);
TranslateBrowsePathsToNodeIdsResponse.schema.dataTypeNodeId = TranslateBrowsePathsToNodeIdsResponse.dataTypeNodeId;
TranslateBrowsePathsToNodeIdsResponse.schema.encodingDefaultBinary = TranslateBrowsePathsToNodeIdsResponse.encodingDefaultBinary;
TranslateBrowsePathsToNodeIdsResponse.schema.encodingDefaultXml = TranslateBrowsePathsToNodeIdsResponse.encodingDefaultXml;
TranslateBrowsePathsToNodeIdsResponse.schema.encodingDefaultJson = TranslateBrowsePathsToNodeIdsResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(TranslateBrowsePathsToNodeIdsResponse.dataTypeNodeId, "TranslateBrowsePathsToNodeIdsResponse", TranslateBrowsePathsToNodeIdsResponse);
// --------------------------------------------------------------------------------------------
const schemaTrustListDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "TrustListDataType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "specifiedLists",
            fieldType: "UInt32",
        },
        {
            name: "trustedCertificates",
            fieldType: "ByteString",
            isArray: true
        },
        {
            name: "trustedCrls",
            fieldType: "ByteString",
            isArray: true
        },
        {
            name: "issuerCertificates",
            fieldType: "ByteString",
            isArray: true
        },
        {
            name: "issuerCrls",
            fieldType: "ByteString",
            isArray: true
        },
    ]
});
class TrustListDataType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.specifiedLists = 0;
            this.trustedCertificates = [];
            this.trustedCrls = [];
            this.issuerCertificates = [];
            this.issuerCrls = [];
            return;
        }
        const schema = TrustListDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.specifiedLists = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.specifiedLists);
        this.trustedCertificates = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.trustedCertificates);
        this.trustedCrls = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.trustedCrls);
        this.issuerCertificates = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[3], options === null || options === void 0 ? void 0 : options.issuerCertificates);
        this.issuerCrls = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[4], options === null || options === void 0 ? void 0 : options.issuerCrls);
    }
    static get schema() { return schemaTrustListDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.specifiedLists, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.trustedCertificates, stream, node_opcua_basic_types_1.encodeByteString);
        (0, node_opcua_basic_types_1.encodeArray)(this.trustedCrls, stream, node_opcua_basic_types_1.encodeByteString);
        (0, node_opcua_basic_types_1.encodeArray)(this.issuerCertificates, stream, node_opcua_basic_types_1.encodeByteString);
        (0, node_opcua_basic_types_1.encodeArray)(this.issuerCrls, stream, node_opcua_basic_types_1.encodeByteString);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.specifiedLists = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.specifiedLists);
        this.trustedCertificates = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeByteString);
        this.trustedCrls = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeByteString);
        this.issuerCertificates = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeByteString);
        this.issuerCrls = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeByteString);
    }
    get schema() { return schemaTrustListDataType; }
}
exports.TrustListDataType = TrustListDataType;
TrustListDataType.possibleFields = [
    "specifiedLists",
    "trustedCertificates",
    "trustedCrls",
    "issuerCertificates",
    "issuerCrls"
];
TrustListDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12554, 0);
TrustListDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12680, 0);
TrustListDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12676, 0);
TrustListDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15044, 0);
TrustListDataType.schema.dataTypeNodeId = TrustListDataType.dataTypeNodeId;
TrustListDataType.schema.encodingDefaultBinary = TrustListDataType.encodingDefaultBinary;
TrustListDataType.schema.encodingDefaultXml = TrustListDataType.encodingDefaultXml;
TrustListDataType.schema.encodingDefaultJson = TrustListDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(TrustListDataType.dataTypeNodeId, "TrustListDataType", TrustListDataType);
// --------------------------------------------------------------------------------------------
const schemaUABinaryFileDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "UABinaryFileDataType",
    baseType: "DataTypeSchemaHeader",
    fields: [
        {
            name: "schemaLocation",
            fieldType: "UAString",
        },
        {
            name: "fileHeader",
            fieldType: "KeyValuePair",
            isArray: true
        },
        {
            name: "body",
            fieldType: "Variant",
        },
    ]
});
class UABinaryFileDataType extends DataTypeSchemaHeader {
    constructor(options) {
        super(options);
        if (options === null) {
            this.schemaLocation = null;
            this.fileHeader = null; /* null array */
            this.body = new node_opcua_variant_1.Variant(null);
            return;
        }
        const schema = UABinaryFileDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.schemaLocation = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.schemaLocation);
        this.fileHeader = []; // should default
        if (options.fileHeader) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.fileHeader));
            this.fileHeader = options.fileHeader.map((e) => new KeyValuePair(e));
        }
        this.body = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.body);
    }
    static get schema() { return schemaUABinaryFileDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.schemaLocation, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.fileHeader, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_variant_1.encodeVariant)(this.body, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.schemaLocation = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.schemaLocation);
        this.fileHeader = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new KeyValuePair(null);
            obj.decode(stream1);
            return obj;
        });
        this.body = (0, node_opcua_variant_1.decodeVariant)(stream, this.body);
    }
    get schema() { return schemaUABinaryFileDataType; }
}
exports.UABinaryFileDataType = UABinaryFileDataType;
UABinaryFileDataType.possibleFields = [
    "schemaLocation",
    "fileHeader",
    "body"
];
UABinaryFileDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15006, 0);
UABinaryFileDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15422, 0);
UABinaryFileDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15531, 0);
UABinaryFileDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15714, 0);
UABinaryFileDataType.schema.dataTypeNodeId = UABinaryFileDataType.dataTypeNodeId;
UABinaryFileDataType.schema.encodingDefaultBinary = UABinaryFileDataType.encodingDefaultBinary;
UABinaryFileDataType.schema.encodingDefaultXml = UABinaryFileDataType.encodingDefaultXml;
UABinaryFileDataType.schema.encodingDefaultJson = UABinaryFileDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(UABinaryFileDataType.dataTypeNodeId, "UABinaryFileDataType", UABinaryFileDataType);
// --------------------------------------------------------------------------------------------
var UadpNetworkMessageContentMask;
(function (UadpNetworkMessageContentMask) {
    UadpNetworkMessageContentMask[UadpNetworkMessageContentMask["None"] = 0] = "None";
    UadpNetworkMessageContentMask[UadpNetworkMessageContentMask["PublisherId"] = 1] = "PublisherId";
    UadpNetworkMessageContentMask[UadpNetworkMessageContentMask["GroupHeader"] = 2] = "GroupHeader";
    UadpNetworkMessageContentMask[UadpNetworkMessageContentMask["WriterGroupId"] = 4] = "WriterGroupId";
    UadpNetworkMessageContentMask[UadpNetworkMessageContentMask["GroupVersion"] = 8] = "GroupVersion";
    UadpNetworkMessageContentMask[UadpNetworkMessageContentMask["NetworkMessageNumber"] = 16] = "NetworkMessageNumber";
    UadpNetworkMessageContentMask[UadpNetworkMessageContentMask["SequenceNumber"] = 32] = "SequenceNumber";
    UadpNetworkMessageContentMask[UadpNetworkMessageContentMask["PayloadHeader"] = 64] = "PayloadHeader";
    UadpNetworkMessageContentMask[UadpNetworkMessageContentMask["Timestamp"] = 128] = "Timestamp";
    UadpNetworkMessageContentMask[UadpNetworkMessageContentMask["PicoSeconds"] = 256] = "PicoSeconds";
    UadpNetworkMessageContentMask[UadpNetworkMessageContentMask["DataSetClassId"] = 512] = "DataSetClassId";
    UadpNetworkMessageContentMask[UadpNetworkMessageContentMask["PromotedFields"] = 1024] = "PromotedFields";
})(UadpNetworkMessageContentMask = exports.UadpNetworkMessageContentMask || (exports.UadpNetworkMessageContentMask = {}));
const schemaUadpNetworkMessageContentMask = {
    enumValues: UadpNetworkMessageContentMask,
    flaggable: true,
    name: "UadpNetworkMessageContentMask"
};
function decodeUadpNetworkMessageContentMask(stream, _value) {
    return stream.readUInt32();
}
function encodeUadpNetworkMessageContentMask(value, stream) {
    stream.writeUInt32(value);
}
exports._enumerationUadpNetworkMessageContentMask = (0, node_opcua_factory_1.registerEnumeration)(schemaUadpNetworkMessageContentMask);
(0, node_opcua_assert_1.assert)(exports._enumerationUadpNetworkMessageContentMask.isFlaggable === true);
// --------------------------------------------------------------------------------------------
var UadpDataSetMessageContentMask;
(function (UadpDataSetMessageContentMask) {
    UadpDataSetMessageContentMask[UadpDataSetMessageContentMask["None"] = 0] = "None";
    UadpDataSetMessageContentMask[UadpDataSetMessageContentMask["Timestamp"] = 1] = "Timestamp";
    UadpDataSetMessageContentMask[UadpDataSetMessageContentMask["PicoSeconds"] = 2] = "PicoSeconds";
    UadpDataSetMessageContentMask[UadpDataSetMessageContentMask["Status"] = 4] = "Status";
    UadpDataSetMessageContentMask[UadpDataSetMessageContentMask["MajorVersion"] = 8] = "MajorVersion";
    UadpDataSetMessageContentMask[UadpDataSetMessageContentMask["MinorVersion"] = 16] = "MinorVersion";
    UadpDataSetMessageContentMask[UadpDataSetMessageContentMask["SequenceNumber"] = 32] = "SequenceNumber";
})(UadpDataSetMessageContentMask = exports.UadpDataSetMessageContentMask || (exports.UadpDataSetMessageContentMask = {}));
const schemaUadpDataSetMessageContentMask = {
    enumValues: UadpDataSetMessageContentMask,
    flaggable: true,
    name: "UadpDataSetMessageContentMask"
};
function decodeUadpDataSetMessageContentMask(stream, _value) {
    return stream.readUInt32();
}
function encodeUadpDataSetMessageContentMask(value, stream) {
    stream.writeUInt32(value);
}
exports._enumerationUadpDataSetMessageContentMask = (0, node_opcua_factory_1.registerEnumeration)(schemaUadpDataSetMessageContentMask);
(0, node_opcua_assert_1.assert)(exports._enumerationUadpDataSetMessageContentMask.isFlaggable === true);
// --------------------------------------------------------------------------------------------
const schemaUadpDataSetReaderMessageDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "UadpDataSetReaderMessageDataType",
    baseType: "DataSetReaderMessageDataType",
    fields: [
        {
            name: "groupVersion",
            fieldType: "UInt32",
        },
        {
            name: "networkMessageNumber",
            fieldType: "UInt16",
        },
        {
            name: "dataSetOffset",
            fieldType: "UInt16",
        },
        {
            name: "dataSetClassId",
            fieldType: "Guid",
        },
        {
            name: "networkMessageContentMask",
            fieldType: "UadpNetworkMessageContentMask",
        },
        {
            name: "dataSetMessageContentMask",
            fieldType: "UadpDataSetMessageContentMask",
        },
        {
            name: "publishingInterval",
            fieldType: "Double",
        },
        {
            name: "receiveOffset",
            fieldType: "Double",
        },
        {
            name: "processingOffset",
            fieldType: "Double",
        },
    ]
});
class UadpDataSetReaderMessageDataType extends DataSetReaderMessageDataType {
    constructor(options) {
        super(options);
        if (options === null) {
            this.groupVersion = 0;
            this.networkMessageNumber = 0;
            this.dataSetOffset = 0;
            this.dataSetClassId = "";
            this.networkMessageContentMask = 0;
            this.dataSetMessageContentMask = 0;
            this.publishingInterval = 0;
            this.receiveOffset = 0;
            this.processingOffset = 0;
            return;
        }
        const schema = UadpDataSetReaderMessageDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.groupVersion = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.groupVersion);
        this.networkMessageNumber = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.networkMessageNumber);
        this.dataSetOffset = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.dataSetOffset);
        this.dataSetClassId = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.dataSetClassId);
        this.networkMessageContentMask = this.setNetworkMessageContentMask((0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.networkMessageContentMask));
        this.dataSetMessageContentMask = this.setDataSetMessageContentMask((0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.dataSetMessageContentMask));
        this.publishingInterval = (0, node_opcua_factory_1.initialize_field)(schema.fields[6], options === null || options === void 0 ? void 0 : options.publishingInterval);
        this.receiveOffset = (0, node_opcua_factory_1.initialize_field)(schema.fields[7], options === null || options === void 0 ? void 0 : options.receiveOffset);
        this.processingOffset = (0, node_opcua_factory_1.initialize_field)(schema.fields[8], options === null || options === void 0 ? void 0 : options.processingOffset);
    }
    static get schema() { return schemaUadpDataSetReaderMessageDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.groupVersion, stream);
        (0, node_opcua_basic_types_1.encodeUInt16)(this.networkMessageNumber, stream);
        (0, node_opcua_basic_types_1.encodeUInt16)(this.dataSetOffset, stream);
        (0, node_opcua_basic_types_1.encodeGuid)(this.dataSetClassId, stream);
        encodeUadpNetworkMessageContentMask(this.networkMessageContentMask, stream);
        encodeUadpDataSetMessageContentMask(this.dataSetMessageContentMask, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.publishingInterval, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.receiveOffset, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.processingOffset, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.groupVersion = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.groupVersion);
        this.networkMessageNumber = (0, node_opcua_basic_types_1.decodeUInt16)(stream, this.networkMessageNumber);
        this.dataSetOffset = (0, node_opcua_basic_types_1.decodeUInt16)(stream, this.dataSetOffset);
        this.dataSetClassId = (0, node_opcua_basic_types_1.decodeGuid)(stream, this.dataSetClassId);
        this.networkMessageContentMask = decodeUadpNetworkMessageContentMask(stream, this.networkMessageContentMask);
        this.dataSetMessageContentMask = decodeUadpDataSetMessageContentMask(stream, this.dataSetMessageContentMask);
        this.publishingInterval = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.publishingInterval);
        this.receiveOffset = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.receiveOffset);
        this.processingOffset = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.processingOffset);
    }
    // Define Enumeration setters
    setNetworkMessageContentMask(value) {
        const coercedValue = exports._enumerationUadpNetworkMessageContentMask.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to UadpNetworkMessageContentMask :" + value);
        }
        this.networkMessageContentMask = coercedValue.value;
        return this.networkMessageContentMask;
    }
    setDataSetMessageContentMask(value) {
        const coercedValue = exports._enumerationUadpDataSetMessageContentMask.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to UadpDataSetMessageContentMask :" + value);
        }
        this.dataSetMessageContentMask = coercedValue.value;
        return this.dataSetMessageContentMask;
    }
    get schema() { return schemaUadpDataSetReaderMessageDataType; }
}
exports.UadpDataSetReaderMessageDataType = UadpDataSetReaderMessageDataType;
UadpDataSetReaderMessageDataType.possibleFields = [
    "groupVersion",
    "networkMessageNumber",
    "dataSetOffset",
    "dataSetClassId",
    "networkMessageContentMask",
    "dataSetMessageContentMask",
    "publishingInterval",
    "receiveOffset",
    "processingOffset"
];
UadpDataSetReaderMessageDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15653, 0);
UadpDataSetReaderMessageDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15718, 0);
UadpDataSetReaderMessageDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16016, 0);
UadpDataSetReaderMessageDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16392, 0);
UadpDataSetReaderMessageDataType.schema.dataTypeNodeId = UadpDataSetReaderMessageDataType.dataTypeNodeId;
UadpDataSetReaderMessageDataType.schema.encodingDefaultBinary = UadpDataSetReaderMessageDataType.encodingDefaultBinary;
UadpDataSetReaderMessageDataType.schema.encodingDefaultXml = UadpDataSetReaderMessageDataType.encodingDefaultXml;
UadpDataSetReaderMessageDataType.schema.encodingDefaultJson = UadpDataSetReaderMessageDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(UadpDataSetReaderMessageDataType.dataTypeNodeId, "UadpDataSetReaderMessageDataType", UadpDataSetReaderMessageDataType);
// --------------------------------------------------------------------------------------------
const schemaUadpDataSetWriterMessageDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "UadpDataSetWriterMessageDataType",
    baseType: "DataSetWriterMessageDataType",
    fields: [
        {
            name: "dataSetMessageContentMask",
            fieldType: "UadpDataSetMessageContentMask",
        },
        {
            name: "configuredSize",
            fieldType: "UInt16",
        },
        {
            name: "networkMessageNumber",
            fieldType: "UInt16",
        },
        {
            name: "dataSetOffset",
            fieldType: "UInt16",
        },
    ]
});
class UadpDataSetWriterMessageDataType extends DataSetWriterMessageDataType {
    constructor(options) {
        super(options);
        if (options === null) {
            this.dataSetMessageContentMask = 0;
            this.configuredSize = 0;
            this.networkMessageNumber = 0;
            this.dataSetOffset = 0;
            return;
        }
        const schema = UadpDataSetWriterMessageDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.dataSetMessageContentMask = this.setDataSetMessageContentMask((0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.dataSetMessageContentMask));
        this.configuredSize = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.configuredSize);
        this.networkMessageNumber = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.networkMessageNumber);
        this.dataSetOffset = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.dataSetOffset);
    }
    static get schema() { return schemaUadpDataSetWriterMessageDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        encodeUadpDataSetMessageContentMask(this.dataSetMessageContentMask, stream);
        (0, node_opcua_basic_types_1.encodeUInt16)(this.configuredSize, stream);
        (0, node_opcua_basic_types_1.encodeUInt16)(this.networkMessageNumber, stream);
        (0, node_opcua_basic_types_1.encodeUInt16)(this.dataSetOffset, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.dataSetMessageContentMask = decodeUadpDataSetMessageContentMask(stream, this.dataSetMessageContentMask);
        this.configuredSize = (0, node_opcua_basic_types_1.decodeUInt16)(stream, this.configuredSize);
        this.networkMessageNumber = (0, node_opcua_basic_types_1.decodeUInt16)(stream, this.networkMessageNumber);
        this.dataSetOffset = (0, node_opcua_basic_types_1.decodeUInt16)(stream, this.dataSetOffset);
    }
    // Define Enumeration setters
    setDataSetMessageContentMask(value) {
        const coercedValue = exports._enumerationUadpDataSetMessageContentMask.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to UadpDataSetMessageContentMask :" + value);
        }
        this.dataSetMessageContentMask = coercedValue.value;
        return this.dataSetMessageContentMask;
    }
    get schema() { return schemaUadpDataSetWriterMessageDataType; }
}
exports.UadpDataSetWriterMessageDataType = UadpDataSetWriterMessageDataType;
UadpDataSetWriterMessageDataType.possibleFields = [
    "dataSetMessageContentMask",
    "configuredSize",
    "networkMessageNumber",
    "dataSetOffset"
];
UadpDataSetWriterMessageDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15652, 0);
UadpDataSetWriterMessageDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15717, 0);
UadpDataSetWriterMessageDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16015, 0);
UadpDataSetWriterMessageDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16391, 0);
UadpDataSetWriterMessageDataType.schema.dataTypeNodeId = UadpDataSetWriterMessageDataType.dataTypeNodeId;
UadpDataSetWriterMessageDataType.schema.encodingDefaultBinary = UadpDataSetWriterMessageDataType.encodingDefaultBinary;
UadpDataSetWriterMessageDataType.schema.encodingDefaultXml = UadpDataSetWriterMessageDataType.encodingDefaultXml;
UadpDataSetWriterMessageDataType.schema.encodingDefaultJson = UadpDataSetWriterMessageDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(UadpDataSetWriterMessageDataType.dataTypeNodeId, "UadpDataSetWriterMessageDataType", UadpDataSetWriterMessageDataType);
// --------------------------------------------------------------------------------------------
var DataSetOrderingType;
(function (DataSetOrderingType) {
    DataSetOrderingType[DataSetOrderingType["Undefined"] = 0] = "Undefined";
    DataSetOrderingType[DataSetOrderingType["AscendingWriterId"] = 1] = "AscendingWriterId";
    DataSetOrderingType[DataSetOrderingType["AscendingWriterIdSingle"] = 2] = "AscendingWriterIdSingle";
    DataSetOrderingType[DataSetOrderingType["Invalid"] = 4294967295] = "Invalid";
})(DataSetOrderingType = exports.DataSetOrderingType || (exports.DataSetOrderingType = {}));
const schemaDataSetOrderingType = {
    enumValues: DataSetOrderingType,
    flaggable: false,
    minValue: 0,
    maxValue: 2,
    name: "DataSetOrderingType"
};
function decodeDataSetOrderingType(stream, _value) {
    let value = stream.readUInt32();
    value = (value < schemaDataSetOrderingType.minValue || value > schemaDataSetOrderingType.maxValue) ? DataSetOrderingType.Invalid : value;
    return value;
}
function encodeDataSetOrderingType(value, stream) {
    stream.writeUInt32(value);
}
exports._enumerationDataSetOrderingType = (0, node_opcua_factory_1.registerEnumeration)(schemaDataSetOrderingType);
(0, node_opcua_assert_1.assert)(exports._enumerationDataSetOrderingType.isFlaggable === false);
// --------------------------------------------------------------------------------------------
const schemaUadpWriterGroupMessageDataType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "UadpWriterGroupMessageDataType",
    baseType: "WriterGroupMessageDataType",
    fields: [
        {
            name: "groupVersion",
            fieldType: "UInt32",
        },
        {
            name: "dataSetOrdering",
            fieldType: "DataSetOrderingType",
        },
        {
            name: "networkMessageContentMask",
            fieldType: "UadpNetworkMessageContentMask",
        },
        {
            name: "samplingOffset",
            fieldType: "Double",
        },
        {
            name: "publishingOffset",
            fieldType: "Double",
            isArray: true
        },
    ]
});
class UadpWriterGroupMessageDataType extends WriterGroupMessageDataType {
    constructor(options) {
        super(options);
        if (options === null) {
            this.groupVersion = 0;
            this.dataSetOrdering = 0;
            this.networkMessageContentMask = 0;
            this.samplingOffset = 0;
            this.publishingOffset = [];
            return;
        }
        const schema = UadpWriterGroupMessageDataType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.groupVersion = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.groupVersion);
        this.dataSetOrdering = this.setDataSetOrdering((0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.dataSetOrdering));
        this.networkMessageContentMask = this.setNetworkMessageContentMask((0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.networkMessageContentMask));
        this.samplingOffset = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.samplingOffset);
        this.publishingOffset = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[4], options === null || options === void 0 ? void 0 : options.publishingOffset);
    }
    static get schema() { return schemaUadpWriterGroupMessageDataType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.groupVersion, stream);
        encodeDataSetOrderingType(this.dataSetOrdering, stream);
        encodeUadpNetworkMessageContentMask(this.networkMessageContentMask, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.samplingOffset, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.publishingOffset, stream, node_opcua_basic_types_1.encodeDouble);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.groupVersion = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.groupVersion);
        this.dataSetOrdering = decodeDataSetOrderingType(stream, this.dataSetOrdering);
        this.networkMessageContentMask = decodeUadpNetworkMessageContentMask(stream, this.networkMessageContentMask);
        this.samplingOffset = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.samplingOffset);
        this.publishingOffset = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeDouble);
    }
    // Define Enumeration setters
    setDataSetOrdering(value) {
        const coercedValue = exports._enumerationDataSetOrderingType.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to DataSetOrderingType :" + value);
        }
        this.dataSetOrdering = coercedValue.value;
        return this.dataSetOrdering;
    }
    setNetworkMessageContentMask(value) {
        const coercedValue = exports._enumerationUadpNetworkMessageContentMask.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to UadpNetworkMessageContentMask :" + value);
        }
        this.networkMessageContentMask = coercedValue.value;
        return this.networkMessageContentMask;
    }
    get schema() { return schemaUadpWriterGroupMessageDataType; }
}
exports.UadpWriterGroupMessageDataType = UadpWriterGroupMessageDataType;
UadpWriterGroupMessageDataType.possibleFields = [
    "groupVersion",
    "dataSetOrdering",
    "networkMessageContentMask",
    "samplingOffset",
    "publishingOffset"
];
UadpWriterGroupMessageDataType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15645, 0);
UadpWriterGroupMessageDataType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15715, 0);
UadpWriterGroupMessageDataType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16014, 0);
UadpWriterGroupMessageDataType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(16323, 0);
UadpWriterGroupMessageDataType.schema.dataTypeNodeId = UadpWriterGroupMessageDataType.dataTypeNodeId;
UadpWriterGroupMessageDataType.schema.encodingDefaultBinary = UadpWriterGroupMessageDataType.encodingDefaultBinary;
UadpWriterGroupMessageDataType.schema.encodingDefaultXml = UadpWriterGroupMessageDataType.encodingDefaultXml;
UadpWriterGroupMessageDataType.schema.encodingDefaultJson = UadpWriterGroupMessageDataType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(UadpWriterGroupMessageDataType.dataTypeNodeId, "UadpWriterGroupMessageDataType", UadpWriterGroupMessageDataType);
// --------------------------------------------------------------------------------------------
const schemaUnion = (0, node_opcua_factory_1.buildStructuredType)({
    name: "Union",
    baseType: "ExtensionObject",
    fields: []
});
class Union extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            return;
        }
        const schema = Union.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
    }
    static get schema() { return schemaUnion; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
    }
    get schema() { return schemaUnion; }
}
exports.Union = Union;
Union.possibleFields = [];
Union.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12756, 0);
Union.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12766, 0);
Union.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12758, 0);
Union.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15085, 0);
Union.schema.dataTypeNodeId = Union.dataTypeNodeId;
Union.schema.encodingDefaultBinary = Union.encodingDefaultBinary;
Union.schema.encodingDefaultXml = Union.encodingDefaultXml;
Union.schema.encodingDefaultJson = Union.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(Union.dataTypeNodeId, "Union", Union);
// --------------------------------------------------------------------------------------------
const schemaUnregisterNodesRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "UnregisterNodesRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "nodesToUnregister",
            fieldType: "NodeId",
            isArray: true
        },
    ]
});
class UnregisterNodesRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.nodesToUnregister = [];
            return;
        }
        const schema = UnregisterNodesRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.nodesToUnregister = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.nodesToUnregister);
    }
    static get schema() { return schemaUnregisterNodesRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.nodesToUnregister, stream, node_opcua_basic_types_1.encodeNodeId);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.nodesToUnregister = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeNodeId);
    }
    get schema() { return schemaUnregisterNodesRequest; }
}
exports.UnregisterNodesRequest = UnregisterNodesRequest;
UnregisterNodesRequest.possibleFields = [
    "requestHeader",
    "nodesToUnregister"
];
UnregisterNodesRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(564, 0);
UnregisterNodesRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(566, 0);
UnregisterNodesRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(565, 0);
UnregisterNodesRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15197, 0);
UnregisterNodesRequest.schema.dataTypeNodeId = UnregisterNodesRequest.dataTypeNodeId;
UnregisterNodesRequest.schema.encodingDefaultBinary = UnregisterNodesRequest.encodingDefaultBinary;
UnregisterNodesRequest.schema.encodingDefaultXml = UnregisterNodesRequest.encodingDefaultXml;
UnregisterNodesRequest.schema.encodingDefaultJson = UnregisterNodesRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(UnregisterNodesRequest.dataTypeNodeId, "UnregisterNodesRequest", UnregisterNodesRequest);
// --------------------------------------------------------------------------------------------
const schemaUnregisterNodesResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "UnregisterNodesResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
    ]
});
class UnregisterNodesResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            return;
        }
        const schema = UnregisterNodesResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
    }
    static get schema() { return schemaUnregisterNodesResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
    }
    get schema() { return schemaUnregisterNodesResponse; }
}
exports.UnregisterNodesResponse = UnregisterNodesResponse;
UnregisterNodesResponse.possibleFields = [
    "responseHeader"
];
UnregisterNodesResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(567, 0);
UnregisterNodesResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(569, 0);
UnregisterNodesResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(568, 0);
UnregisterNodesResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15198, 0);
UnregisterNodesResponse.schema.dataTypeNodeId = UnregisterNodesResponse.dataTypeNodeId;
UnregisterNodesResponse.schema.encodingDefaultBinary = UnregisterNodesResponse.encodingDefaultBinary;
UnregisterNodesResponse.schema.encodingDefaultXml = UnregisterNodesResponse.encodingDefaultXml;
UnregisterNodesResponse.schema.encodingDefaultJson = UnregisterNodesResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(UnregisterNodesResponse.dataTypeNodeId, "UnregisterNodesResponse", UnregisterNodesResponse);
// --------------------------------------------------------------------------------------------
var PerformUpdateType;
(function (PerformUpdateType) {
    PerformUpdateType[PerformUpdateType["Insert"] = 1] = "Insert";
    PerformUpdateType[PerformUpdateType["Replace"] = 2] = "Replace";
    PerformUpdateType[PerformUpdateType["Update"] = 3] = "Update";
    PerformUpdateType[PerformUpdateType["Remove"] = 4] = "Remove";
    PerformUpdateType[PerformUpdateType["Invalid"] = 4294967295] = "Invalid";
})(PerformUpdateType = exports.PerformUpdateType || (exports.PerformUpdateType = {}));
const schemaPerformUpdateType = {
    enumValues: PerformUpdateType,
    flaggable: false,
    minValue: 1,
    maxValue: 4,
    name: "PerformUpdateType"
};
function decodePerformUpdateType(stream, _value) {
    let value = stream.readUInt32();
    value = (value < schemaPerformUpdateType.minValue || value > schemaPerformUpdateType.maxValue) ? PerformUpdateType.Invalid : value;
    return value;
}
function encodePerformUpdateType(value, stream) {
    stream.writeUInt32(value);
}
exports._enumerationPerformUpdateType = (0, node_opcua_factory_1.registerEnumeration)(schemaPerformUpdateType);
(0, node_opcua_assert_1.assert)(exports._enumerationPerformUpdateType.isFlaggable === false);
// --------------------------------------------------------------------------------------------
const schemaUpdateDataDetails = (0, node_opcua_factory_1.buildStructuredType)({
    name: "UpdateDataDetails",
    baseType: "HistoryUpdateDetails",
    fields: [
        {
            name: "performInsertReplace",
            fieldType: "PerformUpdateType",
        },
        {
            name: "updateValues",
            fieldType: "DataValue",
            isArray: true
        },
    ]
});
class UpdateDataDetails extends HistoryUpdateDetails {
    constructor(options) {
        super(options);
        if (options === null) {
            this.performInsertReplace = 0;
            this.updateValues = [];
            return;
        }
        const schema = UpdateDataDetails.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.performInsertReplace = this.setPerformInsertReplace((0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.performInsertReplace));
        this.updateValues = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.updateValues);
    }
    static get schema() { return schemaUpdateDataDetails; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        encodePerformUpdateType(this.performInsertReplace, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.updateValues, stream, node_opcua_data_value_1.encodeDataValue);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.performInsertReplace = decodePerformUpdateType(stream, this.performInsertReplace);
        this.updateValues = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_value_1.decodeDataValue);
    }
    // Define Enumeration setters
    setPerformInsertReplace(value) {
        const coercedValue = exports._enumerationPerformUpdateType.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to PerformUpdateType :" + value);
        }
        this.performInsertReplace = coercedValue.value;
        return this.performInsertReplace;
    }
    get schema() { return schemaUpdateDataDetails; }
}
exports.UpdateDataDetails = UpdateDataDetails;
UpdateDataDetails.possibleFields = [
    "performInsertReplace",
    "updateValues"
];
UpdateDataDetails.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(680, 0);
UpdateDataDetails.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(682, 0);
UpdateDataDetails.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(681, 0);
UpdateDataDetails.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15280, 0);
UpdateDataDetails.schema.dataTypeNodeId = UpdateDataDetails.dataTypeNodeId;
UpdateDataDetails.schema.encodingDefaultBinary = UpdateDataDetails.encodingDefaultBinary;
UpdateDataDetails.schema.encodingDefaultXml = UpdateDataDetails.encodingDefaultXml;
UpdateDataDetails.schema.encodingDefaultJson = UpdateDataDetails.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(UpdateDataDetails.dataTypeNodeId, "UpdateDataDetails", UpdateDataDetails);
// --------------------------------------------------------------------------------------------
const schemaUpdateEventDetails = (0, node_opcua_factory_1.buildStructuredType)({
    name: "UpdateEventDetails",
    baseType: "HistoryUpdateDetails",
    fields: [
        {
            name: "performInsertReplace",
            fieldType: "PerformUpdateType",
        },
        {
            name: "filter",
            fieldType: "EventFilter",
        },
        {
            name: "eventData",
            fieldType: "HistoryEventFieldList",
            isArray: true
        },
    ]
});
class UpdateEventDetails extends HistoryUpdateDetails {
    constructor(options) {
        super(options);
        if (options === null) {
            this.performInsertReplace = 0;
            this.filter = new EventFilter(null);
            this.eventData = null; /* null array */
            return;
        }
        const schema = UpdateEventDetails.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.performInsertReplace = this.setPerformInsertReplace((0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.performInsertReplace));
        this.filter = new EventFilter(options.filter);
        this.eventData = []; // should default
        if (options.eventData) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.eventData));
            this.eventData = options.eventData.map((e) => new HistoryEventFieldList(e));
        }
    }
    static get schema() { return schemaUpdateEventDetails; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        encodePerformUpdateType(this.performInsertReplace, stream);
        this.filter.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.eventData, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.performInsertReplace = decodePerformUpdateType(stream, this.performInsertReplace);
        this.filter.decode(stream);
        this.eventData = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new HistoryEventFieldList(null);
            obj.decode(stream1);
            return obj;
        });
    }
    // Define Enumeration setters
    setPerformInsertReplace(value) {
        const coercedValue = exports._enumerationPerformUpdateType.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to PerformUpdateType :" + value);
        }
        this.performInsertReplace = coercedValue.value;
        return this.performInsertReplace;
    }
    get schema() { return schemaUpdateEventDetails; }
}
exports.UpdateEventDetails = UpdateEventDetails;
UpdateEventDetails.possibleFields = [
    "performInsertReplace",
    "filter",
    "eventData"
];
UpdateEventDetails.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(683, 0);
UpdateEventDetails.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(685, 0);
UpdateEventDetails.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(684, 0);
UpdateEventDetails.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15282, 0);
UpdateEventDetails.schema.dataTypeNodeId = UpdateEventDetails.dataTypeNodeId;
UpdateEventDetails.schema.encodingDefaultBinary = UpdateEventDetails.encodingDefaultBinary;
UpdateEventDetails.schema.encodingDefaultXml = UpdateEventDetails.encodingDefaultXml;
UpdateEventDetails.schema.encodingDefaultJson = UpdateEventDetails.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(UpdateEventDetails.dataTypeNodeId, "UpdateEventDetails", UpdateEventDetails);
// --------------------------------------------------------------------------------------------
const schemaUpdateStructureDataDetails = (0, node_opcua_factory_1.buildStructuredType)({
    name: "UpdateStructureDataDetails",
    baseType: "HistoryUpdateDetails",
    fields: [
        {
            name: "performInsertReplace",
            fieldType: "PerformUpdateType",
        },
        {
            name: "updateValues",
            fieldType: "DataValue",
            isArray: true
        },
    ]
});
class UpdateStructureDataDetails extends HistoryUpdateDetails {
    constructor(options) {
        super(options);
        if (options === null) {
            this.performInsertReplace = 0;
            this.updateValues = [];
            return;
        }
        const schema = UpdateStructureDataDetails.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.performInsertReplace = this.setPerformInsertReplace((0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.performInsertReplace));
        this.updateValues = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.updateValues);
    }
    static get schema() { return schemaUpdateStructureDataDetails; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        encodePerformUpdateType(this.performInsertReplace, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.updateValues, stream, node_opcua_data_value_1.encodeDataValue);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.performInsertReplace = decodePerformUpdateType(stream, this.performInsertReplace);
        this.updateValues = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_value_1.decodeDataValue);
    }
    // Define Enumeration setters
    setPerformInsertReplace(value) {
        const coercedValue = exports._enumerationPerformUpdateType.get(value);
        /* istanbul ignore next */
        if (coercedValue === undefined || coercedValue === null) {
            throw new Error("value cannot be coerced to PerformUpdateType :" + value);
        }
        this.performInsertReplace = coercedValue.value;
        return this.performInsertReplace;
    }
    get schema() { return schemaUpdateStructureDataDetails; }
}
exports.UpdateStructureDataDetails = UpdateStructureDataDetails;
UpdateStructureDataDetails.possibleFields = [
    "performInsertReplace",
    "updateValues"
];
UpdateStructureDataDetails.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(11295, 0);
UpdateStructureDataDetails.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(11300, 0);
UpdateStructureDataDetails.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(11296, 0);
UpdateStructureDataDetails.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15281, 0);
UpdateStructureDataDetails.schema.dataTypeNodeId = UpdateStructureDataDetails.dataTypeNodeId;
UpdateStructureDataDetails.schema.encodingDefaultBinary = UpdateStructureDataDetails.encodingDefaultBinary;
UpdateStructureDataDetails.schema.encodingDefaultXml = UpdateStructureDataDetails.encodingDefaultXml;
UpdateStructureDataDetails.schema.encodingDefaultJson = UpdateStructureDataDetails.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(UpdateStructureDataDetails.dataTypeNodeId, "UpdateStructureDataDetails", UpdateStructureDataDetails);
// --------------------------------------------------------------------------------------------
const schemaUserNameIdentityToken = (0, node_opcua_factory_1.buildStructuredType)({
    name: "UserNameIdentityToken",
    baseType: "UserIdentityToken",
    fields: [
        {
            name: "userName",
            fieldType: "UAString",
        },
        {
            name: "password",
            fieldType: "ByteString",
        },
        {
            name: "encryptionAlgorithm",
            fieldType: "UAString",
        },
    ]
});
class UserNameIdentityToken extends UserIdentityToken {
    constructor(options) {
        super(options);
        if (options === null) {
            this.userName = null;
            this.password = Buffer.alloc(0);
            this.encryptionAlgorithm = null;
            return;
        }
        const schema = UserNameIdentityToken.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.userName = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.userName);
        this.password = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.password);
        this.encryptionAlgorithm = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.encryptionAlgorithm);
    }
    static get schema() { return schemaUserNameIdentityToken; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.userName, stream);
        (0, node_opcua_basic_types_1.encodeByteString)(this.password, stream);
        (0, node_opcua_basic_types_1.encodeUAString)(this.encryptionAlgorithm, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.userName = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.userName);
        this.password = (0, node_opcua_basic_types_1.decodeByteString)(stream, this.password);
        this.encryptionAlgorithm = (0, node_opcua_basic_types_1.decodeUAString)(stream, this.encryptionAlgorithm);
    }
    get schema() { return schemaUserNameIdentityToken; }
}
exports.UserNameIdentityToken = UserNameIdentityToken;
UserNameIdentityToken.possibleFields = [
    "userName",
    "password",
    "encryptionAlgorithm"
];
UserNameIdentityToken.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(322, 0);
UserNameIdentityToken.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(324, 0);
UserNameIdentityToken.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(323, 0);
UserNameIdentityToken.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15142, 0);
UserNameIdentityToken.schema.dataTypeNodeId = UserNameIdentityToken.dataTypeNodeId;
UserNameIdentityToken.schema.encodingDefaultBinary = UserNameIdentityToken.encodingDefaultBinary;
UserNameIdentityToken.schema.encodingDefaultXml = UserNameIdentityToken.encodingDefaultXml;
UserNameIdentityToken.schema.encodingDefaultJson = UserNameIdentityToken.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(UserNameIdentityToken.dataTypeNodeId, "UserNameIdentityToken", UserNameIdentityToken);
// --------------------------------------------------------------------------------------------
const schemaVariableAttributes = (0, node_opcua_factory_1.buildStructuredType)({
    name: "VariableAttributes",
    baseType: "NodeAttributes",
    fields: [
        {
            name: "value",
            fieldType: "Variant",
        },
        {
            name: "dataType",
            fieldType: "NodeId",
        },
        {
            name: "valueRank",
            fieldType: "Int32",
        },
        {
            name: "arrayDimensions",
            fieldType: "UInt32",
            isArray: true
        },
        {
            name: "accessLevel",
            fieldType: "Byte",
        },
        {
            name: "userAccessLevel",
            fieldType: "Byte",
        },
        {
            name: "minimumSamplingInterval",
            fieldType: "Double",
        },
        {
            name: "historizing",
            fieldType: "UABoolean",
        },
    ]
});
class VariableAttributes extends NodeAttributes {
    constructor(options) {
        super(options);
        if (options === null) {
            this.value = new node_opcua_variant_1.Variant(null);
            this.dataType = new node_opcua_nodeid_1.NodeId(null);
            this.valueRank = 0;
            this.arrayDimensions = [];
            this.accessLevel = 0;
            this.userAccessLevel = 0;
            this.minimumSamplingInterval = 0;
            this.historizing = false;
            return;
        }
        const schema = VariableAttributes.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.value = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.value);
        this.dataType = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.dataType);
        this.valueRank = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.valueRank);
        this.arrayDimensions = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[3], options === null || options === void 0 ? void 0 : options.arrayDimensions);
        this.accessLevel = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.accessLevel);
        this.userAccessLevel = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.userAccessLevel);
        this.minimumSamplingInterval = (0, node_opcua_factory_1.initialize_field)(schema.fields[6], options === null || options === void 0 ? void 0 : options.minimumSamplingInterval);
        this.historizing = (0, node_opcua_factory_1.initialize_field)(schema.fields[7], options === null || options === void 0 ? void 0 : options.historizing);
    }
    static get schema() { return schemaVariableAttributes; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_variant_1.encodeVariant)(this.value, stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.dataType, stream);
        (0, node_opcua_basic_types_1.encodeInt32)(this.valueRank, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.arrayDimensions, stream, node_opcua_basic_types_1.encodeUInt32);
        (0, node_opcua_basic_types_1.encodeByte)(this.accessLevel, stream);
        (0, node_opcua_basic_types_1.encodeByte)(this.userAccessLevel, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.minimumSamplingInterval, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.historizing, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.value = (0, node_opcua_variant_1.decodeVariant)(stream, this.value);
        this.dataType = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.dataType);
        this.valueRank = (0, node_opcua_basic_types_1.decodeInt32)(stream, this.valueRank);
        this.arrayDimensions = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUInt32);
        this.accessLevel = (0, node_opcua_basic_types_1.decodeByte)(stream, this.accessLevel);
        this.userAccessLevel = (0, node_opcua_basic_types_1.decodeByte)(stream, this.userAccessLevel);
        this.minimumSamplingInterval = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.minimumSamplingInterval);
        this.historizing = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.historizing);
    }
    get schema() { return schemaVariableAttributes; }
}
exports.VariableAttributes = VariableAttributes;
VariableAttributes.possibleFields = [
    "value",
    "dataType",
    "valueRank",
    "arrayDimensions",
    "accessLevel",
    "userAccessLevel",
    "minimumSamplingInterval",
    "historizing"
];
VariableAttributes.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(355, 0);
VariableAttributes.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(357, 0);
VariableAttributes.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(356, 0);
VariableAttributes.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15153, 0);
VariableAttributes.schema.dataTypeNodeId = VariableAttributes.dataTypeNodeId;
VariableAttributes.schema.encodingDefaultBinary = VariableAttributes.encodingDefaultBinary;
VariableAttributes.schema.encodingDefaultXml = VariableAttributes.encodingDefaultXml;
VariableAttributes.schema.encodingDefaultJson = VariableAttributes.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(VariableAttributes.dataTypeNodeId, "VariableAttributes", VariableAttributes);
// --------------------------------------------------------------------------------------------
const schemaVariableNode = (0, node_opcua_factory_1.buildStructuredType)({
    name: "VariableNode",
    baseType: "InstanceNode",
    fields: [
        {
            name: "rolePermissions",
            fieldType: "RolePermissionType",
            isArray: true
        },
        {
            name: "userRolePermissions",
            fieldType: "RolePermissionType",
            isArray: true
        },
        {
            name: "references",
            fieldType: "ReferenceNode",
            isArray: true
        },
        {
            name: "value",
            fieldType: "Variant",
        },
        {
            name: "dataType",
            fieldType: "NodeId",
        },
        {
            name: "valueRank",
            fieldType: "Int32",
        },
        {
            name: "arrayDimensions",
            fieldType: "UInt32",
            isArray: true
        },
        {
            name: "accessLevel",
            fieldType: "Byte",
        },
        {
            name: "userAccessLevel",
            fieldType: "Byte",
        },
        {
            name: "minimumSamplingInterval",
            fieldType: "Double",
        },
        {
            name: "historizing",
            fieldType: "UABoolean",
        },
        {
            name: "accessLevelEx",
            fieldType: "UInt32",
        },
    ]
});
class VariableNode extends InstanceNode {
    constructor(options) {
        super(options);
        if (options === null) {
            this.rolePermissions = null; /* null array */
            this.userRolePermissions = null; /* null array */
            this.references = null; /* null array */
            this.value = new node_opcua_variant_1.Variant(null);
            this.dataType = new node_opcua_nodeid_1.NodeId(null);
            this.valueRank = 0;
            this.arrayDimensions = [];
            this.accessLevel = 0;
            this.userAccessLevel = 0;
            this.minimumSamplingInterval = 0;
            this.historizing = false;
            this.accessLevelEx = 0;
            return;
        }
        const schema = VariableNode.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.rolePermissions = []; // should default
        if (options.rolePermissions) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.rolePermissions));
            this.rolePermissions = options.rolePermissions.map((e) => new RolePermissionType(e));
        }
        this.userRolePermissions = []; // should default
        if (options.userRolePermissions) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.userRolePermissions));
            this.userRolePermissions = options.userRolePermissions.map((e) => new RolePermissionType(e));
        }
        this.references = []; // should default
        if (options.references) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.references));
            this.references = options.references.map((e) => new ReferenceNode(e));
        }
        this.value = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.value);
        this.dataType = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.dataType);
        this.valueRank = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.valueRank);
        this.arrayDimensions = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[6], options === null || options === void 0 ? void 0 : options.arrayDimensions);
        this.accessLevel = (0, node_opcua_factory_1.initialize_field)(schema.fields[7], options === null || options === void 0 ? void 0 : options.accessLevel);
        this.userAccessLevel = (0, node_opcua_factory_1.initialize_field)(schema.fields[8], options === null || options === void 0 ? void 0 : options.userAccessLevel);
        this.minimumSamplingInterval = (0, node_opcua_factory_1.initialize_field)(schema.fields[9], options === null || options === void 0 ? void 0 : options.minimumSamplingInterval);
        this.historizing = (0, node_opcua_factory_1.initialize_field)(schema.fields[10], options === null || options === void 0 ? void 0 : options.historizing);
        this.accessLevelEx = (0, node_opcua_factory_1.initialize_field)(schema.fields[11], options === null || options === void 0 ? void 0 : options.accessLevelEx);
    }
    static get schema() { return schemaVariableNode; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.rolePermissions, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.userRolePermissions, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.references, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_variant_1.encodeVariant)(this.value, stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.dataType, stream);
        (0, node_opcua_basic_types_1.encodeInt32)(this.valueRank, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.arrayDimensions, stream, node_opcua_basic_types_1.encodeUInt32);
        (0, node_opcua_basic_types_1.encodeByte)(this.accessLevel, stream);
        (0, node_opcua_basic_types_1.encodeByte)(this.userAccessLevel, stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.minimumSamplingInterval, stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.historizing, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.accessLevelEx, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.rolePermissions = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new RolePermissionType(null);
            obj.decode(stream1);
            return obj;
        });
        this.userRolePermissions = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new RolePermissionType(null);
            obj.decode(stream1);
            return obj;
        });
        this.references = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new ReferenceNode(null);
            obj.decode(stream1);
            return obj;
        });
        this.value = (0, node_opcua_variant_1.decodeVariant)(stream, this.value);
        this.dataType = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.dataType);
        this.valueRank = (0, node_opcua_basic_types_1.decodeInt32)(stream, this.valueRank);
        this.arrayDimensions = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUInt32);
        this.accessLevel = (0, node_opcua_basic_types_1.decodeByte)(stream, this.accessLevel);
        this.userAccessLevel = (0, node_opcua_basic_types_1.decodeByte)(stream, this.userAccessLevel);
        this.minimumSamplingInterval = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.minimumSamplingInterval);
        this.historizing = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.historizing);
        this.accessLevelEx = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.accessLevelEx);
    }
    get schema() { return schemaVariableNode; }
}
exports.VariableNode = VariableNode;
VariableNode.possibleFields = [
    "rolePermissions",
    "userRolePermissions",
    "references",
    "value",
    "dataType",
    "valueRank",
    "arrayDimensions",
    "accessLevel",
    "userAccessLevel",
    "minimumSamplingInterval",
    "historizing",
    "accessLevelEx"
];
VariableNode.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(267, 0);
VariableNode.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(269, 0);
VariableNode.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(268, 0);
VariableNode.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15074, 0);
VariableNode.schema.dataTypeNodeId = VariableNode.dataTypeNodeId;
VariableNode.schema.encodingDefaultBinary = VariableNode.encodingDefaultBinary;
VariableNode.schema.encodingDefaultXml = VariableNode.encodingDefaultXml;
VariableNode.schema.encodingDefaultJson = VariableNode.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(VariableNode.dataTypeNodeId, "VariableNode", VariableNode);
// --------------------------------------------------------------------------------------------
const schemaVariableTypeAttributes = (0, node_opcua_factory_1.buildStructuredType)({
    name: "VariableTypeAttributes",
    baseType: "NodeAttributes",
    fields: [
        {
            name: "value",
            fieldType: "Variant",
        },
        {
            name: "dataType",
            fieldType: "NodeId",
        },
        {
            name: "valueRank",
            fieldType: "Int32",
        },
        {
            name: "arrayDimensions",
            fieldType: "UInt32",
            isArray: true
        },
        {
            name: "isAbstract",
            fieldType: "UABoolean",
        },
    ]
});
class VariableTypeAttributes extends NodeAttributes {
    constructor(options) {
        super(options);
        if (options === null) {
            this.value = new node_opcua_variant_1.Variant(null);
            this.dataType = new node_opcua_nodeid_1.NodeId(null);
            this.valueRank = 0;
            this.arrayDimensions = [];
            this.isAbstract = false;
            return;
        }
        const schema = VariableTypeAttributes.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.value = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.value);
        this.dataType = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.dataType);
        this.valueRank = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.valueRank);
        this.arrayDimensions = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[3], options === null || options === void 0 ? void 0 : options.arrayDimensions);
        this.isAbstract = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.isAbstract);
    }
    static get schema() { return schemaVariableTypeAttributes; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_variant_1.encodeVariant)(this.value, stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.dataType, stream);
        (0, node_opcua_basic_types_1.encodeInt32)(this.valueRank, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.arrayDimensions, stream, node_opcua_basic_types_1.encodeUInt32);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.isAbstract, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.value = (0, node_opcua_variant_1.decodeVariant)(stream, this.value);
        this.dataType = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.dataType);
        this.valueRank = (0, node_opcua_basic_types_1.decodeInt32)(stream, this.valueRank);
        this.arrayDimensions = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUInt32);
        this.isAbstract = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.isAbstract);
    }
    get schema() { return schemaVariableTypeAttributes; }
}
exports.VariableTypeAttributes = VariableTypeAttributes;
VariableTypeAttributes.possibleFields = [
    "value",
    "dataType",
    "valueRank",
    "arrayDimensions",
    "isAbstract"
];
VariableTypeAttributes.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(364, 0);
VariableTypeAttributes.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(366, 0);
VariableTypeAttributes.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(365, 0);
VariableTypeAttributes.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15159, 0);
VariableTypeAttributes.schema.dataTypeNodeId = VariableTypeAttributes.dataTypeNodeId;
VariableTypeAttributes.schema.encodingDefaultBinary = VariableTypeAttributes.encodingDefaultBinary;
VariableTypeAttributes.schema.encodingDefaultXml = VariableTypeAttributes.encodingDefaultXml;
VariableTypeAttributes.schema.encodingDefaultJson = VariableTypeAttributes.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(VariableTypeAttributes.dataTypeNodeId, "VariableTypeAttributes", VariableTypeAttributes);
// --------------------------------------------------------------------------------------------
const schemaVariableTypeNode = (0, node_opcua_factory_1.buildStructuredType)({
    name: "VariableTypeNode",
    baseType: "TypeNode",
    fields: [
        {
            name: "rolePermissions",
            fieldType: "RolePermissionType",
            isArray: true
        },
        {
            name: "userRolePermissions",
            fieldType: "RolePermissionType",
            isArray: true
        },
        {
            name: "references",
            fieldType: "ReferenceNode",
            isArray: true
        },
        {
            name: "value",
            fieldType: "Variant",
        },
        {
            name: "dataType",
            fieldType: "NodeId",
        },
        {
            name: "valueRank",
            fieldType: "Int32",
        },
        {
            name: "arrayDimensions",
            fieldType: "UInt32",
            isArray: true
        },
        {
            name: "isAbstract",
            fieldType: "UABoolean",
        },
    ]
});
class VariableTypeNode extends TypeNode {
    constructor(options) {
        super(options);
        if (options === null) {
            this.rolePermissions = null; /* null array */
            this.userRolePermissions = null; /* null array */
            this.references = null; /* null array */
            this.value = new node_opcua_variant_1.Variant(null);
            this.dataType = new node_opcua_nodeid_1.NodeId(null);
            this.valueRank = 0;
            this.arrayDimensions = [];
            this.isAbstract = false;
            return;
        }
        const schema = VariableTypeNode.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.rolePermissions = []; // should default
        if (options.rolePermissions) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.rolePermissions));
            this.rolePermissions = options.rolePermissions.map((e) => new RolePermissionType(e));
        }
        this.userRolePermissions = []; // should default
        if (options.userRolePermissions) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.userRolePermissions));
            this.userRolePermissions = options.userRolePermissions.map((e) => new RolePermissionType(e));
        }
        this.references = []; // should default
        if (options.references) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.references));
            this.references = options.references.map((e) => new ReferenceNode(e));
        }
        this.value = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.value);
        this.dataType = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.dataType);
        this.valueRank = (0, node_opcua_factory_1.initialize_field)(schema.fields[5], options === null || options === void 0 ? void 0 : options.valueRank);
        this.arrayDimensions = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[6], options === null || options === void 0 ? void 0 : options.arrayDimensions);
        this.isAbstract = (0, node_opcua_factory_1.initialize_field)(schema.fields[7], options === null || options === void 0 ? void 0 : options.isAbstract);
    }
    static get schema() { return schemaVariableTypeNode; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.rolePermissions, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.userRolePermissions, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.references, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_variant_1.encodeVariant)(this.value, stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.dataType, stream);
        (0, node_opcua_basic_types_1.encodeInt32)(this.valueRank, stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.arrayDimensions, stream, node_opcua_basic_types_1.encodeUInt32);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.isAbstract, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.rolePermissions = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new RolePermissionType(null);
            obj.decode(stream1);
            return obj;
        });
        this.userRolePermissions = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new RolePermissionType(null);
            obj.decode(stream1);
            return obj;
        });
        this.references = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new ReferenceNode(null);
            obj.decode(stream1);
            return obj;
        });
        this.value = (0, node_opcua_variant_1.decodeVariant)(stream, this.value);
        this.dataType = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.dataType);
        this.valueRank = (0, node_opcua_basic_types_1.decodeInt32)(stream, this.valueRank);
        this.arrayDimensions = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_basic_types_1.decodeUInt32);
        this.isAbstract = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.isAbstract);
    }
    get schema() { return schemaVariableTypeNode; }
}
exports.VariableTypeNode = VariableTypeNode;
VariableTypeNode.possibleFields = [
    "rolePermissions",
    "userRolePermissions",
    "references",
    "value",
    "dataType",
    "valueRank",
    "arrayDimensions",
    "isAbstract"
];
VariableTypeNode.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(270, 0);
VariableTypeNode.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(272, 0);
VariableTypeNode.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(271, 0);
VariableTypeNode.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15075, 0);
VariableTypeNode.schema.dataTypeNodeId = VariableTypeNode.dataTypeNodeId;
VariableTypeNode.schema.encodingDefaultBinary = VariableTypeNode.encodingDefaultBinary;
VariableTypeNode.schema.encodingDefaultXml = VariableTypeNode.encodingDefaultXml;
VariableTypeNode.schema.encodingDefaultJson = VariableTypeNode.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(VariableTypeNode.dataTypeNodeId, "VariableTypeNode", VariableTypeNode);
// --------------------------------------------------------------------------------------------
const schemaViewAttributes = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ViewAttributes",
    baseType: "NodeAttributes",
    fields: [
        {
            name: "containsNoLoops",
            fieldType: "UABoolean",
        },
        {
            name: "eventNotifier",
            fieldType: "Byte",
        },
    ]
});
class ViewAttributes extends NodeAttributes {
    constructor(options) {
        super(options);
        if (options === null) {
            this.containsNoLoops = false;
            this.eventNotifier = 0;
            return;
        }
        const schema = ViewAttributes.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.containsNoLoops = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.containsNoLoops);
        this.eventNotifier = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.eventNotifier);
    }
    static get schema() { return schemaViewAttributes; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.containsNoLoops, stream);
        (0, node_opcua_basic_types_1.encodeByte)(this.eventNotifier, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.containsNoLoops = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.containsNoLoops);
        this.eventNotifier = (0, node_opcua_basic_types_1.decodeByte)(stream, this.eventNotifier);
    }
    get schema() { return schemaViewAttributes; }
}
exports.ViewAttributes = ViewAttributes;
ViewAttributes.possibleFields = [
    "containsNoLoops",
    "eventNotifier"
];
ViewAttributes.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(373, 0);
ViewAttributes.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(375, 0);
ViewAttributes.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(374, 0);
ViewAttributes.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15162, 0);
ViewAttributes.schema.dataTypeNodeId = ViewAttributes.dataTypeNodeId;
ViewAttributes.schema.encodingDefaultBinary = ViewAttributes.encodingDefaultBinary;
ViewAttributes.schema.encodingDefaultXml = ViewAttributes.encodingDefaultXml;
ViewAttributes.schema.encodingDefaultJson = ViewAttributes.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ViewAttributes.dataTypeNodeId, "ViewAttributes", ViewAttributes);
// --------------------------------------------------------------------------------------------
const schemaViewNode = (0, node_opcua_factory_1.buildStructuredType)({
    name: "ViewNode",
    baseType: "InstanceNode",
    fields: [
        {
            name: "rolePermissions",
            fieldType: "RolePermissionType",
            isArray: true
        },
        {
            name: "userRolePermissions",
            fieldType: "RolePermissionType",
            isArray: true
        },
        {
            name: "references",
            fieldType: "ReferenceNode",
            isArray: true
        },
        {
            name: "containsNoLoops",
            fieldType: "UABoolean",
        },
        {
            name: "eventNotifier",
            fieldType: "Byte",
        },
    ]
});
class ViewNode extends InstanceNode {
    constructor(options) {
        super(options);
        if (options === null) {
            this.rolePermissions = null; /* null array */
            this.userRolePermissions = null; /* null array */
            this.references = null; /* null array */
            this.containsNoLoops = false;
            this.eventNotifier = 0;
            return;
        }
        const schema = ViewNode.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.rolePermissions = []; // should default
        if (options.rolePermissions) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.rolePermissions));
            this.rolePermissions = options.rolePermissions.map((e) => new RolePermissionType(e));
        }
        this.userRolePermissions = []; // should default
        if (options.userRolePermissions) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.userRolePermissions));
            this.userRolePermissions = options.userRolePermissions.map((e) => new RolePermissionType(e));
        }
        this.references = []; // should default
        if (options.references) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.references));
            this.references = options.references.map((e) => new ReferenceNode(e));
        }
        this.containsNoLoops = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.containsNoLoops);
        this.eventNotifier = (0, node_opcua_factory_1.initialize_field)(schema.fields[4], options === null || options === void 0 ? void 0 : options.eventNotifier);
    }
    static get schema() { return schemaViewNode; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.rolePermissions, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.userRolePermissions, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeArray)(this.references, stream, (obj, stream1) => { obj.encode(stream1); });
        (0, node_opcua_basic_types_1.encodeUABoolean)(this.containsNoLoops, stream);
        (0, node_opcua_basic_types_1.encodeByte)(this.eventNotifier, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.rolePermissions = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new RolePermissionType(null);
            obj.decode(stream1);
            return obj;
        });
        this.userRolePermissions = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new RolePermissionType(null);
            obj.decode(stream1);
            return obj;
        });
        this.references = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new ReferenceNode(null);
            obj.decode(stream1);
            return obj;
        });
        this.containsNoLoops = (0, node_opcua_basic_types_1.decodeUABoolean)(stream, this.containsNoLoops);
        this.eventNotifier = (0, node_opcua_basic_types_1.decodeByte)(stream, this.eventNotifier);
    }
    get schema() { return schemaViewNode; }
}
exports.ViewNode = ViewNode;
ViewNode.possibleFields = [
    "rolePermissions",
    "userRolePermissions",
    "references",
    "containsNoLoops",
    "eventNotifier"
];
ViewNode.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(279, 0);
ViewNode.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(281, 0);
ViewNode.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(280, 0);
ViewNode.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15078, 0);
ViewNode.schema.dataTypeNodeId = ViewNode.dataTypeNodeId;
ViewNode.schema.encodingDefaultBinary = ViewNode.encodingDefaultBinary;
ViewNode.schema.encodingDefaultXml = ViewNode.encodingDefaultXml;
ViewNode.schema.encodingDefaultJson = ViewNode.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(ViewNode.dataTypeNodeId, "ViewNode", ViewNode);
// --------------------------------------------------------------------------------------------
const schemaWriteValue = (0, node_opcua_factory_1.buildStructuredType)({
    name: "WriteValue",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "nodeId",
            fieldType: "NodeId",
        },
        {
            name: "attributeId",
            fieldType: "UInt32",
        },
        {
            name: "indexRange",
            fieldType: "NumericRange",
        },
        {
            name: "value",
            fieldType: "DataValue",
        },
    ]
});
class WriteValue extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.nodeId = new node_opcua_nodeid_1.NodeId(null);
            this.attributeId = 0;
            this.indexRange = new node_opcua_numeric_range_1.NumericRange(null);
            this.value = new node_opcua_data_value_1.DataValue(null);
            return;
        }
        const schema = WriteValue.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.nodeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.nodeId);
        this.attributeId = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.attributeId);
        this.indexRange = (0, node_opcua_factory_1.initialize_field)(schema.fields[2], options === null || options === void 0 ? void 0 : options.indexRange);
        this.value = (0, node_opcua_factory_1.initialize_field)(schema.fields[3], options === null || options === void 0 ? void 0 : options.value);
    }
    static get schema() { return schemaWriteValue; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeNodeId)(this.nodeId, stream);
        (0, node_opcua_basic_types_1.encodeUInt32)(this.attributeId, stream);
        (0, node_opcua_numeric_range_1.encodeNumericRange)(this.indexRange, stream);
        (0, node_opcua_data_value_1.encodeDataValue)(this.value, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.nodeId = (0, node_opcua_basic_types_1.decodeNodeId)(stream, this.nodeId);
        this.attributeId = (0, node_opcua_basic_types_1.decodeUInt32)(stream, this.attributeId);
        this.indexRange = (0, node_opcua_numeric_range_1.decodeNumericRange)(stream, this.indexRange);
        this.value = (0, node_opcua_data_value_1.decodeDataValue)(stream, this.value);
    }
    get schema() { return schemaWriteValue; }
}
exports.WriteValue = WriteValue;
WriteValue.possibleFields = [
    "nodeId",
    "attributeId",
    "indexRange",
    "value"
];
WriteValue.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(668, 0);
WriteValue.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(670, 0);
WriteValue.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(669, 0);
WriteValue.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15276, 0);
WriteValue.schema.dataTypeNodeId = WriteValue.dataTypeNodeId;
WriteValue.schema.encodingDefaultBinary = WriteValue.encodingDefaultBinary;
WriteValue.schema.encodingDefaultXml = WriteValue.encodingDefaultXml;
WriteValue.schema.encodingDefaultJson = WriteValue.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(WriteValue.dataTypeNodeId, "WriteValue", WriteValue);
// --------------------------------------------------------------------------------------------
const schemaWriteRequest = (0, node_opcua_factory_1.buildStructuredType)({
    name: "WriteRequest",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "requestHeader",
            fieldType: "RequestHeader",
        },
        {
            name: "nodesToWrite",
            fieldType: "WriteValue",
            isArray: true
        },
    ]
});
class WriteRequest extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.requestHeader = new RequestHeader(null);
            this.nodesToWrite = null; /* null array */
            return;
        }
        const schema = WriteRequest.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.requestHeader = new RequestHeader(options.requestHeader);
        this.nodesToWrite = []; // should default
        if (options.nodesToWrite) {
            (0, node_opcua_assert_1.assert)(Array.isArray(options.nodesToWrite));
            this.nodesToWrite = options.nodesToWrite.map((e) => new WriteValue(e));
        }
    }
    static get schema() { return schemaWriteRequest; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.requestHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.nodesToWrite, stream, (obj, stream1) => { obj.encode(stream1); });
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.requestHeader.decode(stream);
        this.nodesToWrite = (0, node_opcua_basic_types_1.decodeArray)(stream, (stream1) => {
            const obj = new WriteValue(null);
            obj.decode(stream1);
            return obj;
        });
    }
    get schema() { return schemaWriteRequest; }
}
exports.WriteRequest = WriteRequest;
WriteRequest.possibleFields = [
    "requestHeader",
    "nodesToWrite"
];
WriteRequest.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(671, 0);
WriteRequest.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(673, 0);
WriteRequest.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(672, 0);
WriteRequest.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15277, 0);
WriteRequest.schema.dataTypeNodeId = WriteRequest.dataTypeNodeId;
WriteRequest.schema.encodingDefaultBinary = WriteRequest.encodingDefaultBinary;
WriteRequest.schema.encodingDefaultXml = WriteRequest.encodingDefaultXml;
WriteRequest.schema.encodingDefaultJson = WriteRequest.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(WriteRequest.dataTypeNodeId, "WriteRequest", WriteRequest);
// --------------------------------------------------------------------------------------------
const schemaWriteResponse = (0, node_opcua_factory_1.buildStructuredType)({
    name: "WriteResponse",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "responseHeader",
            fieldType: "ResponseHeader",
        },
        {
            name: "results",
            fieldType: "StatusCode",
            isArray: true
        },
        {
            name: "diagnosticInfos",
            fieldType: "DiagnosticInfo",
            isArray: true
        },
    ]
});
class WriteResponse extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.responseHeader = new ResponseHeader(null);
            this.results = [];
            this.diagnosticInfos = [];
            return;
        }
        const schema = WriteResponse.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.responseHeader = new ResponseHeader(options.responseHeader);
        this.results = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[1], options === null || options === void 0 ? void 0 : options.results);
        this.diagnosticInfos = (0, node_opcua_factory_1.initialize_field_array)(schema.fields[2], options === null || options === void 0 ? void 0 : options.diagnosticInfos);
    }
    static get schema() { return schemaWriteResponse; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        this.responseHeader.encode(stream);
        (0, node_opcua_basic_types_1.encodeArray)(this.results, stream, node_opcua_status_code_1.encodeStatusCode);
        (0, node_opcua_basic_types_1.encodeArray)(this.diagnosticInfos, stream, node_opcua_data_model_1.encodeDiagnosticInfo);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.responseHeader.decode(stream);
        this.results = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_status_code_1.decodeStatusCode);
        this.diagnosticInfos = (0, node_opcua_basic_types_1.decodeArray)(stream, node_opcua_data_model_1.decodeDiagnosticInfo);
    }
    get schema() { return schemaWriteResponse; }
}
exports.WriteResponse = WriteResponse;
WriteResponse.possibleFields = [
    "responseHeader",
    "results",
    "diagnosticInfos"
];
WriteResponse.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(674, 0);
WriteResponse.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(676, 0);
WriteResponse.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(675, 0);
WriteResponse.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15278, 0);
WriteResponse.schema.dataTypeNodeId = WriteResponse.dataTypeNodeId;
WriteResponse.schema.encodingDefaultBinary = WriteResponse.encodingDefaultBinary;
WriteResponse.schema.encodingDefaultXml = WriteResponse.encodingDefaultXml;
WriteResponse.schema.encodingDefaultJson = WriteResponse.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(WriteResponse.dataTypeNodeId, "WriteResponse", WriteResponse);
// --------------------------------------------------------------------------------------------
const schemaX509IdentityToken = (0, node_opcua_factory_1.buildStructuredType)({
    name: "X509IdentityToken",
    baseType: "UserIdentityToken",
    fields: [
        {
            name: "certificateData",
            fieldType: "ByteString",
        },
    ]
});
class X509IdentityToken extends UserIdentityToken {
    constructor(options) {
        super(options);
        if (options === null) {
            this.certificateData = Buffer.alloc(0);
            return;
        }
        const schema = X509IdentityToken.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.certificateData = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.certificateData);
    }
    static get schema() { return schemaX509IdentityToken; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeByteString)(this.certificateData, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.certificateData = (0, node_opcua_basic_types_1.decodeByteString)(stream, this.certificateData);
    }
    get schema() { return schemaX509IdentityToken; }
}
exports.X509IdentityToken = X509IdentityToken;
X509IdentityToken.possibleFields = [
    "certificateData"
];
X509IdentityToken.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(325, 0);
X509IdentityToken.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(327, 0);
X509IdentityToken.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(326, 0);
X509IdentityToken.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15143, 0);
X509IdentityToken.schema.dataTypeNodeId = X509IdentityToken.dataTypeNodeId;
X509IdentityToken.schema.encodingDefaultBinary = X509IdentityToken.encodingDefaultBinary;
X509IdentityToken.schema.encodingDefaultXml = X509IdentityToken.encodingDefaultXml;
X509IdentityToken.schema.encodingDefaultJson = X509IdentityToken.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(X509IdentityToken.dataTypeNodeId, "X509IdentityToken", X509IdentityToken);
// --------------------------------------------------------------------------------------------
const schemaXVType = (0, node_opcua_factory_1.buildStructuredType)({
    name: "XVType",
    baseType: "ExtensionObject",
    fields: [
        {
            name: "x",
            fieldType: "Double",
        },
        {
            name: "value",
            fieldType: "Float",
        },
    ]
});
class XVType extends node_opcua_extension_object_1.ExtensionObject {
    constructor(options) {
        super(options);
        if (options === null) {
            this.x = 0;
            this.value = 0;
            return;
        }
        const schema = XVType.schema;
        options = (schema.constructHook ? schema.constructHook(options) : options) || {};
        /* istanbul ignore next */
        if (node_opcua_factory_1.parameters.debugSchemaHelper) {
            (0, node_opcua_factory_1.check_options_correctness_against_schema)(this, schema, options);
        }
        this.x = (0, node_opcua_factory_1.initialize_field)(schema.fields[0], options === null || options === void 0 ? void 0 : options.x);
        this.value = (0, node_opcua_factory_1.initialize_field)(schema.fields[1], options === null || options === void 0 ? void 0 : options.value);
    }
    static get schema() { return schemaXVType; }
    encode(stream) {
        /* NEEDED */ super.encode(stream);
        (0, node_opcua_basic_types_1.encodeDouble)(this.x, stream);
        (0, node_opcua_basic_types_1.encodeFloat)(this.value, stream);
    }
    decode(stream) {
        // call base class implementation first
        /* NEEDED !!! */ super.decode(stream);
        this.x = (0, node_opcua_basic_types_1.decodeDouble)(stream, this.x);
        this.value = (0, node_opcua_basic_types_1.decodeFloat)(stream, this.value);
    }
    get schema() { return schemaXVType; }
}
exports.XVType = XVType;
XVType.possibleFields = [
    "x",
    "value"
];
XVType.dataTypeNodeId = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12080, 0);
XVType.encodingDefaultBinary = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12090, 0);
XVType.encodingDefaultXml = (0, node_opcua_nodeid_1.makeExpandedNodeId)(12082, 0);
XVType.encodingDefaultJson = (0, node_opcua_nodeid_1.makeExpandedNodeId)(15380, 0);
XVType.schema.dataTypeNodeId = XVType.dataTypeNodeId;
XVType.schema.encodingDefaultBinary = XVType.encodingDefaultBinary;
XVType.schema.encodingDefaultXml = XVType.encodingDefaultXml;
XVType.schema.encodingDefaultJson = XVType.encodingDefaultJson;
(0, node_opcua_factory_1.registerClassDefinition)(XVType.dataTypeNodeId, "XVType", XVType);
//# sourceMappingURL=_generated_opcua_types.js.map