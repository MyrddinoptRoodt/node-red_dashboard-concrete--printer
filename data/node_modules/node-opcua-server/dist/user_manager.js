"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeUserManager = exports.UAUserManager1 = exports.UAUserManagerBase = void 0;
class UAUserManagerBase {
    getUserRoles(user) {
        throw new Error("Method not implemented.");
    }
    isValidUser(session, username, password) {
        throw new Error("Method not implemented.");
    }
    getIdentitiesForRole(role) {
        return [];
    }
    bind(roleSet) {
        /**  */
    }
}
exports.UAUserManagerBase = UAUserManagerBase;
class UAUserManager1 extends UAUserManagerBase {
    constructor(options) {
        super();
        this.options = options;
    }
    getUserRoles(user) {
        return this.options.getUserRoles != null ? this.options.getUserRoles(user) : [];
    }
    isValidUser(session, username, password) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof this.options.isValidUserAsync === "function") {
                return new Promise((resolve, reject) => {
                    var _a;
                    (_a = this.options.isValidUserAsync) === null || _a === void 0 ? void 0 : _a.call(session, username, password, (err, isAuthorized) => {
                        if (err)
                            return reject();
                        resolve(isAuthorized);
                    });
                });
            }
            else if (typeof this.options.isValidUser === "function") {
                const authorized = this.options.isValidUser.call(session, username, password);
                return authorized;
            }
            else {
                return false;
            }
        });
    }
    getIdentitiesForRole(role) {
        return [];
    }
}
exports.UAUserManager1 = UAUserManager1;
function makeUserManager(options) {
    if (options instanceof UAUserManagerBase) {
        return options;
    }
    options = options || {};
    if (typeof options.isValidUser !== "function") {
        options.isValidUser = ( /*userName,password*/) => {
            return false;
        };
    }
    return new UAUserManager1(options);
}
exports.makeUserManager = makeUserManager;
//# sourceMappingURL=user_manager.js.map